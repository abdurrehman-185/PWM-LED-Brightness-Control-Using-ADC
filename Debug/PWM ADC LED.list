
PWM ADC LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009078  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009228  08009228  0000a228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009648  08009648  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009648  08009648  0000a648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009650  08009650  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009650  08009650  0000a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009654  08009654  0000a654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009658  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001dc  08009834  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08009834  0000b4fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012637  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ab  00000000  00000000  0001d843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc0  00000000  00000000  00020c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c2a1  00000000  00000000  00021a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001389e  00000000  00000000  0004dcf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117942  00000000  00000000  00061597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d60  00000000  00000000  00178f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0017ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009210 	.word	0x08009210

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08009210 	.word	0x08009210

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
uint32_t arr_value;
uint32_t pulse_value;
uint8_t duty_cycle = 50;

int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af02      	add	r7, sp, #8
    HAL_Init();
 8000f5e:	f000 fd24 	bl	80019aa <HAL_Init>
    SystemClock_Config();
 8000f62:	f000 f96b 	bl	800123c <SystemClock_Config>
    MX_GPIO_Init();
 8000f66:	f000 f9d1 	bl	800130c <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000f6a:	f000 fa0b 	bl	8001384 <MX_LPUART1_UART_Init>
    MX_ADC1_Init();
 8000f6e:	f000 f8e5 	bl	800113c <MX_ADC1_Init>
    MX_TIM4_Init(duty_cycle);
 8000f72:	4b4c      	ldr	r3, [pc, #304]	@ (80010a4 <main+0x14c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa30 	bl	80013dc <MX_TIM4_Init>

    uart_buf_len = sprintf(uart_buf, "System is up and running.\r\n");
 8000f7c:	494a      	ldr	r1, [pc, #296]	@ (80010a8 <main+0x150>)
 8000f7e:	484b      	ldr	r0, [pc, #300]	@ (80010ac <main+0x154>)
 8000f80:	f006 f81a 	bl	8006fb8 <siprintf>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a4a      	ldr	r2, [pc, #296]	@ (80010b0 <main+0x158>)
 8000f88:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f8a:	4b49      	ldr	r3, [pc, #292]	@ (80010b0 <main+0x158>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	4945      	ldr	r1, [pc, #276]	@ (80010ac <main+0x154>)
 8000f96:	4847      	ldr	r0, [pc, #284]	@ (80010b4 <main+0x15c>)
 8000f98:	f004 fd99 	bl	8005ace <HAL_UART_Transmit>

    while (1)
    {
        HAL_ADC_Start(&hadc1);
 8000f9c:	4846      	ldr	r0, [pc, #280]	@ (80010b8 <main+0x160>)
 8000f9e:	f001 f90d 	bl	80021bc <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa6:	4844      	ldr	r0, [pc, #272]	@ (80010b8 <main+0x160>)
 8000fa8:	f001 f9c2 	bl	8002330 <HAL_ADC_PollForConversion>
        adc_value = HAL_ADC_GetValue(&hadc1);
 8000fac:	4842      	ldr	r0, [pc, #264]	@ (80010b8 <main+0x160>)
 8000fae:	f001 fa97 	bl	80024e0 <HAL_ADC_GetValue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a41      	ldr	r2, [pc, #260]	@ (80010bc <main+0x164>)
 8000fb6:	6013      	str	r3, [r2, #0]

        uart_buf_len = sprintf(uart_buf, "ADC Value: %lu\r\n", adc_value);
 8000fb8:	4b40      	ldr	r3, [pc, #256]	@ (80010bc <main+0x164>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4940      	ldr	r1, [pc, #256]	@ (80010c0 <main+0x168>)
 8000fc0:	483a      	ldr	r0, [pc, #232]	@ (80010ac <main+0x154>)
 8000fc2:	f005 fff9 	bl	8006fb8 <siprintf>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a39      	ldr	r2, [pc, #228]	@ (80010b0 <main+0x158>)
 8000fca:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000fcc:	4b38      	ldr	r3, [pc, #224]	@ (80010b0 <main+0x158>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	4935      	ldr	r1, [pc, #212]	@ (80010ac <main+0x154>)
 8000fd8:	4836      	ldr	r0, [pc, #216]	@ (80010b4 <main+0x15c>)
 8000fda:	f004 fd78 	bl	8005ace <HAL_UART_Transmit>

        float voltage = calculate_voltage(adc_value);
 8000fde:	4b37      	ldr	r3, [pc, #220]	@ (80010bc <main+0x164>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f880 	bl	80010e8 <calculate_voltage>
 8000fe8:	ed87 0a01 	vstr	s0, [r7, #4]
        duty_cycle = ((adc_value - 1000) * 100) / 1500;
 8000fec:	4b33      	ldr	r3, [pc, #204]	@ (80010bc <main+0x164>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2264      	movs	r2, #100	@ 0x64
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	f5a3 33c3 	sub.w	r3, r3, #99840	@ 0x18600
 8000ffa:	3ba0      	subs	r3, #160	@ 0xa0
 8000ffc:	4a31      	ldr	r2, [pc, #196]	@ (80010c4 <main+0x16c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <main+0x14c>)
 8001008:	701a      	strb	r2, [r3, #0]
        if (duty_cycle > 100) {
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <main+0x14c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b64      	cmp	r3, #100	@ 0x64
 8001010:	d902      	bls.n	8001018 <main+0xc0>
                    duty_cycle = 100;
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <main+0x14c>)
 8001014:	2264      	movs	r2, #100	@ 0x64
 8001016:	701a      	strb	r2, [r3, #0]
                }
        arr_value = (80000000 / (pwm_frequency * (TIM_PRESCALAR + 1))) - 1;
 8001018:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <main+0x170>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001020:	fb02 f303 	mul.w	r3, r2, r3
 8001024:	4a29      	ldr	r2, [pc, #164]	@ (80010cc <main+0x174>)
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	4a28      	ldr	r2, [pc, #160]	@ (80010d0 <main+0x178>)
 800102e:	6013      	str	r3, [r2, #0]
        pulse_value = (arr_value * duty_cycle) / 100;
 8001030:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <main+0x14c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <main+0x178>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a25      	ldr	r2, [pc, #148]	@ (80010d4 <main+0x17c>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <main+0x180>)
 8001048:	6013      	str	r3, [r2, #0]

        uart_buf_len = sprintf(uart_buf, "Voltage: %.2f V   Duty Cycle: %u%%   PWM Pulse: %lu\r\n", voltage, duty_cycle, pulse_value);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fa8c 	bl	8000568 <__aeabi_f2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4913      	ldr	r1, [pc, #76]	@ (80010a4 <main+0x14c>)
 8001056:	7809      	ldrb	r1, [r1, #0]
 8001058:	4608      	mov	r0, r1
 800105a:	491f      	ldr	r1, [pc, #124]	@ (80010d8 <main+0x180>)
 800105c:	6809      	ldr	r1, [r1, #0]
 800105e:	9101      	str	r1, [sp, #4]
 8001060:	9000      	str	r0, [sp, #0]
 8001062:	491e      	ldr	r1, [pc, #120]	@ (80010dc <main+0x184>)
 8001064:	4811      	ldr	r0, [pc, #68]	@ (80010ac <main+0x154>)
 8001066:	f005 ffa7 	bl	8006fb8 <siprintf>
 800106a:	4603      	mov	r3, r0
 800106c:	4a10      	ldr	r2, [pc, #64]	@ (80010b0 <main+0x158>)
 800106e:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <main+0x158>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b29a      	uxth	r2, r3
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	490c      	ldr	r1, [pc, #48]	@ (80010ac <main+0x154>)
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <main+0x15c>)
 800107e:	f004 fd26 	bl	8005ace <HAL_UART_Transmit>

        HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001082:	2104      	movs	r1, #4
 8001084:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <main+0x188>)
 8001086:	f003 ff89 	bl	8004f9c <HAL_TIM_PWM_Stop>
        MX_TIM4_Init(duty_cycle);
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <main+0x14c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f9a4 	bl	80013dc <MX_TIM4_Init>
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001094:	2104      	movs	r1, #4
 8001096:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <main+0x188>)
 8001098:	f003 fe7a 	bl	8004d90 <HAL_TIM_PWM_Start>

        HAL_Delay(100);
 800109c:	2064      	movs	r0, #100	@ 0x64
 800109e:	f000 fcf9 	bl	8001a94 <HAL_Delay>
    {
 80010a2:	e77b      	b.n	8000f9c <main+0x44>
 80010a4:	20000004 	.word	0x20000004
 80010a8:	08009228 	.word	0x08009228
 80010ac:	20000334 	.word	0x20000334
 80010b0:	20000398 	.word	0x20000398
 80010b4:	200001f8 	.word	0x200001f8
 80010b8:	200002cc 	.word	0x200002cc
 80010bc:	2000039c 	.word	0x2000039c
 80010c0:	08009244 	.word	0x08009244
 80010c4:	057619f1 	.word	0x057619f1
 80010c8:	20000000 	.word	0x20000000
 80010cc:	04c4b400 	.word	0x04c4b400
 80010d0:	200003a0 	.word	0x200003a0
 80010d4:	51eb851f 	.word	0x51eb851f
 80010d8:	200003a4 	.word	0x200003a4
 80010dc:	08009258 	.word	0x08009258
 80010e0:	20000280 	.word	0x20000280
 80010e4:	00000000 	.word	0x00000000

080010e8 <calculate_voltage>:
    }
}

float calculate_voltage(uint32_t adc_value)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    return ((float)adc_value / 4096) * 3.3;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001138 <calculate_voltage+0x50>
 80010fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001102:	ee16 0a90 	vmov	r0, s13
 8001106:	f7ff fa2f 	bl	8000568 <__aeabi_f2d>
 800110a:	a309      	add	r3, pc, #36	@ (adr r3, 8001130 <calculate_voltage+0x48>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa82 	bl	8000618 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd54 	bl	8000bc8 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	ee07 3a90 	vmov	s15, r3
}
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	66666666 	.word	0x66666666
 8001134:	400a6666 	.word	0x400a6666
 8001138:	45800000 	.word	0x45800000

0800113c <MX_ADC1_Init>:

void MX_ADC1_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]

    hadc1.Instance = ADC1;
 800115e:	4b34      	ldr	r3, [pc, #208]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001160:	4a34      	ldr	r2, [pc, #208]	@ (8001234 <MX_ADC1_Init+0xf8>)
 8001162:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001164:	4b32      	ldr	r3, [pc, #200]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116a:	4b31      	ldr	r3, [pc, #196]	@ (8001230 <MX_ADC1_Init+0xf4>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001170:	4b2f      	ldr	r3, [pc, #188]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001176:	4b2e      	ldr	r3, [pc, #184]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <MX_ADC1_Init+0xf4>)
 800117e:	2204      	movs	r2, #4
 8001180:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001182:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001184:	2200      	movs	r2, #0
 8001186:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <MX_ADC1_Init+0xf4>)
 800118a:	2200      	movs	r2, #0
 800118c:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 800118e:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001190:	2201      	movs	r2, #1
 8001192:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119c:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <MX_ADC1_Init+0xf4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011be:	481c      	ldr	r0, [pc, #112]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011c0:	f000 fea8 	bl	8001f14 <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0x92>
        Error_Handler();
 80011ca:	f000 f963 	bl	8001494 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 80011ce:	217f      	movs	r1, #127	@ 0x7f
 80011d0:	4817      	ldr	r0, [pc, #92]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011d2:	f001 fed7 	bl	8002f84 <HAL_ADCEx_Calibration_Start>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0xa4>
        Error_Handler();
 80011dc:	f000 f95a 	bl	8001494 <Error_Handler>
    }

    multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4811      	ldr	r0, [pc, #68]	@ (8001230 <MX_ADC1_Init+0xf4>)
 80011ec:	f001 ff2a 	bl	8003044 <HAL_ADCEx_MultiModeConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xbe>
        Error_Handler();
 80011f6:	f000 f94d 	bl	8001494 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_1; // Ensure this matches your pin configuration
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_ADC1_Init+0xfc>)
 80011fc:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fe:	2306      	movs	r3, #6
 8001200:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001202:	2302      	movs	r3, #2
 8001204:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001206:	237f      	movs	r3, #127	@ 0x7f
 8001208:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120a:	2304      	movs	r3, #4
 800120c:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <MX_ADC1_Init+0xf4>)
 8001218:	f001 f970 	bl	80024fc <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xea>
        Error_Handler();
 8001222:	f000 f937 	bl	8001494 <Error_Handler>
    }
}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002cc 	.word	0x200002cc
 8001234:	50040000 	.word	0x50040000
 8001238:	04300002 	.word	0x04300002

0800123c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b098      	sub	sp, #96	@ 0x60
 8001240:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2244      	movs	r2, #68	@ 0x44
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f005 ff17 	bl	800707e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <SystemClock_Config+0xc8>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	4a27      	ldr	r2, [pc, #156]	@ (8001304 <SystemClock_Config+0xc8>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6593      	str	r3, [r2, #88]	@ 0x58
 800126c:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <SystemClock_Config+0xc8>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <SystemClock_Config+0xcc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <SystemClock_Config+0xcc>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <SystemClock_Config+0xcc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129e:	2340      	movs	r3, #64	@ 0x40
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a6:	2302      	movs	r3, #2
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLM = 1;
 80012aa:	2301      	movs	r3, #1
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLN = 10;
 80012ae:	230a      	movs	r3, #10
 80012b0:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fa04 	bl	80036d0 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x96>
    {
        Error_Handler();
 80012ce:	f000 f8e1 	bl	8001494 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2303      	movs	r3, #3
 80012d8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2104      	movs	r1, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fe09 	bl	8003f04 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xc0>
    {
        Error_Handler();
 80012f8:	f000 f8cc 	bl	8001494 <Error_Handler>
    }
}
 80012fc:	bf00      	nop
 80012fe:	3760      	adds	r7, #96	@ 0x60
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40007000 	.word	0x40007000

0800130c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <MX_GPIO_Init+0x70>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a19      	ldr	r2, [pc, #100]	@ (800137c <MX_GPIO_Init+0x70>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_GPIO_Init+0x70>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_GPIO_Init+0x70>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a13      	ldr	r2, [pc, #76]	@ (800137c <MX_GPIO_Init+0x70>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_GPIO_Init+0x70>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

    // LED pin configuration
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // Alternate Function Push-Pull
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4; // TIM4 alternate function
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4619      	mov	r1, r3
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_GPIO_Init+0x74>)
 800136e:	f001 ffff 	bl	8003370 <HAL_GPIO_Init>
}
 8001372:	bf00      	nop
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400

08001384 <MX_LPUART1_UART_Init>:

static void MX_LPUART1_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
    hlpuart1.Instance = LPUART1;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_LPUART1_UART_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_LPUART1_UART_Init+0x50>)
 80013c2:	f004 fb36 	bl	8005a32 <HAL_UART_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 80013cc:	f000 f862 	bl	8001494 <Error_Handler>
    }
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200001f8 	.word	0x200001f8
 80013d8:	40008000 	.word	0x40008000

080013dc <MX_TIM4_Init>:

static void MX_TIM4_Init(uint32_t duty_cycle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

    htim4.Instance = TIM4;
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_TIM4_Init+0xa4>)
 80013fa:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <MX_TIM4_Init+0xa8>)
 80013fc:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = TIM_PRESCALAR;
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <MX_TIM4_Init+0xa4>)
 8001400:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001404:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM4_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = (80000000 / (pwm_frequency * (TIM_PRESCALAR + 1))) - 1;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM4_Init+0xac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <MX_TIM4_Init+0xb0>)
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <MX_TIM4_Init+0xa4>)
 8001422:	60d3      	str	r3, [r2, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_TIM4_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_TIM4_Init+0xa4>)
 800142c:	2280      	movs	r2, #128	@ 0x80
 800142e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001430:	4813      	ldr	r0, [pc, #76]	@ (8001480 <MX_TIM4_Init+0xa4>)
 8001432:	f003 fc55 	bl	8004ce0 <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0x64>
    {
        Error_Handler();
 800143c:	f000 f82a 	bl	8001494 <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	@ 0x60
 8001442:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = (htim4.Init.Period * duty_cycle) / 100;
 8001444:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_TIM4_Init+0xa4>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <MX_TIM4_Init+0xb4>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	095b      	lsrs	r3, r3, #5
 8001456:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2204      	movs	r2, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_TIM4_Init+0xa4>)
 800146a:	f003 fe2d 	bl	80050c8 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM4_Init+0x9c>
    {
        Error_Handler();
 8001474:	f000 f80e 	bl	8001494 <Error_Handler>
    }
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	@ 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000280 	.word	0x20000280
 8001484:	40000800 	.word	0x40000800
 8001488:	20000000 	.word	0x20000000
 800148c:	04c4b400 	.word	0x04c4b400
 8001490:	51eb851f 	.word	0x51eb851f

08001494 <Error_Handler>:

void Error_Handler(void) {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
    __disable_irq();
    while (1) {
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <HAL_MspInit>:
  * Initializes the Global MSP.
  */


void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_MspInit+0x44>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <HAL_MspInit+0x44>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_MspInit+0x44>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_MspInit+0x44>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <HAL_MspInit+0x44>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_MspInit+0x44>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0ac      	sub	sp, #176	@ 0xb0
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	228c      	movs	r2, #140	@ 0x8c
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fdb8 	bl	800707e <memset>
  if(hadc->Instance==ADC1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a27      	ldr	r2, [pc, #156]	@ (80015b0 <HAL_ADC_MspInit+0xc8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d146      	bne.n	80015a6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001518:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800151c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800151e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001526:	2302      	movs	r3, #2
 8001528:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800152e:	2308      	movs	r3, #8
 8001530:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001532:	2302      	movs	r3, #2
 8001534:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800153e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f002 feff 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001554:	f7ff ff9e 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_ADC_MspInit+0xcc>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <HAL_ADC_MspInit+0xcc>)
 800155e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <HAL_ADC_MspInit+0xcc>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_ADC_MspInit+0xcc>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_ADC_MspInit+0xcc>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157c:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_ADC_MspInit+0xcc>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001588:	2301      	movs	r3, #1
 800158a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158e:	2303      	movs	r3, #3
 8001590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <HAL_ADC_MspInit+0xd0>)
 80015a2:	f001 fee5 	bl	8003370 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015a6:	bf00      	nop
 80015a8:	37b0      	adds	r7, #176	@ 0xb0
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	50040000 	.word	0x50040000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000800 	.word	0x48000800

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ac      	sub	sp, #176	@ 0xb0
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	228c      	movs	r2, #140	@ 0x8c
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 fd4e 	bl	800707e <memset>
  if(huart->Instance==LPUART1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a22      	ldr	r2, [pc, #136]	@ (8001670 <HAL_UART_MspInit+0xb4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d13d      	bne.n	8001668 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015ec:	2320      	movs	r3, #32
 80015ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 fea7 	bl	800434c <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001604:	f7ff ff46 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001608:	4b1a      	ldr	r3, [pc, #104]	@ (8001674 <HAL_UART_MspInit+0xb8>)
 800160a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160c:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0xb8>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <HAL_UART_MspInit+0xb8>)
 8001616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <HAL_UART_MspInit+0xb8>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <HAL_UART_MspInit+0xb8>)
 8001626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800162a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_UART_MspInit+0xb8>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001638:	f002 f83a 	bl	80036b0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800163c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001656:	2308      	movs	r3, #8
 8001658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <HAL_UART_MspInit+0xbc>)
 8001664:	f001 fe84 	bl	8003370 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	37b0      	adds	r7, #176	@ 0xb0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40008000 	.word	0x40008000
 8001674:	40021000 	.word	0x40021000
 8001678:	48001800 	.word	0x48001800

0800167c <HAL_TIM_PWM_MspInit>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  HAL_TIM_Base_MspInit(htim);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f807 	bl	8001698 <HAL_TIM_Base_MspInit>
  HAL_TIM_MspPostInit(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f824 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_TIM_Base_MspInit+0x38>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10b      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b6:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40000800 	.word	0x40000800
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_TIM_MspPostInit+0x64>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11b      	bne.n	8001732 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_TIM_MspPostInit+0x68>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_TIM_MspPostInit+0x68>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_TIM_MspPostInit+0x68>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001722:	2302      	movs	r3, #2
 8001724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_TIM_MspPostInit+0x6c>)
 800172e:	f001 fe1f 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40000800 	.word	0x40000800
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <UsageFault_Handler+0x4>

08001770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 f959 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_kill>:

int _kill(int pid, int sig)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c0:	f005 fcb0 	bl	8007124 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2216      	movs	r2, #22
 80017c8:	601a      	str	r2, [r3, #0]
  return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_exit>:

void _exit (int status)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffe7 	bl	80017b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
  }

  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
  }
  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001886:	605a      	str	r2, [r3, #4]
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f005 fc14 	bl	8007124 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20050000 	.word	0x20050000
 8001928:	00000400 	.word	0x00000400
 800192c:	200003a8 	.word	0x200003a8
 8001930:	20000500 	.word	0x20000500

08001934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001990 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800195c:	f7ff ffea 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <LoopForever+0x6>)
  ldr r1, =_edata
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <LoopForever+0xe>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001978:	4c0a      	ldr	r4, [pc, #40]	@ (80019a4 <LoopForever+0x16>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001986:	f005 fbd3 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198a:	f7ff fae5 	bl	8000f58 <main>

0800198e <LoopForever>:

LoopForever:
    b LoopForever
 800198e:	e7fe      	b.n	800198e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001990:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800199c:	08009658 	.word	0x08009658
  ldr r2, =_sbss
 80019a0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019a4:	200004fc 	.word	0x200004fc

080019a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_2_IRQHandler>

080019aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f001 fca7 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f80e 	bl	80019dc <HAL_InitTick>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	e001      	b.n	80019d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019cc:	f7ff fd68 	bl	80014a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_InitTick+0x6c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d023      	beq.n	8001a38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f0:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_InitTick+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fca5 	bl	8003356 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d809      	bhi.n	8001a2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f001 fc7d 	bl	800331e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_InitTick+0x74>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e004      	b.n	8001a3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e001      	b.n	8001a3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	2000000c 	.word	0x2000000c

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000010 	.word	0x20000010
 8001a78:	200003ac 	.word	0x200003ac

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200003ac 	.word	0x200003ac

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000010 	.word	0x20000010

08001adc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	609a      	str	r2, [r3, #8]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3360      	adds	r3, #96	@ 0x60
 8001b56:	461a      	mov	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <LL_ADC_SetOffset+0x44>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	03fff000 	.word	0x03fff000

08001b8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3360      	adds	r3, #96	@ 0x60
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3360      	adds	r3, #96	@ 0x60
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	615a      	str	r2, [r3, #20]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3330      	adds	r3, #48	@ 0x30
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	211f      	movs	r1, #31
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 011f 	and.w	r1, r3, #31
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	0e5b      	lsrs	r3, r3, #25
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0d1b      	lsrs	r3, r3, #20
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2107      	movs	r1, #7
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0d1b      	lsrs	r3, r3, #20
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0318 	and.w	r3, r3, #24
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d0c:	40d9      	lsrs	r1, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	400b      	ands	r3, r1
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	0007ffff 	.word	0x0007ffff

08001d30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6093      	str	r3, [r2, #8]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001dc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001df0:	d101      	bne.n	8001df6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e40:	f043 0202 	orr.w	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <LL_ADC_IsEnabled+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_ADC_IsEnabled+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d101      	bne.n	8001e92 <LL_ADC_IsDisableOngoing+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_ADC_IsDisableOngoing+0x1a>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb4:	f043 0204 	orr.w	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d101      	bne.n	8001ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e133      	b.n	8002196 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fad3 	bl	80014e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff19 	bl	8001d8c <LL_ADC_IsDeepPowerDownEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff feff 	bl	8001d68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff34 	bl	8001ddc <LL_ADC_IsInternalRegulatorEnabled>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d115      	bne.n	8001fa6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff18 	bl	8001db4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f84:	4b86      	ldr	r3, [pc, #536]	@ (80021a0 <HAL_ADC_Init+0x28c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	4a86      	ldr	r2, [pc, #536]	@ (80021a4 <HAL_ADC_Init+0x290>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f98:	e002      	b.n	8001fa0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff16 	bl	8001ddc <LL_ADC_IsInternalRegulatorEnabled>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff76 	bl	8001ec8 <LL_ADC_REG_IsConversionOngoing>
 8001fdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 80cc 	bne.w	8002184 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80c8 	bne.w	8002184 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ffc:	f043 0202 	orr.w	r2, r3, #2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff23 	bl	8001e54 <LL_ADC_IsEnabled>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d115      	bne.n	8002040 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002014:	4864      	ldr	r0, [pc, #400]	@ (80021a8 <HAL_ADC_Init+0x294>)
 8002016:	f7ff ff1d 	bl	8001e54 <LL_ADC_IsEnabled>
 800201a:	4604      	mov	r4, r0
 800201c:	4863      	ldr	r0, [pc, #396]	@ (80021ac <HAL_ADC_Init+0x298>)
 800201e:	f7ff ff19 	bl	8001e54 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	431c      	orrs	r4, r3
 8002026:	4862      	ldr	r0, [pc, #392]	@ (80021b0 <HAL_ADC_Init+0x29c>)
 8002028:	f7ff ff14 	bl	8001e54 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	4323      	orrs	r3, r4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	485e      	ldr	r0, [pc, #376]	@ (80021b4 <HAL_ADC_Init+0x2a0>)
 800203c:	f7ff fd4e 	bl	8001adc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e5b      	ldrb	r3, [r3, #25]
 8002044:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002050:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002056:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d106      	bne.n	800207c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	045b      	lsls	r3, r3, #17
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	4b46      	ldr	r3, [pc, #280]	@ (80021b8 <HAL_ADC_Init+0x2a4>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff1c 	bl	8001eee <LL_ADC_INJ_IsConversionOngoing>
 80020b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d140      	bne.n	8002140 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d13d      	bne.n	8002140 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ce:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020e6:	f023 0306 	bic.w	r3, r3, #6
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d118      	bne.n	8002130 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002120:	430a      	orrs	r2, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e007      	b.n	8002140 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10c      	bne.n	8002162 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f023 010f 	bic.w	r1, r3, #15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002160:	e007      	b.n	8002172 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 020f 	bic.w	r2, r2, #15
 8002170:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	@ 0x58
 8002182:	e007      	b.n	8002194 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002194:	7ffb      	ldrb	r3, [r7, #31]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008
 80021a4:	053e2d63 	.word	0x053e2d63
 80021a8:	50040000 	.word	0x50040000
 80021ac:	50040100 	.word	0x50040100
 80021b0:	50040200 	.word	0x50040200
 80021b4:	50040300 	.word	0x50040300
 80021b8:	fff0c007 	.word	0xfff0c007

080021bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c4:	4857      	ldr	r0, [pc, #348]	@ (8002324 <HAL_ADC_Start+0x168>)
 80021c6:	f7ff fdb3 	bl	8001d30 <LL_ADC_GetMultimode>
 80021ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fe79 	bl	8001ec8 <LL_ADC_REG_IsConversionOngoing>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 809c 	bne.w	8002316 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_Start+0x30>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e097      	b.n	800231c <HAL_ADC_Start+0x160>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fd8d 	bl	8002d14 <ADC_Enable>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 8083 	bne.w	800230c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a42      	ldr	r2, [pc, #264]	@ (8002328 <HAL_ADC_Start+0x16c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d002      	beq.n	800222a <HAL_ADC_Start+0x6e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	e000      	b.n	800222c <HAL_ADC_Start+0x70>
 800222a:	4b40      	ldr	r3, [pc, #256]	@ (800232c <HAL_ADC_Start+0x170>)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4293      	cmp	r3, r2
 8002232:	d002      	beq.n	800223a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002252:	d106      	bne.n	8002262 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	f023 0206 	bic.w	r2, r3, #6
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002260:	e002      	b.n	8002268 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	221c      	movs	r2, #28
 800226e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2a      	ldr	r2, [pc, #168]	@ (8002328 <HAL_ADC_Start+0x16c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d002      	beq.n	8002288 <HAL_ADC_Start+0xcc>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e000      	b.n	800228a <HAL_ADC_Start+0xce>
 8002288:	4b28      	ldr	r3, [pc, #160]	@ (800232c <HAL_ADC_Start+0x170>)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4293      	cmp	r3, r2
 8002290:	d008      	beq.n	80022a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d002      	beq.n	80022a4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d114      	bne.n	80022ce <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fdea 	bl	8001ea0 <LL_ADC_REG_StartConversion>
 80022cc:	e025      	b.n	800231a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <HAL_ADC_Start+0x16c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d002      	beq.n	80022ea <HAL_ADC_Start+0x12e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	e000      	b.n	80022ec <HAL_ADC_Start+0x130>
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_ADC_Start+0x170>)
 80022ec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00f      	beq.n	800231a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002302:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	659a      	str	r2, [r3, #88]	@ 0x58
 800230a:	e006      	b.n	800231a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002314:	e001      	b.n	800231a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	50040300 	.word	0x50040300
 8002328:	50040100 	.word	0x50040100
 800232c:	50040000 	.word	0x50040000

08002330 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800233a:	4866      	ldr	r0, [pc, #408]	@ (80024d4 <HAL_ADC_PollForConversion+0x1a4>)
 800233c:	f7ff fcf8 	bl	8001d30 <LL_ADC_GetMultimode>
 8002340:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b08      	cmp	r3, #8
 8002348:	d102      	bne.n	8002350 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800234a:	2308      	movs	r3, #8
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e02a      	b.n	80023a6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d002      	beq.n	8002362 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b09      	cmp	r3, #9
 8002360:	d111      	bne.n	8002386 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0a4      	b.n	80024ca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002380:	2304      	movs	r3, #4
 8002382:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002384:	e00f      	b.n	80023a6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002386:	4853      	ldr	r0, [pc, #332]	@ (80024d4 <HAL_ADC_PollForConversion+0x1a4>)
 8002388:	f7ff fce0 	bl	8001d4c <LL_ADC_GetMultiDMATransfer>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e093      	b.n	80024ca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023a2:	2304      	movs	r3, #4
 80023a4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023a6:	f7ff fb69 	bl	8001a7c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023ac:	e021      	b.n	80023f2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d01d      	beq.n	80023f2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80023b6:	f7ff fb61 	bl	8001a7c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d302      	bcc.n	80023cc <HAL_ADC_PollForConversion+0x9c>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d112      	bne.n	80023f2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10b      	bne.n	80023f2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	f043 0204 	orr.w	r2, r3, #4
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e06b      	b.n	80024ca <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0d6      	beq.n	80023ae <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002404:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fbff 	bl	8001c14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01c      	beq.n	8002456 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e5b      	ldrb	r3, [r3, #25]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d118      	bne.n	8002456 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b08      	cmp	r3, #8
 8002430:	d111      	bne.n	8002456 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1f      	ldr	r2, [pc, #124]	@ (80024d8 <HAL_ADC_PollForConversion+0x1a8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d002      	beq.n	8002466 <HAL_ADC_PollForConversion+0x136>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	e000      	b.n	8002468 <HAL_ADC_PollForConversion+0x138>
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <HAL_ADC_PollForConversion+0x1ac>)
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	4293      	cmp	r3, r2
 800246e:	d008      	beq.n	8002482 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d002      	beq.n	8002482 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b09      	cmp	r3, #9
 8002480:	d104      	bne.n	800248c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	e00c      	b.n	80024a6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a11      	ldr	r2, [pc, #68]	@ (80024d8 <HAL_ADC_PollForConversion+0x1a8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d002      	beq.n	800249c <HAL_ADC_PollForConversion+0x16c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	e000      	b.n	800249e <HAL_ADC_PollForConversion+0x16e>
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_ADC_PollForConversion+0x1ac>)
 800249e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d104      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2208      	movs	r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e008      	b.n	80024c8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	220c      	movs	r2, #12
 80024c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	50040300 	.word	0x50040300
 80024d8:	50040100 	.word	0x50040100
 80024dc:	50040000 	.word	0x50040000

080024e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x22>
 800251a:	2302      	movs	r3, #2
 800251c:	e3e3      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x7ea>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fccc 	bl	8001ec8 <LL_ADC_REG_IsConversionOngoing>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 83c4 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d824      	bhi.n	8002592 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	3b02      	subs	r3, #2
 800254e:	2b03      	cmp	r3, #3
 8002550:	d81b      	bhi.n	800258a <HAL_ADC_ConfigChannel+0x8e>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <HAL_ADC_ConfigChannel+0x5c>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	08002569 	.word	0x08002569
 800255c:	08002571 	.word	0x08002571
 8002560:	08002579 	.word	0x08002579
 8002564:	08002581 	.word	0x08002581
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002568:	230c      	movs	r3, #12
 800256a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800256e:	e010      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002570:	2312      	movs	r3, #18
 8002572:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002576:	e00c      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002578:	2318      	movs	r3, #24
 800257a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800257e:	e008      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002588:	e003      	b.n	8002592 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800258a:	2306      	movs	r3, #6
 800258c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002590:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025a0:	f7ff fb4b 	bl	8001c3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fc8d 	bl	8001ec8 <LL_ADC_REG_IsConversionOngoing>
 80025ae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fc99 	bl	8001eee <LL_ADC_INJ_IsConversionOngoing>
 80025bc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 81bf 	bne.w	8002948 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 81ba 	bne.w	8002948 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025dc:	d10f      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7ff fb52 	bl	8001c92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff faf9 	bl	8001bee <LL_ADC_SetSamplingTimeCommonConfig>
 80025fc:	e00e      	b.n	800261c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	461a      	mov	r2, r3
 800260c:	f7ff fb41 	bl	8001c92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fae9 	bl	8001bee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	08db      	lsrs	r3, r3, #3
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00a      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800264e:	f7ff fa79 	bl	8001b44 <LL_ADC_SetOffset>
 8002652:	e179      	b.n	8002948 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fa96 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x184>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fa8b 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 021f 	and.w	r2, r3, #31
 800267e:	e01e      	b.n	80026be <HAL_ADC_ConfigChannel+0x1c2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fa80 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800269e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e004      	b.n	80026bc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80026b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x1da>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	e018      	b.n	8002708 <HAL_ADC_ConfigChannel+0x20c>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80026fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fa4f 	bl	8001bb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa33 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x24a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fa28 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	e01e      	b.n	8002784 <HAL_ADC_ConfigChannel+0x288>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fa1d 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002764:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002768:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800276c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e004      	b.n	8002782 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002778:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0x2a0>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	e018      	b.n	80027ce <HAL_ADC_ConfigChannel+0x2d2>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80027b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80027b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e004      	b.n	80027ce <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80027c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2101      	movs	r1, #1
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f9ec 	bl	8001bb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f9d0 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_ADC_ConfigChannel+0x310>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f9c5 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	e01e      	b.n	800284a <HAL_ADC_ConfigChannel+0x34e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2102      	movs	r1, #2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f9ba 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800282a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800282e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e004      	b.n	8002848 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800283e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x366>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	e014      	b.n	800288c <HAL_ADC_ConfigChannel+0x390>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002872:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002876:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800287e:	2320      	movs	r3, #32
 8002880:	e004      	b.n	800288c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002882:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800288c:	429a      	cmp	r2, r3
 800288e:	d106      	bne.n	800289e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	2102      	movs	r1, #2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f98d 	bl	8001bb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2103      	movs	r1, #3
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff f971 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x3ce>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2103      	movs	r1, #3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f966 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	e017      	b.n	80028fa <HAL_ADC_ConfigChannel+0x3fe>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2103      	movs	r1, #3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f95b 	bl	8001b8c <LL_ADC_GetOffsetChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028e4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80028f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x416>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	e011      	b.n	8002936 <HAL_ADC_ConfigChannel+0x43a>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002922:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800292e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002936:	429a      	cmp	r2, r3
 8002938:	d106      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	2103      	movs	r1, #3
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f938 	bl	8001bb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fa81 	bl	8001e54 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 813f 	bne.w	8002bd8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6819      	ldr	r1, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	461a      	mov	r2, r3
 8002968:	f7ff f9be 	bl	8001ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a8e      	ldr	r2, [pc, #568]	@ (8002bac <HAL_ADC_ConfigChannel+0x6b0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	f040 8130 	bne.w	8002bd8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x4a4>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	3301      	adds	r3, #1
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2b09      	cmp	r3, #9
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e019      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x4d8>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80029ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80029b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80029bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	bf94      	ite	ls
 80029ce:	2301      	movls	r3, #1
 80029d0:	2300      	movhi	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d079      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x4f8>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	3301      	adds	r3, #1
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029f2:	e015      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x524>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	e003      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	069b      	lsls	r3, r3, #26
 8002a1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x544>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	e017      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x574>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e003      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	ea42 0103 	orr.w	r1, r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x59a>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	3301      	adds	r3, #1
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	e018      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x5cc>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e003      	b.n	8002aba <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	e080      	b.n	8002bce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x5ec>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	069b      	lsls	r3, r3, #26
 8002ae2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ae6:	e015      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x618>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002b00:	2320      	movs	r3, #32
 8002b02:	e003      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	069b      	lsls	r3, r3, #26
 8002b10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x638>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	e017      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x668>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	61bb      	str	r3, [r7, #24]
  return result;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	ea42 0103 	orr.w	r1, r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x694>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	3b1e      	subs	r3, #30
 8002b88:	051b      	lsls	r3, r3, #20
 8002b8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	e01d      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x6d0>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
  return result;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e005      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x6bc>
 8002bac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 021f 	and.w	r2, r3, #31
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b1e      	subs	r3, #30
 8002bc6:	051b      	lsls	r3, r3, #20
 8002bc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f7ff f85d 	bl	8001c92 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d07a      	beq.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be4:	4843      	ldr	r0, [pc, #268]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002be6:	f7fe ff9f 	bl	8001b28 <LL_ADC_GetCommonPathInternalCh>
 8002bea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a41      	ldr	r2, [pc, #260]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x7fc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d12c      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d126      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3c      	ldr	r2, [pc, #240]	@ (8002cfc <HAL_ADC_ConfigChannel+0x800>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x71c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3b      	ldr	r2, [pc, #236]	@ (8002d00 <HAL_ADC_ConfigChannel+0x804>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d15d      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c20:	4619      	mov	r1, r3
 8002c22:	4834      	ldr	r0, [pc, #208]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002c24:	f7fe ff6d 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <HAL_ADC_ConfigChannel+0x808>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	4a36      	ldr	r2, [pc, #216]	@ (8002d08 <HAL_ADC_ConfigChannel+0x80c>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c42:	e002      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f9      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c50:	e040      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <HAL_ADC_ConfigChannel+0x810>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d118      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d112      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a23      	ldr	r2, [pc, #140]	@ (8002cfc <HAL_ADC_ConfigChannel+0x800>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_ConfigChannel+0x780>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a22      	ldr	r2, [pc, #136]	@ (8002d00 <HAL_ADC_ConfigChannel+0x804>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d12d      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	4619      	mov	r1, r3
 8002c86:	481b      	ldr	r0, [pc, #108]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002c88:	f7fe ff3b 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c8c:	e024      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1f      	ldr	r2, [pc, #124]	@ (8002d10 <HAL_ADC_ConfigChannel+0x814>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d120      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11a      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_ADC_ConfigChannel+0x800>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d115      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480e      	ldr	r0, [pc, #56]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x7f8>)
 8002cba:	f7fe ff22 	bl	8001b02 <LL_ADC_SetCommonPathInternalCh>
 8002cbe:	e00c      	b.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002cd2:	e002      	b.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ce2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	37d8      	adds	r7, #216	@ 0xd8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	80080000 	.word	0x80080000
 8002cf4:	50040300 	.word	0x50040300
 8002cf8:	c7520000 	.word	0xc7520000
 8002cfc:	50040000 	.word	0x50040000
 8002d00:	50040200 	.word	0x50040200
 8002d04:	20000008 	.word	0x20000008
 8002d08:	053e2d63 	.word	0x053e2d63
 8002d0c:	cb840000 	.word	0xcb840000
 8002d10:	80000001 	.word	0x80000001

08002d14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f895 	bl	8001e54 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d169      	bne.n	8002e04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <ADC_Enable+0xfc>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e055      	b.n	8002e06 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f850 	bl	8001e04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d64:	482b      	ldr	r0, [pc, #172]	@ (8002e14 <ADC_Enable+0x100>)
 8002d66:	f7fe fedf 	bl	8001b28 <LL_ADC_GetCommonPathInternalCh>
 8002d6a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d74:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <ADC_Enable+0x104>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	4a28      	ldr	r2, [pc, #160]	@ (8002e1c <ADC_Enable+0x108>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d8e:	e002      	b.n	8002d96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f9      	bne.n	8002d90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fe6e 	bl	8001a7c <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002da2:	e028      	b.n	8002df6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff f853 	bl	8001e54 <LL_ADC_IsEnabled>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f823 	bl	8001e04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dbe:	f7fe fe5d 	bl	8001a7c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d914      	bls.n	8002df6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d00d      	beq.n	8002df6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e007      	b.n	8002e06 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d1cf      	bne.n	8002da4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	8000003f 	.word	0x8000003f
 8002e14:	50040300 	.word	0x50040300
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	053e2d63 	.word	0x053e2d63

08002e20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f824 	bl	8001e7a <LL_ADC_IsDisableOngoing>
 8002e32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f80b 	bl	8001e54 <LL_ADC_IsEnabled>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d047      	beq.n	8002ed4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d144      	bne.n	8002ed4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030d 	and.w	r3, r3, #13
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10c      	bne.n	8002e72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe ffe5 	bl	8001e2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2203      	movs	r2, #3
 8002e68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e6a:	f7fe fe07 	bl	8001a7c <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e70:	e029      	b.n	8002ec6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e023      	b.n	8002ed6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e8e:	f7fe fdf5 	bl	8001a7c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d914      	bls.n	8002ec6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e007      	b.n	8002ed6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1dc      	bne.n	8002e8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <LL_ADC_IsEnabled>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_IsEnabled+0x18>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_IsEnabled+0x1a>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_StartCalibration>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002f16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	609a      	str	r2, [r3, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f4a:	d101      	bne.n	8002f50 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d101      	bne.n	8002f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e04d      	b.n	800303c <HAL_ADCEx_Calibration_Start+0xb8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff39 	bl	8002e20 <ADC_Disable>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d136      	bne.n	8003026 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fc0:	f023 0302 	bic.w	r3, r3, #2
 8002fc4:	f043 0202 	orr.w	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff96 	bl	8002f04 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fd8:	e014      	b.n	8003004 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002fe6:	d30d      	bcc.n	8003004 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f023 0312 	bic.w	r3, r3, #18
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e01b      	b.n	800303c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff94 	bl	8002f36 <LL_ADC_IsCalibrationOnGoing>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e2      	bne.n	8002fda <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	f023 0303 	bic.w	r3, r3, #3
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58
 8003024:	e005      	b.n	8003032 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b0a1      	sub	sp, #132	@ 0x84
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e093      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800306a:	2300      	movs	r3, #0
 800306c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800306e:	2300      	movs	r3, #0
 8003070:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a47      	ldr	r2, [pc, #284]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800307c:	4b46      	ldr	r3, [pc, #280]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e001      	b.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e072      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff59 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 80030ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff53 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d154      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d151      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030c4:	4b35      	ldr	r3, [pc, #212]	@ (800319c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030c6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02c      	beq.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030e2:	035b      	lsls	r3, r3, #13
 80030e4:	430b      	orrs	r3, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	4829      	ldr	r0, [pc, #164]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030ee:	f7ff fef6 	bl	8002ede <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4828      	ldr	r0, [pc, #160]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030f6:	f7ff fef2 	bl	8002ede <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	431c      	orrs	r4, r3
 80030fe:	4828      	ldr	r0, [pc, #160]	@ (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003100:	f7ff feed 	bl	8002ede <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	4323      	orrs	r3, r4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d137      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800310c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003114:	f023 030f 	bic.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	6811      	ldr	r1, [r2, #0]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	6892      	ldr	r2, [r2, #8]
 8003120:	430a      	orrs	r2, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003126:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003128:	e028      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800312a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003134:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003136:	4817      	ldr	r0, [pc, #92]	@ (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003138:	f7ff fed1 	bl	8002ede <LL_ADC_IsEnabled>
 800313c:	4604      	mov	r4, r0
 800313e:	4816      	ldr	r0, [pc, #88]	@ (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003140:	f7ff fecd 	bl	8002ede <LL_ADC_IsEnabled>
 8003144:	4603      	mov	r3, r0
 8003146:	431c      	orrs	r4, r3
 8003148:	4815      	ldr	r0, [pc, #84]	@ (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800314a:	f7ff fec8 	bl	8002ede <LL_ADC_IsEnabled>
 800314e:	4603      	mov	r3, r0
 8003150:	4323      	orrs	r3, r4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d112      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800315e:	f023 030f 	bic.w	r3, r3, #15
 8003162:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003164:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003166:	e009      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800317a:	e000      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800317c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003186:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800318a:	4618      	mov	r0, r3
 800318c:	3784      	adds	r7, #132	@ 0x84
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	50040000 	.word	0x50040000
 8003198:	50040100 	.word	0x50040100
 800319c:	50040300 	.word	0x50040300
 80031a0:	50040200 	.word	0x50040200

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	@ (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	@ (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	@ (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	@ 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff47 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff5c 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb0 	bl	80032c4 <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800337e:	e166      	b.n	800364e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8158 	beq.w	8003648 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d005      	beq.n	80033b0 <HAL_GPIO_Init+0x40>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d130      	bne.n	8003412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033e6:	2201      	movs	r2, #1
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0201 	and.w	r2, r3, #1
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d017      	beq.n	800344e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d123      	bne.n	80034a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	6939      	ldr	r1, [r7, #16]
 800349e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0203 	and.w	r2, r3, #3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80b2 	beq.w	8003648 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e4:	4b61      	ldr	r3, [pc, #388]	@ (800366c <HAL_GPIO_Init+0x2fc>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	4a60      	ldr	r2, [pc, #384]	@ (800366c <HAL_GPIO_Init+0x2fc>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80034f0:	4b5e      	ldr	r3, [pc, #376]	@ (800366c <HAL_GPIO_Init+0x2fc>)
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003670 <HAL_GPIO_Init+0x300>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003526:	d02b      	beq.n	8003580 <HAL_GPIO_Init+0x210>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a52      	ldr	r2, [pc, #328]	@ (8003674 <HAL_GPIO_Init+0x304>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d025      	beq.n	800357c <HAL_GPIO_Init+0x20c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a51      	ldr	r2, [pc, #324]	@ (8003678 <HAL_GPIO_Init+0x308>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01f      	beq.n	8003578 <HAL_GPIO_Init+0x208>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a50      	ldr	r2, [pc, #320]	@ (800367c <HAL_GPIO_Init+0x30c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d019      	beq.n	8003574 <HAL_GPIO_Init+0x204>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a4f      	ldr	r2, [pc, #316]	@ (8003680 <HAL_GPIO_Init+0x310>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_GPIO_Init+0x200>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a4e      	ldr	r2, [pc, #312]	@ (8003684 <HAL_GPIO_Init+0x314>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00d      	beq.n	800356c <HAL_GPIO_Init+0x1fc>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a4d      	ldr	r2, [pc, #308]	@ (8003688 <HAL_GPIO_Init+0x318>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <HAL_GPIO_Init+0x1f8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a4c      	ldr	r2, [pc, #304]	@ (800368c <HAL_GPIO_Init+0x31c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_GPIO_Init+0x1f4>
 8003560:	2307      	movs	r3, #7
 8003562:	e00e      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003564:	2308      	movs	r3, #8
 8003566:	e00c      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003568:	2306      	movs	r3, #6
 800356a:	e00a      	b.n	8003582 <HAL_GPIO_Init+0x212>
 800356c:	2305      	movs	r3, #5
 800356e:	e008      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003570:	2304      	movs	r3, #4
 8003572:	e006      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003574:	2303      	movs	r3, #3
 8003576:	e004      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003578:	2302      	movs	r3, #2
 800357a:	e002      	b.n	8003582 <HAL_GPIO_Init+0x212>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_GPIO_Init+0x212>
 8003580:	2300      	movs	r3, #0
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	f002 0203 	and.w	r2, r2, #3
 8003588:	0092      	lsls	r2, r2, #2
 800358a:	4093      	lsls	r3, r2
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003592:	4937      	ldr	r1, [pc, #220]	@ (8003670 <HAL_GPIO_Init+0x300>)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003690 <HAL_GPIO_Init+0x320>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035c4:	4a32      	ldr	r2, [pc, #200]	@ (8003690 <HAL_GPIO_Init+0x320>)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ca:	4b31      	ldr	r3, [pc, #196]	@ (8003690 <HAL_GPIO_Init+0x320>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ee:	4a28      	ldr	r2, [pc, #160]	@ (8003690 <HAL_GPIO_Init+0x320>)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035f4:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <HAL_GPIO_Init+0x320>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003618:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <HAL_GPIO_Init+0x320>)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800361e:	4b1c      	ldr	r3, [pc, #112]	@ (8003690 <HAL_GPIO_Init+0x320>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43db      	mvns	r3, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <HAL_GPIO_Init+0x320>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3301      	adds	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f ae91 	bne.w	8003380 <HAL_GPIO_Init+0x10>
  }
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40021000 	.word	0x40021000
 8003670:	40010000 	.word	0x40010000
 8003674:	48000400 	.word	0x48000400
 8003678:	48000800 	.word	0x48000800
 800367c:	48000c00 	.word	0x48000c00
 8003680:	48001000 	.word	0x48001000
 8003684:	48001400 	.word	0x48001400
 8003688:	48001800 	.word	0x48001800
 800368c:	48001c00 	.word	0x48001c00
 8003690:	40010400 	.word	0x40010400

08003694 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <HAL_PWREx_GetVoltageRange+0x18>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40007000 	.word	0x40007000

080036b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80036ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036be:	6053      	str	r3, [r2, #4]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40007000 	.word	0x40007000

080036d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f000 bc08 	b.w	8003ef4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e4:	4b96      	ldr	r3, [pc, #600]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ee:	4b94      	ldr	r3, [pc, #592]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80e4 	beq.w	80038ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_RCC_OscConfig+0x4c>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	f040 808b 	bne.w	800382a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b01      	cmp	r3, #1
 8003718:	f040 8087 	bne.w	800382a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371c:	4b88      	ldr	r3, [pc, #544]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_OscConfig+0x64>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e3df      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4b81      	ldr	r3, [pc, #516]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_RCC_OscConfig+0x7e>
 8003744:	4b7e      	ldr	r3, [pc, #504]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800374c:	e005      	b.n	800375a <HAL_RCC_OscConfig+0x8a>
 800374e:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800375a:	4293      	cmp	r3, r2
 800375c:	d223      	bcs.n	80037a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fd92 	bl	800428c <RCC_SetFlashLatencyFromMSIRange>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e3c0      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003772:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a72      	ldr	r2, [pc, #456]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003778:	f043 0308 	orr.w	r3, r3, #8
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b70      	ldr	r3, [pc, #448]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	496d      	ldr	r1, [pc, #436]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003790:	4b6b      	ldr	r3, [pc, #428]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	4968      	ldr	r1, [pc, #416]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
 80037a4:	e025      	b.n	80037f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a6:	4b66      	ldr	r3, [pc, #408]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a65      	ldr	r2, [pc, #404]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037ac:	f043 0308 	orr.w	r3, r3, #8
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4960      	ldr	r1, [pc, #384]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	495b      	ldr	r1, [pc, #364]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fd52 	bl	800428c <RCC_SetFlashLatencyFromMSIRange>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e380      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f2:	f000 fc87 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b51      	ldr	r3, [pc, #324]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	4950      	ldr	r1, [pc, #320]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	4a4e      	ldr	r2, [pc, #312]	@ (8003948 <HAL_RCC_OscConfig+0x278>)
 8003810:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003812:	4b4e      	ldr	r3, [pc, #312]	@ (800394c <HAL_RCC_OscConfig+0x27c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f8e0 	bl	80019dc <HAL_InitTick>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d052      	beq.n	80038cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	e364      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d032      	beq.n	8003898 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003832:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800383e:	f7fe f91d 	bl	8001a7c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003846:	f7fe f919 	bl	8001a7c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e34d      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003858:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003864:	4b36      	ldr	r3, [pc, #216]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a35      	ldr	r2, [pc, #212]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b33      	ldr	r3, [pc, #204]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4930      	ldr	r1, [pc, #192]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003882:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	492b      	ldr	r1, [pc, #172]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
 8003896:	e01a      	b.n	80038ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003898:	4b29      	ldr	r3, [pc, #164]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a28      	ldr	r2, [pc, #160]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a4:	f7fe f8ea 	bl	8001a7c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ac:	f7fe f8e6 	bl	8001a7c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e31a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038be:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x1dc>
 80038ca:	e000      	b.n	80038ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d073      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d005      	beq.n	80038ec <HAL_RCC_OscConfig+0x21c>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d10e      	bne.n	8003904 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d10b      	bne.n	8003904 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d063      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d15f      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e2f7      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x24c>
 800390e:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e025      	b.n	8003968 <HAL_RCC_OscConfig+0x298>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003924:	d114      	bne.n	8003950 <HAL_RCC_OscConfig+0x280>
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e013      	b.n	8003968 <HAL_RCC_OscConfig+0x298>
 8003940:	40021000 	.word	0x40021000
 8003944:	08009290 	.word	0x08009290
 8003948:	20000008 	.word	0x20000008
 800394c:	2000000c 	.word	0x2000000c
 8003950:	4ba0      	ldr	r3, [pc, #640]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a9f      	ldr	r2, [pc, #636]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b9d      	ldr	r3, [pc, #628]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a9c      	ldr	r2, [pc, #624]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe f884 	bl	8001a7c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe f880 	bl	8001a7c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e2b4      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398a:	4b92      	ldr	r3, [pc, #584]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x2a8>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fe f870 	bl	8001a7c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fe f86c 	bl	8001a7c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e2a0      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2d0>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d060      	beq.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_OscConfig+0x310>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d119      	bne.n	8003a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d116      	bne.n	8003a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e0:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x328>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e27d      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b76      	ldr	r3, [pc, #472]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	4973      	ldr	r1, [pc, #460]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	e040      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d023      	beq.n	8003a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a16:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fe f82b 	bl	8001a7c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fe f827 	bl	8001a7c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e25b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b62      	ldr	r3, [pc, #392]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	495f      	ldr	r1, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	e018      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f807 	bl	8001a7c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe f803 	bl	8001a7c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e237      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a84:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d03c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd ffe2 	bl	8001a7c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd ffde 	bl	8001a7c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e212      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ef      	beq.n	8003abc <HAL_RCC_OscConfig+0x3ec>
 8003adc:	e01b      	b.n	8003b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ade:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd ffc5 	bl	8001a7c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd ffc1 	bl	8001a7c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1f5      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b08:	4b32      	ldr	r3, [pc, #200]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ef      	bne.n	8003af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a6 	beq.w	8003c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	4a26      	ldr	r2, [pc, #152]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d118      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b68:	f7fd ff88 	bl	8001a7c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b70:	f7fd ff84 	bl	8001a7c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1b8      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4d8>
 8003b96:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ba6:	e029      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d115      	bne.n	8003bdc <HAL_RCC_OscConfig+0x50c>
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	4a03      	ldr	r2, [pc, #12]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	4a9c      	ldr	r2, [pc, #624]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bec:	4b99      	ldr	r3, [pc, #612]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a98      	ldr	r2, [pc, #608]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd ff3a 	bl	8001a7c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fd ff36 	bl	8001a7c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e168      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c22:	4b8c      	ldr	r3, [pc, #560]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ed      	beq.n	8003c0c <HAL_RCC_OscConfig+0x53c>
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd ff23 	bl	8001a7c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd ff1f 	bl	8001a7c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e151      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c50:	4b80      	ldr	r3, [pc, #512]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ed      	bne.n	8003c3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b7b      	ldr	r3, [pc, #492]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	4a7a      	ldr	r2, [pc, #488]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03c      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c84:	4b73      	ldr	r3, [pc, #460]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8a:	4a72      	ldr	r2, [pc, #456]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fef2 	bl	8001a7c <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c9c:	f7fd feee 	bl	8001a7c <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e122      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cae:	4b69      	ldr	r3, [pc, #420]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ef      	beq.n	8003c9c <HAL_RCC_OscConfig+0x5cc>
 8003cbc:	e01b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cbe:	4b65      	ldr	r3, [pc, #404]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cc4:	4a63      	ldr	r2, [pc, #396]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fd fed5 	bl	8001a7c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cd6:	f7fd fed1 	bl	8001a7c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e105      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80f9 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	f040 80cf 	bne.w	8003ea8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d0a:	4b52      	ldr	r3, [pc, #328]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d12c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d123      	bne.n	8003d78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d11b      	bne.n	8003d78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d113      	bne.n	8003d78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d109      	bne.n	8003d78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d071      	beq.n	8003e5c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d068      	beq.n	8003e50 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d7e:	4b35      	ldr	r3, [pc, #212]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d8a:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0ac      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003da0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003da6:	f7fd fe69 	bl	8001a7c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fd fe65 	bl	8001a7c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e099      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dcc:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	4b21      	ldr	r3, [pc, #132]	@ (8003e58 <HAL_RCC_OscConfig+0x788>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ddc:	3a01      	subs	r2, #1
 8003dde:	0112      	lsls	r2, r2, #4
 8003de0:	4311      	orrs	r1, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003de6:	0212      	lsls	r2, r2, #8
 8003de8:	4311      	orrs	r1, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dee:	0852      	lsrs	r2, r2, #1
 8003df0:	3a01      	subs	r2, #1
 8003df2:	0552      	lsls	r2, r2, #21
 8003df4:	4311      	orrs	r1, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dfa:	0852      	lsrs	r2, r2, #1
 8003dfc:	3a01      	subs	r2, #1
 8003dfe:	0652      	lsls	r2, r2, #25
 8003e00:	4311      	orrs	r1, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e06:	06d2      	lsls	r2, r2, #27
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	4912      	ldr	r1, [pc, #72]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e10:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0f      	ldr	r2, [pc, #60]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a0c      	ldr	r2, [pc, #48]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e28:	f7fd fe28 	bl	8001a7c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fe24 	bl	8001a7c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e058      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	4b04      	ldr	r3, [pc, #16]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e4e:	e050      	b.n	8003ef2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5c:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d144      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e68:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e74:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e80:	f7fd fdfc 	bl	8001a7c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fdf8 	bl	8001a7c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e02c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9a:	4b18      	ldr	r3, [pc, #96]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x7b8>
 8003ea6:	e024      	b.n	8003ef2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d01f      	beq.n	8003eee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b13      	ldr	r3, [pc, #76]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a12      	ldr	r2, [pc, #72]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fd fddf 	bl	8001a7c <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fddb 	bl	8001a7c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e00f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed4:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ee0:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	4905      	ldr	r1, [pc, #20]	@ (8003efc <HAL_RCC_OscConfig+0x82c>)
 8003ee6:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <HAL_RCC_OscConfig+0x830>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
 8003eec:	e001      	b.n	8003ef2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	feeefffc 	.word	0xfeeefffc

08003f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0e7      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f18:	4b75      	ldr	r3, [pc, #468]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d910      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b72      	ldr	r3, [pc, #456]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 0207 	bic.w	r2, r3, #7
 8003f2e:	4970      	ldr	r1, [pc, #448]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b6e      	ldr	r3, [pc, #440]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0cf      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	4b66      	ldr	r3, [pc, #408]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d908      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b63      	ldr	r3, [pc, #396]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4960      	ldr	r1, [pc, #384]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d04c      	beq.n	800401c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d107      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d121      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0a6      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa2:	4b54      	ldr	r3, [pc, #336]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e09a      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fba:	4b4e      	ldr	r3, [pc, #312]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e08e      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fca:	4b4a      	ldr	r3, [pc, #296]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e086      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b46      	ldr	r3, [pc, #280]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4943      	ldr	r1, [pc, #268]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fec:	f7fd fd46 	bl	8001a7c <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fd fd42 	bl	8001a7c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e06e      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b3a      	ldr	r3, [pc, #232]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b31      	ldr	r3, [pc, #196]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004034:	429a      	cmp	r2, r3
 8004036:	d208      	bcs.n	800404a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b2e      	ldr	r3, [pc, #184]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	492b      	ldr	r1, [pc, #172]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800404a:	4b29      	ldr	r3, [pc, #164]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d210      	bcs.n	800407a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004058:	4b25      	ldr	r3, [pc, #148]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 0207 	bic.w	r2, r3, #7
 8004060:	4923      	ldr	r1, [pc, #140]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004068:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <HAL_RCC_ClockConfig+0x1ec>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d001      	beq.n	800407a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e036      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004086:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4918      	ldr	r1, [pc, #96]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d009      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4910      	ldr	r1, [pc, #64]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b8:	f000 f824 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	490b      	ldr	r1, [pc, #44]	@ (80040f8 <HAL_RCC_ClockConfig+0x1f4>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	4a09      	ldr	r2, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1f8>)
 80040d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040d8:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <HAL_RCC_ClockConfig+0x1fc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fc7d 	bl	80019dc <HAL_InitTick>
 80040e2:	4603      	mov	r3, r0
 80040e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80040e6:	7afb      	ldrb	r3, [r7, #11]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40021000 	.word	0x40021000
 80040f8:	08009290 	.word	0x08009290
 80040fc:	20000008 	.word	0x20000008
 8004100:	2000000c 	.word	0x2000000c

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	@ 0x24
 8004108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004112:	4b3e      	ldr	r3, [pc, #248]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800411c:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x34>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d121      	bne.n	8004176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d11e      	bne.n	8004176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004138:	4b34      	ldr	r3, [pc, #208]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004144:	4b31      	ldr	r3, [pc, #196]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e005      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004154:	4b2d      	ldr	r3, [pc, #180]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004160:	4a2b      	ldr	r2, [pc, #172]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004174:	e00a      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d102      	bne.n	8004182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800417c:	4b25      	ldr	r3, [pc, #148]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x110>)
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	e004      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d101      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004188:	4b23      	ldr	r3, [pc, #140]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x114>)
 800418a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d134      	bne.n	80041fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0xa6>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d003      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0xac>
 80041a8:	e005      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ac:	617b      	str	r3, [r7, #20]
      break;
 80041ae:	e005      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041b0:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x114>)
 80041b2:	617b      	str	r3, [r7, #20]
      break;
 80041b4:	e002      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	617b      	str	r3, [r7, #20]
      break;
 80041ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	3301      	adds	r3, #1
 80041c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	fb03 f202 	mul.w	r2, r3, r2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <HAL_RCC_GetSysClockFreq+0x108>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	0e5b      	lsrs	r3, r3, #25
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	3301      	adds	r3, #1
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041fc:	69bb      	ldr	r3, [r7, #24]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3724      	adds	r7, #36	@ 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	080092a8 	.word	0x080092a8
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200

0800421c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000008 	.word	0x20000008

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004238:	f7ff fff0 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	080092a0 	.word	0x080092a0

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004264:	f7ff ffda 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0adb      	lsrs	r3, r3, #11
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4904      	ldr	r1, [pc, #16]	@ (8004288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	080092a0 	.word	0x080092a0

0800428c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042a4:	f7ff f9f6 	bl	8003694 <HAL_PWREx_GetVoltageRange>
 80042a8:	6178      	str	r0, [r7, #20]
 80042aa:	e014      	b.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	4a24      	ldr	r2, [pc, #144]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b8:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042c4:	f7ff f9e6 	bl	8003694 <HAL_PWREx_GetVoltageRange>
 80042c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042dc:	d10b      	bne.n	80042f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b80      	cmp	r3, #128	@ 0x80
 80042e2:	d919      	bls.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80042e8:	d902      	bls.n	80042f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ea:	2302      	movs	r3, #2
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e013      	b.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042f0:	2301      	movs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	e010      	b.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b80      	cmp	r3, #128	@ 0x80
 80042fa:	d902      	bls.n	8004302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042fc:	2303      	movs	r3, #3
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	e00a      	b.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b80      	cmp	r3, #128	@ 0x80
 8004306:	d102      	bne.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004308:	2302      	movs	r3, #2
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	e004      	b.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b70      	cmp	r3, #112	@ 0x70
 8004312:	d101      	bne.n	8004318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004314:	2301      	movs	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f023 0207 	bic.w	r2, r3, #7
 8004320:	4909      	ldr	r1, [pc, #36]	@ (8004348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	429a      	cmp	r2, r3
 8004334:	d001      	beq.n	800433a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000
 8004348:	40022000 	.word	0x40022000

0800434c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004354:	2300      	movs	r3, #0
 8004356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004358:	2300      	movs	r3, #0
 800435a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004364:	2b00      	cmp	r3, #0
 8004366:	d041      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800436c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004370:	d02a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004372:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004376:	d824      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800437c:	d008      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800437e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004382:	d81e      	bhi.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800438c:	d010      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800438e:	e018      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004390:	4b86      	ldr	r3, [pc, #536]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a85      	ldr	r2, [pc, #532]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800439c:	e015      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 facd 	bl	8004944 <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ae:	e00c      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3320      	adds	r3, #32
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fbb6 	bl	8004b28 <RCCEx_PLLSAI2_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043c0:	e003      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	74fb      	strb	r3, [r7, #19]
      break;
 80043c6:	e000      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ca:	7cfb      	ldrb	r3, [r7, #19]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d0:	4b76      	ldr	r3, [pc, #472]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043de:	4973      	ldr	r1, [pc, #460]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043e6:	e001      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d041      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004400:	d02a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004402:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004406:	d824      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800440e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004412:	d81e      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800441c:	d010      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800441e:	e018      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004420:	4b62      	ldr	r3, [pc, #392]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a61      	ldr	r2, [pc, #388]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800442c:	e015      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fa85 	bl	8004944 <RCCEx_PLLSAI1_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800443e:	e00c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3320      	adds	r3, #32
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fb6e 	bl	8004b28 <RCCEx_PLLSAI2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	74fb      	strb	r3, [r7, #19]
      break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004460:	4b52      	ldr	r3, [pc, #328]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446e:	494f      	ldr	r1, [pc, #316]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a0 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800448e:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b41      	ldr	r3, [pc, #260]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	4a40      	ldr	r2, [pc, #256]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b0:	4b3e      	ldr	r3, [pc, #248]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c0:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3a      	ldr	r2, [pc, #232]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044cc:	f7fd fad6 	bl	8001a7c <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d2:	e009      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fd fad2 	bl	8001a7c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d902      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	74fb      	strb	r3, [r7, #19]
        break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e8:	4b31      	ldr	r3, [pc, #196]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d15c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044fa:	4b2c      	ldr	r3, [pc, #176]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	429a      	cmp	r2, r3
 8004516:	d019      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004518:	4b24      	ldr	r3, [pc, #144]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004524:	4b21      	ldr	r3, [pc, #132]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	4a20      	ldr	r2, [pc, #128]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	4a1c      	ldr	r2, [pc, #112]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004544:	4a19      	ldr	r2, [pc, #100]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fa91 	bl	8001a7c <HAL_GetTick>
 800455a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455c:	e00b      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd fa8d 	bl	8001a7c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d902      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	74fb      	strb	r3, [r7, #19]
            break;
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004576:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ec      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458a:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	4904      	ldr	r1, [pc, #16]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045a2:	e009      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
 80045a8:	e006      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b8:	7c7b      	ldrb	r3, [r7, #17]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4ba6      	ldr	r3, [pc, #664]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c2:	4aa5      	ldr	r2, [pc, #660]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d6:	4ba0      	ldr	r3, [pc, #640]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045dc:	f023 0203 	bic.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	499c      	ldr	r1, [pc, #624]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f8:	4b97      	ldr	r3, [pc, #604]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f023 020c 	bic.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	4994      	ldr	r1, [pc, #592]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800461a:	4b8f      	ldr	r3, [pc, #572]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	498b      	ldr	r1, [pc, #556]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800463c:	4b86      	ldr	r3, [pc, #536]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004642:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464a:	4983      	ldr	r1, [pc, #524]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800465e:	4b7e      	ldr	r3, [pc, #504]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466c:	497a      	ldr	r1, [pc, #488]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004680:	4b75      	ldr	r3, [pc, #468]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468e:	4972      	ldr	r1, [pc, #456]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b0:	4969      	ldr	r1, [pc, #420]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046c4:	4b64      	ldr	r3, [pc, #400]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046d2:	4961      	ldr	r1, [pc, #388]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	4958      	ldr	r1, [pc, #352]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	4950      	ldr	r1, [pc, #320]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800472a:	4b4b      	ldr	r3, [pc, #300]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	4947      	ldr	r1, [pc, #284]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800474c:	4b42      	ldr	r3, [pc, #264]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800474e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	493f      	ldr	r1, [pc, #252]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d028      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476e:	4b3a      	ldr	r3, [pc, #232]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4936      	ldr	r1, [pc, #216]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800478c:	d106      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478e:	4b32      	ldr	r3, [pc, #200]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4a31      	ldr	r2, [pc, #196]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004798:	60d3      	str	r3, [r2, #12]
 800479a:	e011      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f8c9 	bl	8004944 <RCCEx_PLLSAI1_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d028      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047cc:	4b22      	ldr	r3, [pc, #136]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047da:	491f      	ldr	r1, [pc, #124]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ea:	d106      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047f6:	60d3      	str	r3, [r2, #12]
 80047f8:	e011      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004802:	d10c      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f89a 	bl	8004944 <RCCEx_PLLSAI1_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800481a:	7cfb      	ldrb	r3, [r7, #19]
 800481c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d02a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800482a:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004838:	4907      	ldr	r1, [pc, #28]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004848:	d108      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484a:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4a02      	ldr	r2, [pc, #8]	@ (8004858 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004850:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004854:	60d3      	str	r3, [r2, #12]
 8004856:	e013      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004858:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f869 	bl	8004944 <RCCEx_PLLSAI1_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d02f      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800488c:	4b2c      	ldr	r3, [pc, #176]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800489a:	4929      	ldr	r1, [pc, #164]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048aa:	d10d      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	2102      	movs	r1, #2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f846 	bl	8004944 <RCCEx_PLLSAI1_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d014      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	74bb      	strb	r3, [r7, #18]
 80048c6:	e011      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3320      	adds	r3, #32
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f925 	bl	8004b28 <RCCEx_PLLSAI2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048f8:	4b11      	ldr	r3, [pc, #68]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004908:	490d      	ldr	r1, [pc, #52]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004922:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800492c:	4904      	ldr	r1, [pc, #16]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004934:	7cbb      	ldrb	r3, [r7, #18]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000

08004944 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004952:	4b74      	ldr	r3, [pc, #464]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d018      	beq.n	8004990 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800495e:	4b71      	ldr	r3, [pc, #452]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0203 	and.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d10d      	bne.n	800498a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
       ||
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004976:	4b6b      	ldr	r3, [pc, #428]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
       ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d047      	beq.n	8004a1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e044      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d018      	beq.n	80049ca <RCCEx_PLLSAI1_Config+0x86>
 8004998:	2b03      	cmp	r3, #3
 800499a:	d825      	bhi.n	80049e8 <RCCEx_PLLSAI1_Config+0xa4>
 800499c:	2b01      	cmp	r3, #1
 800499e:	d002      	beq.n	80049a6 <RCCEx_PLLSAI1_Config+0x62>
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d009      	beq.n	80049b8 <RCCEx_PLLSAI1_Config+0x74>
 80049a4:	e020      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11d      	bne.n	80049ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b6:	e01a      	b.n	80049ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e013      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049ca:	4b56      	ldr	r3, [pc, #344]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049d6:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049e6:	e006      	b.n	80049f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      break;
 80049ec:	e004      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049fe:	4b49      	ldr	r3, [pc, #292]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	430b      	orrs	r3, r1
 8004a14:	4943      	ldr	r1, [pc, #268]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d17c      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a20:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3f      	ldr	r2, [pc, #252]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fd f826 	bl	8001a7c <HAL_GetTick>
 8004a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a32:	e009      	b.n	8004a48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a34:	f7fd f822 	bl	8001a7c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d902      	bls.n	8004a48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	73fb      	strb	r3, [r7, #15]
        break;
 8004a46:	e005      	b.n	8004a54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a48:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ef      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d15f      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d110      	bne.n	8004a82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a60:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68d2      	ldr	r2, [r2, #12]
 8004a76:	06d2      	lsls	r2, r2, #27
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	492a      	ldr	r1, [pc, #168]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	610b      	str	r3, [r1, #16]
 8004a80:	e027      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d112      	bne.n	8004aae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a88:	4b26      	ldr	r3, [pc, #152]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6892      	ldr	r2, [r2, #8]
 8004a98:	0211      	lsls	r1, r2, #8
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6912      	ldr	r2, [r2, #16]
 8004a9e:	0852      	lsrs	r2, r2, #1
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0552      	lsls	r2, r2, #21
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	491f      	ldr	r1, [pc, #124]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	610b      	str	r3, [r1, #16]
 8004aac:	e011      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aae:	4b1d      	ldr	r3, [pc, #116]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ab6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6892      	ldr	r2, [r2, #8]
 8004abe:	0211      	lsls	r1, r2, #8
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6952      	ldr	r2, [r2, #20]
 8004ac4:	0852      	lsrs	r2, r2, #1
 8004ac6:	3a01      	subs	r2, #1
 8004ac8:	0652      	lsls	r2, r2, #25
 8004aca:	430a      	orrs	r2, r1
 8004acc:	4915      	ldr	r1, [pc, #84]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ad2:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004adc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ade:	f7fc ffcd 	bl	8001a7c <HAL_GetTick>
 8004ae2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ae4:	e009      	b.n	8004afa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae6:	f7fc ffc9 	bl	8001a7c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d902      	bls.n	8004afa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	73fb      	strb	r3, [r7, #15]
          break;
 8004af8:	e005      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ef      	beq.n	8004ae6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	4903      	ldr	r1, [pc, #12]	@ (8004b24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000

08004b28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b36:	4b69      	ldr	r3, [pc, #420]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b42:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0203 	and.w	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d10d      	bne.n	8004b6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
       ||
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b5a:	4b60      	ldr	r3, [pc, #384]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
       ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d047      	beq.n	8004bfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
 8004b72:	e044      	b.n	8004bfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d018      	beq.n	8004bae <RCCEx_PLLSAI2_Config+0x86>
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d825      	bhi.n	8004bcc <RCCEx_PLLSAI2_Config+0xa4>
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d002      	beq.n	8004b8a <RCCEx_PLLSAI2_Config+0x62>
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d009      	beq.n	8004b9c <RCCEx_PLLSAI2_Config+0x74>
 8004b88:	e020      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b8a:	4b54      	ldr	r3, [pc, #336]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d11d      	bne.n	8004bd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9a:	e01a      	b.n	8004bd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d116      	bne.n	8004bd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bac:	e013      	b.n	8004bd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bae:	4b4b      	ldr	r3, [pc, #300]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bba:	4b48      	ldr	r3, [pc, #288]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bca:	e006      	b.n	8004bda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd0:	e004      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e002      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10d      	bne.n	8004bfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004be2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	4938      	ldr	r1, [pc, #224]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d166      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c04:	4b35      	ldr	r3, [pc, #212]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a34      	ldr	r2, [pc, #208]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fc ff34 	bl	8001a7c <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c16:	e009      	b.n	8004c2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c18:	f7fc ff30 	bl	8001a7c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d902      	bls.n	8004c2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	73fb      	strb	r3, [r7, #15]
        break;
 8004c2a:	e005      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ef      	bne.n	8004c18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d149      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d110      	bne.n	8004c66 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c44:	4b25      	ldr	r3, [pc, #148]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004c4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6892      	ldr	r2, [r2, #8]
 8004c54:	0211      	lsls	r1, r2, #8
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68d2      	ldr	r2, [r2, #12]
 8004c5a:	06d2      	lsls	r2, r2, #27
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	491f      	ldr	r1, [pc, #124]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	614b      	str	r3, [r1, #20]
 8004c64:	e011      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c66:	4b1d      	ldr	r3, [pc, #116]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6892      	ldr	r2, [r2, #8]
 8004c76:	0211      	lsls	r1, r2, #8
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6912      	ldr	r2, [r2, #16]
 8004c7c:	0852      	lsrs	r2, r2, #1
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	0652      	lsls	r2, r2, #25
 8004c82:	430a      	orrs	r2, r1
 8004c84:	4915      	ldr	r1, [pc, #84]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c8a:	4b14      	ldr	r3, [pc, #80]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a13      	ldr	r2, [pc, #76]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fc fef1 	bl	8001a7c <HAL_GetTick>
 8004c9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c9c:	e009      	b.n	8004cb2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c9e:	f7fc feed 	bl	8001a7c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d902      	bls.n	8004cb2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	73fb      	strb	r3, [r7, #15]
          break;
 8004cb0:	e005      	b.n	8004cbe <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ef      	beq.n	8004c9e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	4903      	ldr	r1, [pc, #12]	@ (8004cdc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000

08004ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e049      	b.n	8004d86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fcb8 	bl	800167c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 fae6 	bl	80052f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x24>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e03c      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d109      	bne.n	8004dce <HAL_TIM_PWM_Start+0x3e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e02f      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d109      	bne.n	8004de8 <HAL_TIM_PWM_Start+0x58>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e022      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d109      	bne.n	8004e02 <HAL_TIM_PWM_Start+0x72>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	e015      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d109      	bne.n	8004e1c <HAL_TIM_PWM_Start+0x8c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e008      	b.n	8004e2e <HAL_TIM_PWM_Start+0x9e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e09c      	b.n	8004f70 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Start+0xb6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e44:	e023      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Start+0xc6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e54:	e01b      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Start+0xd6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e64:	e013      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start+0xe6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e74:	e00b      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0xf6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e84:	e003      	b.n	8004e8e <HAL_TIM_PWM_Start+0xfe>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2201      	movs	r2, #1
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fda6 	bl	80059e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <HAL_TIM_PWM_Start+0x1e8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a34      	ldr	r2, [pc, #208]	@ (8004f7c <HAL_TIM_PWM_Start+0x1ec>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a32      	ldr	r2, [pc, #200]	@ (8004f80 <HAL_TIM_PWM_Start+0x1f0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a31      	ldr	r2, [pc, #196]	@ (8004f84 <HAL_TIM_PWM_Start+0x1f4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIM_PWM_Start+0x13e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8004f88 <HAL_TIM_PWM_Start+0x1f8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x142>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_PWM_Start+0x144>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <HAL_TIM_PWM_Start+0x1e8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01d      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x19e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efa:	d018      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x19e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a22      	ldr	r2, [pc, #136]	@ (8004f8c <HAL_TIM_PWM_Start+0x1fc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x19e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	@ (8004f90 <HAL_TIM_PWM_Start+0x200>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x19e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1f      	ldr	r2, [pc, #124]	@ (8004f94 <HAL_TIM_PWM_Start+0x204>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x19e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	@ (8004f7c <HAL_TIM_PWM_Start+0x1ec>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x19e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <HAL_TIM_PWM_Start+0x1f0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d115      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	4b18      	ldr	r3, [pc, #96]	@ (8004f98 <HAL_TIM_PWM_Start+0x208>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d015      	beq.n	8004f6c <HAL_TIM_PWM_Start+0x1dc>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f46:	d011      	beq.n	8004f6c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	e008      	b.n	8004f6c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40013400 	.word	0x40013400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40014400 	.word	0x40014400
 8004f88:	40014800 	.word	0x40014800
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	00010007 	.word	0x00010007

08004f9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fd1a 	bl	80059e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80050b4 <HAL_TIM_PWM_Stop+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_TIM_PWM_Stop+0x4a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80050b8 <HAL_TIM_PWM_Stop+0x11c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIM_PWM_Stop+0x4a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3b      	ldr	r2, [pc, #236]	@ (80050bc <HAL_TIM_PWM_Stop+0x120>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIM_PWM_Stop+0x4a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80050c0 <HAL_TIM_PWM_Stop+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIM_PWM_Stop+0x4a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a38      	ldr	r2, [pc, #224]	@ (80050c4 <HAL_TIM_PWM_Stop+0x128>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_PWM_Stop+0x4e>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <HAL_TIM_PWM_Stop+0x50>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d017      	beq.n	8005020 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10f      	bne.n	8005020 <HAL_TIM_PWM_Stop+0x84>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	f240 4344 	movw	r3, #1092	@ 0x444
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_TIM_PWM_Stop+0x84>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800501e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	f241 1311 	movw	r3, #4369	@ 0x1111
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10f      	bne.n	8005050 <HAL_TIM_PWM_Stop+0xb4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6a1a      	ldr	r2, [r3, #32]
 8005036:	f240 4344 	movw	r3, #1092	@ 0x444
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d107      	bne.n	8005050 <HAL_TIM_PWM_Stop+0xb4>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <HAL_TIM_PWM_Stop+0xc4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800505e:	e023      	b.n	80050a8 <HAL_TIM_PWM_Stop+0x10c>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d104      	bne.n	8005070 <HAL_TIM_PWM_Stop+0xd4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506e:	e01b      	b.n	80050a8 <HAL_TIM_PWM_Stop+0x10c>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b08      	cmp	r3, #8
 8005074:	d104      	bne.n	8005080 <HAL_TIM_PWM_Stop+0xe4>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800507e:	e013      	b.n	80050a8 <HAL_TIM_PWM_Stop+0x10c>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d104      	bne.n	8005090 <HAL_TIM_PWM_Stop+0xf4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800508e:	e00b      	b.n	80050a8 <HAL_TIM_PWM_Stop+0x10c>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b10      	cmp	r3, #16
 8005094:	d104      	bne.n	80050a0 <HAL_TIM_PWM_Stop+0x104>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509e:	e003      	b.n	80050a8 <HAL_TIM_PWM_Stop+0x10c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800

080050c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e0ff      	b.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b14      	cmp	r3, #20
 80050f2:	f200 80f0 	bhi.w	80052d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050f6:	a201      	add	r2, pc, #4	@ (adr r2, 80050fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	08005151 	.word	0x08005151
 8005100:	080052d7 	.word	0x080052d7
 8005104:	080052d7 	.word	0x080052d7
 8005108:	080052d7 	.word	0x080052d7
 800510c:	08005191 	.word	0x08005191
 8005110:	080052d7 	.word	0x080052d7
 8005114:	080052d7 	.word	0x080052d7
 8005118:	080052d7 	.word	0x080052d7
 800511c:	080051d3 	.word	0x080051d3
 8005120:	080052d7 	.word	0x080052d7
 8005124:	080052d7 	.word	0x080052d7
 8005128:	080052d7 	.word	0x080052d7
 800512c:	08005213 	.word	0x08005213
 8005130:	080052d7 	.word	0x080052d7
 8005134:	080052d7 	.word	0x080052d7
 8005138:	080052d7 	.word	0x080052d7
 800513c:	08005255 	.word	0x08005255
 8005140:	080052d7 	.word	0x080052d7
 8005144:	080052d7 	.word	0x080052d7
 8005148:	080052d7 	.word	0x080052d7
 800514c:	08005295 	.word	0x08005295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f970 	bl	800543c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6999      	ldr	r1, [r3, #24]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	619a      	str	r2, [r3, #24]
      break;
 800518e:	e0a5      	b.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f9e0 	bl	800555c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6999      	ldr	r1, [r3, #24]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	619a      	str	r2, [r3, #24]
      break;
 80051d0:	e084      	b.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fa49 	bl	8005670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0208 	orr.w	r2, r2, #8
 80051ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0204 	bic.w	r2, r2, #4
 80051fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	61da      	str	r2, [r3, #28]
      break;
 8005210:	e064      	b.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fab1 	bl	8005780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800522c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69d9      	ldr	r1, [r3, #28]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	021a      	lsls	r2, r3, #8
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
      break;
 8005252:	e043      	b.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fafa 	bl	8005854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0208 	orr.w	r2, r2, #8
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0204 	bic.w	r2, r2, #4
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005292:	e023      	b.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fb3e 	bl	800591c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052d4:	e002      	b.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
      break;
 80052da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop

080052f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a46      	ldr	r2, [pc, #280]	@ (800541c <TIM_Base_SetConfig+0x12c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530e:	d00f      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a43      	ldr	r2, [pc, #268]	@ (8005420 <TIM_Base_SetConfig+0x130>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a42      	ldr	r2, [pc, #264]	@ (8005424 <TIM_Base_SetConfig+0x134>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a41      	ldr	r2, [pc, #260]	@ (8005428 <TIM_Base_SetConfig+0x138>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a40      	ldr	r2, [pc, #256]	@ (800542c <TIM_Base_SetConfig+0x13c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a35      	ldr	r2, [pc, #212]	@ (800541c <TIM_Base_SetConfig+0x12c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01f      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005350:	d01b      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a32      	ldr	r2, [pc, #200]	@ (8005420 <TIM_Base_SetConfig+0x130>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d017      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a31      	ldr	r2, [pc, #196]	@ (8005424 <TIM_Base_SetConfig+0x134>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a30      	ldr	r2, [pc, #192]	@ (8005428 <TIM_Base_SetConfig+0x138>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2f      	ldr	r2, [pc, #188]	@ (800542c <TIM_Base_SetConfig+0x13c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2e      	ldr	r2, [pc, #184]	@ (8005430 <TIM_Base_SetConfig+0x140>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2d      	ldr	r2, [pc, #180]	@ (8005434 <TIM_Base_SetConfig+0x144>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_Base_SetConfig+0x9a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <TIM_Base_SetConfig+0x148>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a16      	ldr	r2, [pc, #88]	@ (800541c <TIM_Base_SetConfig+0x12c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00f      	beq.n	80053e8 <TIM_Base_SetConfig+0xf8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a18      	ldr	r2, [pc, #96]	@ (800542c <TIM_Base_SetConfig+0x13c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <TIM_Base_SetConfig+0xf8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a17      	ldr	r2, [pc, #92]	@ (8005430 <TIM_Base_SetConfig+0x140>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d007      	beq.n	80053e8 <TIM_Base_SetConfig+0xf8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <TIM_Base_SetConfig+0x144>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_Base_SetConfig+0xf8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <TIM_Base_SetConfig+0x148>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f023 0201 	bic.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]
  }
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800
 8005428:	40000c00 	.word	0x40000c00
 800542c:	40013400 	.word	0x40013400
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800

0800543c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f023 0201 	bic.w	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0303 	bic.w	r3, r3, #3
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f023 0302 	bic.w	r3, r3, #2
 8005488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2c      	ldr	r2, [pc, #176]	@ (8005548 <TIM_OC1_SetConfig+0x10c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_OC1_SetConfig+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2b      	ldr	r2, [pc, #172]	@ (800554c <TIM_OC1_SetConfig+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_OC1_SetConfig+0x80>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005550 <TIM_OC1_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_OC1_SetConfig+0x80>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a29      	ldr	r2, [pc, #164]	@ (8005554 <TIM_OC1_SetConfig+0x118>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC1_SetConfig+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a28      	ldr	r2, [pc, #160]	@ (8005558 <TIM_OC1_SetConfig+0x11c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d10c      	bne.n	80054d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0308 	bic.w	r3, r3, #8
 80054c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <TIM_OC1_SetConfig+0x10c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_OC1_SetConfig+0xc2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <TIM_OC1_SetConfig+0x110>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_OC1_SetConfig+0xc2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a19      	ldr	r2, [pc, #100]	@ (8005550 <TIM_OC1_SetConfig+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_OC1_SetConfig+0xc2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <TIM_OC1_SetConfig+0x118>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_OC1_SetConfig+0xc2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a17      	ldr	r2, [pc, #92]	@ (8005558 <TIM_OC1_SetConfig+0x11c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d111      	bne.n	8005522 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800550c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	621a      	str	r2, [r3, #32]
}
 800553c:	bf00      	nop
 800553e:	371c      	adds	r7, #28
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f023 0210 	bic.w	r2, r3, #16
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0320 	bic.w	r3, r3, #32
 80055aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a28      	ldr	r2, [pc, #160]	@ (800565c <TIM_OC2_SetConfig+0x100>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC2_SetConfig+0x6c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a27      	ldr	r2, [pc, #156]	@ (8005660 <TIM_OC2_SetConfig+0x104>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10d      	bne.n	80055e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1d      	ldr	r2, [pc, #116]	@ (800565c <TIM_OC2_SetConfig+0x100>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC2_SetConfig+0xb0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <TIM_OC2_SetConfig+0x104>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC2_SetConfig+0xb0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <TIM_OC2_SetConfig+0x108>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC2_SetConfig+0xb0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005668 <TIM_OC2_SetConfig+0x10c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC2_SetConfig+0xb0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a19      	ldr	r2, [pc, #100]	@ (800566c <TIM_OC2_SetConfig+0x110>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d113      	bne.n	8005634 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40013400 	.word	0x40013400
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a27      	ldr	r2, [pc, #156]	@ (800576c <TIM_OC3_SetConfig+0xfc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_OC3_SetConfig+0x6a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a26      	ldr	r2, [pc, #152]	@ (8005770 <TIM_OC3_SetConfig+0x100>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10d      	bne.n	80056f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1c      	ldr	r2, [pc, #112]	@ (800576c <TIM_OC3_SetConfig+0xfc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <TIM_OC3_SetConfig+0xae>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1b      	ldr	r2, [pc, #108]	@ (8005770 <TIM_OC3_SetConfig+0x100>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_OC3_SetConfig+0xae>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1a      	ldr	r2, [pc, #104]	@ (8005774 <TIM_OC3_SetConfig+0x104>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_OC3_SetConfig+0xae>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a19      	ldr	r2, [pc, #100]	@ (8005778 <TIM_OC3_SetConfig+0x108>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_OC3_SetConfig+0xae>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a18      	ldr	r2, [pc, #96]	@ (800577c <TIM_OC3_SetConfig+0x10c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d113      	bne.n	8005746 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40013400 	.word	0x40013400
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400
 800577c:	40014800 	.word	0x40014800

08005780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	031b      	lsls	r3, r3, #12
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <TIM_OC4_SetConfig+0xc0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC4_SetConfig+0x84>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <TIM_OC4_SetConfig+0xc4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC4_SetConfig+0x84>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <TIM_OC4_SetConfig+0xc8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC4_SetConfig+0x84>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a15      	ldr	r2, [pc, #84]	@ (800584c <TIM_OC4_SetConfig+0xcc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC4_SetConfig+0x84>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a14      	ldr	r2, [pc, #80]	@ (8005850 <TIM_OC4_SetConfig+0xd0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800580a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40013400 	.word	0x40013400
 8005848:	40014000 	.word	0x40014000
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800

08005854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a17      	ldr	r2, [pc, #92]	@ (8005908 <TIM_OC5_SetConfig+0xb4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_OC5_SetConfig+0x7a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a16      	ldr	r2, [pc, #88]	@ (800590c <TIM_OC5_SetConfig+0xb8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_OC5_SetConfig+0x7a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a15      	ldr	r2, [pc, #84]	@ (8005910 <TIM_OC5_SetConfig+0xbc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_OC5_SetConfig+0x7a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a14      	ldr	r2, [pc, #80]	@ (8005914 <TIM_OC5_SetConfig+0xc0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_OC5_SetConfig+0x7a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a13      	ldr	r2, [pc, #76]	@ (8005918 <TIM_OC5_SetConfig+0xc4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d109      	bne.n	80058e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	051b      	lsls	r3, r3, #20
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a18      	ldr	r2, [pc, #96]	@ (80059d4 <TIM_OC6_SetConfig+0xb8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_OC6_SetConfig+0x7c>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <TIM_OC6_SetConfig+0xbc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_OC6_SetConfig+0x7c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	@ (80059dc <TIM_OC6_SetConfig+0xc0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_OC6_SetConfig+0x7c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	@ (80059e0 <TIM_OC6_SetConfig+0xc4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC6_SetConfig+0x7c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a14      	ldr	r2, [pc, #80]	@ (80059e4 <TIM_OC6_SetConfig+0xc8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d109      	bne.n	80059ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	029b      	lsls	r3, r3, #10
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2201      	movs	r2, #1
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e040      	b.n	8005ac6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7fb fdb1 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2224      	movs	r2, #36	@ 0x24
 8005a5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb69 	bl	8006150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8ae 	bl	8005be0 <UART_SetConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e01b      	b.n	8005ac6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005aac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0201 	orr.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fbe8 	bl	8006294 <UART_CheckIdleState>
 8005ac4:	4603      	mov	r3, r0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08a      	sub	sp, #40	@ 0x28
 8005ad2:	af02      	add	r7, sp, #8
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d177      	bne.n	8005bd6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_UART_Transmit+0x24>
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e070      	b.n	8005bd8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	@ 0x21
 8005b02:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b04:	f7fb ffba 	bl	8001a7c <HAL_GetTick>
 8005b08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b22:	d108      	bne.n	8005b36 <HAL_UART_Transmit+0x68>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e003      	b.n	8005b3e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b3e:	e02f      	b.n	8005ba0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	2180      	movs	r1, #128	@ 0x80
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fc4a 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e03b      	b.n	8005bd8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b72:	b292      	uxth	r2, r2
 8005b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e007      	b.n	8005b8e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1c9      	bne.n	8005b40 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2140      	movs	r1, #64	@ 0x40
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fc14 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e005      	b.n	8005bd8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be4:	b08a      	sub	sp, #40	@ 0x28
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4ba4      	ldr	r3, [pc, #656]	@ (8005ea0 <UART_SetConfig+0x2c0>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a99      	ldr	r2, [pc, #612]	@ (8005ea4 <UART_SetConfig+0x2c4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a90      	ldr	r2, [pc, #576]	@ (8005ea8 <UART_SetConfig+0x2c8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d126      	bne.n	8005cb8 <UART_SetConfig+0xd8>
 8005c6a:	4b90      	ldr	r3, [pc, #576]	@ (8005eac <UART_SetConfig+0x2cc>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d81b      	bhi.n	8005cb0 <UART_SetConfig+0xd0>
 8005c78:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <UART_SetConfig+0xa0>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c96:	e116      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9e:	e112      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ca6:	e10e      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cae:	e10a      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb6:	e106      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8005eb0 <UART_SetConfig+0x2d0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d138      	bne.n	8005d34 <UART_SetConfig+0x154>
 8005cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8005eac <UART_SetConfig+0x2cc>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc8:	f003 030c 	and.w	r3, r3, #12
 8005ccc:	2b0c      	cmp	r3, #12
 8005cce:	d82d      	bhi.n	8005d2c <UART_SetConfig+0x14c>
 8005cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0xf8>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d2d 	.word	0x08005d2d
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d1d 	.word	0x08005d1d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d2d 	.word	0x08005d2d
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d12:	e0d8      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1a:	e0d4      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d22:	e0d0      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e0cc      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e0c8      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb4 <UART_SetConfig+0x2d4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d125      	bne.n	8005d8a <UART_SetConfig+0x1aa>
 8005d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005eac <UART_SetConfig+0x2cc>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d48:	2b30      	cmp	r3, #48	@ 0x30
 8005d4a:	d016      	beq.n	8005d7a <UART_SetConfig+0x19a>
 8005d4c:	2b30      	cmp	r3, #48	@ 0x30
 8005d4e:	d818      	bhi.n	8005d82 <UART_SetConfig+0x1a2>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d00a      	beq.n	8005d6a <UART_SetConfig+0x18a>
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d814      	bhi.n	8005d82 <UART_SetConfig+0x1a2>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <UART_SetConfig+0x182>
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d008      	beq.n	8005d72 <UART_SetConfig+0x192>
 8005d60:	e00f      	b.n	8005d82 <UART_SetConfig+0x1a2>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d68:	e0ad      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d70:	e0a9      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d72:	2304      	movs	r3, #4
 8005d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d78:	e0a5      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d80:	e0a1      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d82:	2310      	movs	r3, #16
 8005d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d88:	e09d      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb8 <UART_SetConfig+0x2d8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d125      	bne.n	8005de0 <UART_SetConfig+0x200>
 8005d94:	4b45      	ldr	r3, [pc, #276]	@ (8005eac <UART_SetConfig+0x2cc>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da0:	d016      	beq.n	8005dd0 <UART_SetConfig+0x1f0>
 8005da2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da4:	d818      	bhi.n	8005dd8 <UART_SetConfig+0x1f8>
 8005da6:	2b80      	cmp	r3, #128	@ 0x80
 8005da8:	d00a      	beq.n	8005dc0 <UART_SetConfig+0x1e0>
 8005daa:	2b80      	cmp	r3, #128	@ 0x80
 8005dac:	d814      	bhi.n	8005dd8 <UART_SetConfig+0x1f8>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <UART_SetConfig+0x1d8>
 8005db2:	2b40      	cmp	r3, #64	@ 0x40
 8005db4:	d008      	beq.n	8005dc8 <UART_SetConfig+0x1e8>
 8005db6:	e00f      	b.n	8005dd8 <UART_SetConfig+0x1f8>
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dbe:	e082      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dc6:	e07e      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dce:	e07a      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd6:	e076      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dde:	e072      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a35      	ldr	r2, [pc, #212]	@ (8005ebc <UART_SetConfig+0x2dc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d12a      	bne.n	8005e40 <UART_SetConfig+0x260>
 8005dea:	4b30      	ldr	r3, [pc, #192]	@ (8005eac <UART_SetConfig+0x2cc>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df8:	d01a      	beq.n	8005e30 <UART_SetConfig+0x250>
 8005dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dfe:	d81b      	bhi.n	8005e38 <UART_SetConfig+0x258>
 8005e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e04:	d00c      	beq.n	8005e20 <UART_SetConfig+0x240>
 8005e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e0a:	d815      	bhi.n	8005e38 <UART_SetConfig+0x258>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <UART_SetConfig+0x238>
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e14:	d008      	beq.n	8005e28 <UART_SetConfig+0x248>
 8005e16:	e00f      	b.n	8005e38 <UART_SetConfig+0x258>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1e:	e052      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e20:	2302      	movs	r3, #2
 8005e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e26:	e04e      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2e:	e04a      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e36:	e046      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3e:	e042      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a17      	ldr	r2, [pc, #92]	@ (8005ea4 <UART_SetConfig+0x2c4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d13a      	bne.n	8005ec0 <UART_SetConfig+0x2e0>
 8005e4a:	4b18      	ldr	r3, [pc, #96]	@ (8005eac <UART_SetConfig+0x2cc>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e58:	d01a      	beq.n	8005e90 <UART_SetConfig+0x2b0>
 8005e5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e5e:	d81b      	bhi.n	8005e98 <UART_SetConfig+0x2b8>
 8005e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e64:	d00c      	beq.n	8005e80 <UART_SetConfig+0x2a0>
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6a:	d815      	bhi.n	8005e98 <UART_SetConfig+0x2b8>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <UART_SetConfig+0x298>
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e74:	d008      	beq.n	8005e88 <UART_SetConfig+0x2a8>
 8005e76:	e00f      	b.n	8005e98 <UART_SetConfig+0x2b8>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e022      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e80:	2302      	movs	r3, #2
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e01e      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e01a      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e016      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e012      	b.n	8005ec6 <UART_SetConfig+0x2e6>
 8005ea0:	efff69f3 	.word	0xefff69f3
 8005ea4:	40008000 	.word	0x40008000
 8005ea8:	40013800 	.word	0x40013800
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40004400 	.word	0x40004400
 8005eb4:	40004800 	.word	0x40004800
 8005eb8:	40004c00 	.word	0x40004c00
 8005ebc:	40005000 	.word	0x40005000
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a9f      	ldr	r2, [pc, #636]	@ (8006148 <UART_SetConfig+0x568>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d17a      	bne.n	8005fc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d824      	bhi.n	8005f22 <UART_SetConfig+0x342>
 8005ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x300>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f23 	.word	0x08005f23
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f23 	.word	0x08005f23
 8005ef0:	08005f13 	.word	0x08005f13
 8005ef4:	08005f23 	.word	0x08005f23
 8005ef8:	08005f23 	.word	0x08005f23
 8005efc:	08005f23 	.word	0x08005f23
 8005f00:	08005f1b 	.word	0x08005f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f04:	f7fe f996 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005f08:	61f8      	str	r0, [r7, #28]
        break;
 8005f0a:	e010      	b.n	8005f2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800614c <UART_SetConfig+0x56c>)
 8005f0e:	61fb      	str	r3, [r7, #28]
        break;
 8005f10:	e00d      	b.n	8005f2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f12:	f7fe f8f7 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 8005f16:	61f8      	str	r0, [r7, #28]
        break;
 8005f18:	e009      	b.n	8005f2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f1e:	61fb      	str	r3, [r7, #28]
        break;
 8005f20:	e005      	b.n	8005f2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80fb 	beq.w	800612c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d305      	bcc.n	8005f52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d903      	bls.n	8005f5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f58:	e0e8      	b.n	800612c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	461c      	mov	r4, r3
 8005f60:	4615      	mov	r5, r2
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	022b      	lsls	r3, r5, #8
 8005f6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f70:	0222      	lsls	r2, r4, #8
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	6849      	ldr	r1, [r1, #4]
 8005f76:	0849      	lsrs	r1, r1, #1
 8005f78:	2000      	movs	r0, #0
 8005f7a:	4688      	mov	r8, r1
 8005f7c:	4681      	mov	r9, r0
 8005f7e:	eb12 0a08 	adds.w	sl, r2, r8
 8005f82:	eb43 0b09 	adc.w	fp, r3, r9
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f94:	4650      	mov	r0, sl
 8005f96:	4659      	mov	r1, fp
 8005f98:	f7fa fe66 	bl	8000c68 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005faa:	d308      	bcc.n	8005fbe <UART_SetConfig+0x3de>
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fb2:	d204      	bcs.n	8005fbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	60da      	str	r2, [r3, #12]
 8005fbc:	e0b6      	b.n	800612c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fc4:	e0b2      	b.n	800612c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fce:	d15e      	bne.n	800608e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d828      	bhi.n	800602a <UART_SetConfig+0x44a>
 8005fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <UART_SetConfig+0x400>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800602b 	.word	0x0800602b
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800602b 	.word	0x0800602b
 8005ff8:	0800602b 	.word	0x0800602b
 8005ffc:	0800602b 	.word	0x0800602b
 8006000:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fe f916 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006008:	61f8      	str	r0, [r7, #28]
        break;
 800600a:	e014      	b.n	8006036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fe f928 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8006010:	61f8      	str	r0, [r7, #28]
        break;
 8006012:	e010      	b.n	8006036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b4d      	ldr	r3, [pc, #308]	@ (800614c <UART_SetConfig+0x56c>)
 8006016:	61fb      	str	r3, [r7, #28]
        break;
 8006018:	e00d      	b.n	8006036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe f873 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 800601e:	61f8      	str	r0, [r7, #28]
        break;
 8006020:	e009      	b.n	8006036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006026:	61fb      	str	r3, [r7, #28]
        break;
 8006028:	e005      	b.n	8006036 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d077      	beq.n	800612c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	005a      	lsls	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b0f      	cmp	r3, #15
 8006056:	d916      	bls.n	8006086 <UART_SetConfig+0x4a6>
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605e:	d212      	bcs.n	8006086 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f023 030f 	bic.w	r3, r3, #15
 8006068:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	b29a      	uxth	r2, r3
 8006076:	8afb      	ldrh	r3, [r7, #22]
 8006078:	4313      	orrs	r3, r2
 800607a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	8afa      	ldrh	r2, [r7, #22]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e052      	b.n	800612c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800608c:	e04e      	b.n	800612c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800608e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006092:	2b08      	cmp	r3, #8
 8006094:	d827      	bhi.n	80060e6 <UART_SetConfig+0x506>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <UART_SetConfig+0x4bc>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	080060e7 	.word	0x080060e7
 80060ac:	080060d7 	.word	0x080060d7
 80060b0:	080060e7 	.word	0x080060e7
 80060b4:	080060e7 	.word	0x080060e7
 80060b8:	080060e7 	.word	0x080060e7
 80060bc:	080060df 	.word	0x080060df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c0:	f7fe f8b8 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80060c4:	61f8      	str	r0, [r7, #28]
        break;
 80060c6:	e014      	b.n	80060f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c8:	f7fe f8ca 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 80060cc:	61f8      	str	r0, [r7, #28]
        break;
 80060ce:	e010      	b.n	80060f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b1e      	ldr	r3, [pc, #120]	@ (800614c <UART_SetConfig+0x56c>)
 80060d2:	61fb      	str	r3, [r7, #28]
        break;
 80060d4:	e00d      	b.n	80060f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fe f815 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80060da:	61f8      	str	r0, [r7, #28]
        break;
 80060dc:	e009      	b.n	80060f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060e2:	61fb      	str	r3, [r7, #28]
        break;
 80060e4:	e005      	b.n	80060f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060f0:	bf00      	nop
    }

    if (pclk != 0U)
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d019      	beq.n	800612c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	085a      	lsrs	r2, r3, #1
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b0f      	cmp	r3, #15
 8006110:	d909      	bls.n	8006126 <UART_SetConfig+0x546>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006118:	d205      	bcs.n	8006126 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	e002      	b.n	800612c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006138:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800613c:	4618      	mov	r0, r3
 800613e:	3728      	adds	r7, #40	@ 0x28
 8006140:	46bd      	mov	sp, r7
 8006142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006146:	bf00      	nop
 8006148:	40008000 	.word	0x40008000
 800614c:	00f42400 	.word	0x00f42400

08006150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800624e:	d10a      	bne.n	8006266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b098      	sub	sp, #96	@ 0x60
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a4:	f7fb fbea 	bl	8001a7c <HAL_GetTick>
 80062a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d12e      	bne.n	8006316 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f88c 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d021      	beq.n	8006316 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e6      	bne.n	80062d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e062      	b.n	80063dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b04      	cmp	r3, #4
 8006322:	d149      	bne.n	80063b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f856 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d03c      	beq.n	80063b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	623b      	str	r3, [r7, #32]
   return(result);
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635c:	633b      	str	r3, [r7, #48]	@ 0x30
 800635e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e6      	bne.n	800633e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3308      	adds	r3, #8
 8006376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0301 	bic.w	r3, r3, #1
 8006386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3308      	adds	r3, #8
 800638e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	69b9      	ldr	r1, [r7, #24]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	617b      	str	r3, [r7, #20]
   return(result);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e5      	bne.n	8006370 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e011      	b.n	80063dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3758      	adds	r7, #88	@ 0x58
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f4:	e04f      	b.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d04b      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fb fb3d 	bl	8001a7c <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <UART_WaitOnFlagUntilTimeout+0x30>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e04e      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d037      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b80      	cmp	r3, #128	@ 0x80
 800642a:	d034      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb2>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d031      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b08      	cmp	r3, #8
 800643e:	d110      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2208      	movs	r2, #8
 8006446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f838 	bl	80064be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2208      	movs	r2, #8
 8006452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e029      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800646c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006470:	d111      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800647a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f81e 	bl	80064be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e00f      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d0a0      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064be:	b480      	push	{r7}
 80064c0:	b095      	sub	sp, #84	@ 0x54
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80064e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e6      	bne.n	80064c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	61fb      	str	r3, [r7, #28]
   return(result);
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006518:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800651a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800651e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e5      	bne.n	80064f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006530:	2b01      	cmp	r3, #1
 8006532:	d118      	bne.n	8006566 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	60bb      	str	r3, [r7, #8]
   return(result);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f023 0310 	bic.w	r3, r3, #16
 8006548:	647b      	str	r3, [r7, #68]	@ 0x44
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6979      	ldr	r1, [r7, #20]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	613b      	str	r3, [r7, #16]
   return(result);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e6      	bne.n	8006534 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800657a:	bf00      	nop
 800657c:	3754      	adds	r7, #84	@ 0x54
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <__cvt>:
 8006586:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800658a:	ec57 6b10 	vmov	r6, r7, d0
 800658e:	2f00      	cmp	r7, #0
 8006590:	460c      	mov	r4, r1
 8006592:	4619      	mov	r1, r3
 8006594:	463b      	mov	r3, r7
 8006596:	bfbb      	ittet	lt
 8006598:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800659c:	461f      	movlt	r7, r3
 800659e:	2300      	movge	r3, #0
 80065a0:	232d      	movlt	r3, #45	@ 0x2d
 80065a2:	700b      	strb	r3, [r1, #0]
 80065a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065a6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065aa:	4691      	mov	r9, r2
 80065ac:	f023 0820 	bic.w	r8, r3, #32
 80065b0:	bfbc      	itt	lt
 80065b2:	4632      	movlt	r2, r6
 80065b4:	4616      	movlt	r6, r2
 80065b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065ba:	d005      	beq.n	80065c8 <__cvt+0x42>
 80065bc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065c0:	d100      	bne.n	80065c4 <__cvt+0x3e>
 80065c2:	3401      	adds	r4, #1
 80065c4:	2102      	movs	r1, #2
 80065c6:	e000      	b.n	80065ca <__cvt+0x44>
 80065c8:	2103      	movs	r1, #3
 80065ca:	ab03      	add	r3, sp, #12
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	ab02      	add	r3, sp, #8
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	ec47 6b10 	vmov	d0, r6, r7
 80065d6:	4653      	mov	r3, sl
 80065d8:	4622      	mov	r2, r4
 80065da:	f000 fe59 	bl	8007290 <_dtoa_r>
 80065de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065e2:	4605      	mov	r5, r0
 80065e4:	d119      	bne.n	800661a <__cvt+0x94>
 80065e6:	f019 0f01 	tst.w	r9, #1
 80065ea:	d00e      	beq.n	800660a <__cvt+0x84>
 80065ec:	eb00 0904 	add.w	r9, r0, r4
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa fa76 	bl	8000ae8 <__aeabi_dcmpeq>
 80065fc:	b108      	cbz	r0, 8006602 <__cvt+0x7c>
 80065fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8006602:	2230      	movs	r2, #48	@ 0x30
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	454b      	cmp	r3, r9
 8006608:	d31e      	bcc.n	8006648 <__cvt+0xc2>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800660e:	1b5b      	subs	r3, r3, r5
 8006610:	4628      	mov	r0, r5
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	b004      	add	sp, #16
 8006616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800661e:	eb00 0904 	add.w	r9, r0, r4
 8006622:	d1e5      	bne.n	80065f0 <__cvt+0x6a>
 8006624:	7803      	ldrb	r3, [r0, #0]
 8006626:	2b30      	cmp	r3, #48	@ 0x30
 8006628:	d10a      	bne.n	8006640 <__cvt+0xba>
 800662a:	2200      	movs	r2, #0
 800662c:	2300      	movs	r3, #0
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f7fa fa59 	bl	8000ae8 <__aeabi_dcmpeq>
 8006636:	b918      	cbnz	r0, 8006640 <__cvt+0xba>
 8006638:	f1c4 0401 	rsb	r4, r4, #1
 800663c:	f8ca 4000 	str.w	r4, [sl]
 8006640:	f8da 3000 	ldr.w	r3, [sl]
 8006644:	4499      	add	r9, r3
 8006646:	e7d3      	b.n	80065f0 <__cvt+0x6a>
 8006648:	1c59      	adds	r1, r3, #1
 800664a:	9103      	str	r1, [sp, #12]
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	e7d9      	b.n	8006604 <__cvt+0x7e>

08006650 <__exponent>:
 8006650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006652:	2900      	cmp	r1, #0
 8006654:	bfba      	itte	lt
 8006656:	4249      	neglt	r1, r1
 8006658:	232d      	movlt	r3, #45	@ 0x2d
 800665a:	232b      	movge	r3, #43	@ 0x2b
 800665c:	2909      	cmp	r1, #9
 800665e:	7002      	strb	r2, [r0, #0]
 8006660:	7043      	strb	r3, [r0, #1]
 8006662:	dd29      	ble.n	80066b8 <__exponent+0x68>
 8006664:	f10d 0307 	add.w	r3, sp, #7
 8006668:	461d      	mov	r5, r3
 800666a:	270a      	movs	r7, #10
 800666c:	461a      	mov	r2, r3
 800666e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006672:	fb07 1416 	mls	r4, r7, r6, r1
 8006676:	3430      	adds	r4, #48	@ 0x30
 8006678:	f802 4c01 	strb.w	r4, [r2, #-1]
 800667c:	460c      	mov	r4, r1
 800667e:	2c63      	cmp	r4, #99	@ 0x63
 8006680:	f103 33ff 	add.w	r3, r3, #4294967295
 8006684:	4631      	mov	r1, r6
 8006686:	dcf1      	bgt.n	800666c <__exponent+0x1c>
 8006688:	3130      	adds	r1, #48	@ 0x30
 800668a:	1e94      	subs	r4, r2, #2
 800668c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006690:	1c41      	adds	r1, r0, #1
 8006692:	4623      	mov	r3, r4
 8006694:	42ab      	cmp	r3, r5
 8006696:	d30a      	bcc.n	80066ae <__exponent+0x5e>
 8006698:	f10d 0309 	add.w	r3, sp, #9
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	42ac      	cmp	r4, r5
 80066a0:	bf88      	it	hi
 80066a2:	2300      	movhi	r3, #0
 80066a4:	3302      	adds	r3, #2
 80066a6:	4403      	add	r3, r0
 80066a8:	1a18      	subs	r0, r3, r0
 80066aa:	b003      	add	sp, #12
 80066ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066b6:	e7ed      	b.n	8006694 <__exponent+0x44>
 80066b8:	2330      	movs	r3, #48	@ 0x30
 80066ba:	3130      	adds	r1, #48	@ 0x30
 80066bc:	7083      	strb	r3, [r0, #2]
 80066be:	70c1      	strb	r1, [r0, #3]
 80066c0:	1d03      	adds	r3, r0, #4
 80066c2:	e7f1      	b.n	80066a8 <__exponent+0x58>

080066c4 <_printf_float>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	b08d      	sub	sp, #52	@ 0x34
 80066ca:	460c      	mov	r4, r1
 80066cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066d0:	4616      	mov	r6, r2
 80066d2:	461f      	mov	r7, r3
 80066d4:	4605      	mov	r5, r0
 80066d6:	f000 fcdb 	bl	8007090 <_localeconv_r>
 80066da:	6803      	ldr	r3, [r0, #0]
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7f9 fdd6 	bl	8000290 <strlen>
 80066e4:	2300      	movs	r3, #0
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	f8d8 3000 	ldr.w	r3, [r8]
 80066ec:	9005      	str	r0, [sp, #20]
 80066ee:	3307      	adds	r3, #7
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	f103 0208 	add.w	r2, r3, #8
 80066f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066fc:	f8d4 b000 	ldr.w	fp, [r4]
 8006700:	f8c8 2000 	str.w	r2, [r8]
 8006704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800671a:	4b9c      	ldr	r3, [pc, #624]	@ (800698c <_printf_float+0x2c8>)
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	f7fa fa14 	bl	8000b4c <__aeabi_dcmpun>
 8006724:	bb70      	cbnz	r0, 8006784 <_printf_float+0xc0>
 8006726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672a:	4b98      	ldr	r3, [pc, #608]	@ (800698c <_printf_float+0x2c8>)
 800672c:	f04f 32ff 	mov.w	r2, #4294967295
 8006730:	f7fa f9ee 	bl	8000b10 <__aeabi_dcmple>
 8006734:	bb30      	cbnz	r0, 8006784 <_printf_float+0xc0>
 8006736:	2200      	movs	r2, #0
 8006738:	2300      	movs	r3, #0
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7fa f9dd 	bl	8000afc <__aeabi_dcmplt>
 8006742:	b110      	cbz	r0, 800674a <_printf_float+0x86>
 8006744:	232d      	movs	r3, #45	@ 0x2d
 8006746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800674a:	4a91      	ldr	r2, [pc, #580]	@ (8006990 <_printf_float+0x2cc>)
 800674c:	4b91      	ldr	r3, [pc, #580]	@ (8006994 <_printf_float+0x2d0>)
 800674e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006752:	bf94      	ite	ls
 8006754:	4690      	movls	r8, r2
 8006756:	4698      	movhi	r8, r3
 8006758:	2303      	movs	r3, #3
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	f02b 0304 	bic.w	r3, fp, #4
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	9700      	str	r7, [sp, #0]
 8006768:	4633      	mov	r3, r6
 800676a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800676c:	4621      	mov	r1, r4
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f9d2 	bl	8006b18 <_printf_common>
 8006774:	3001      	adds	r0, #1
 8006776:	f040 808d 	bne.w	8006894 <_printf_float+0x1d0>
 800677a:	f04f 30ff 	mov.w	r0, #4294967295
 800677e:	b00d      	add	sp, #52	@ 0x34
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7fa f9de 	bl	8000b4c <__aeabi_dcmpun>
 8006790:	b140      	cbz	r0, 80067a4 <_printf_float+0xe0>
 8006792:	464b      	mov	r3, r9
 8006794:	2b00      	cmp	r3, #0
 8006796:	bfbc      	itt	lt
 8006798:	232d      	movlt	r3, #45	@ 0x2d
 800679a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800679e:	4a7e      	ldr	r2, [pc, #504]	@ (8006998 <_printf_float+0x2d4>)
 80067a0:	4b7e      	ldr	r3, [pc, #504]	@ (800699c <_printf_float+0x2d8>)
 80067a2:	e7d4      	b.n	800674e <_printf_float+0x8a>
 80067a4:	6863      	ldr	r3, [r4, #4]
 80067a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067aa:	9206      	str	r2, [sp, #24]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	d13b      	bne.n	8006828 <_printf_float+0x164>
 80067b0:	2306      	movs	r3, #6
 80067b2:	6063      	str	r3, [r4, #4]
 80067b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067b8:	2300      	movs	r3, #0
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	ab0a      	add	r3, sp, #40	@ 0x28
 80067c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067c4:	ab09      	add	r3, sp, #36	@ 0x24
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	ec49 8b10 	vmov	d0, r8, r9
 80067ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067d2:	4628      	mov	r0, r5
 80067d4:	f7ff fed7 	bl	8006586 <__cvt>
 80067d8:	9b06      	ldr	r3, [sp, #24]
 80067da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067dc:	2b47      	cmp	r3, #71	@ 0x47
 80067de:	4680      	mov	r8, r0
 80067e0:	d129      	bne.n	8006836 <_printf_float+0x172>
 80067e2:	1cc8      	adds	r0, r1, #3
 80067e4:	db02      	blt.n	80067ec <_printf_float+0x128>
 80067e6:	6863      	ldr	r3, [r4, #4]
 80067e8:	4299      	cmp	r1, r3
 80067ea:	dd41      	ble.n	8006870 <_printf_float+0x1ac>
 80067ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80067f0:	fa5f fa8a 	uxtb.w	sl, sl
 80067f4:	3901      	subs	r1, #1
 80067f6:	4652      	mov	r2, sl
 80067f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80067fe:	f7ff ff27 	bl	8006650 <__exponent>
 8006802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006804:	1813      	adds	r3, r2, r0
 8006806:	2a01      	cmp	r2, #1
 8006808:	4681      	mov	r9, r0
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	dc02      	bgt.n	8006814 <_printf_float+0x150>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	07d2      	lsls	r2, r2, #31
 8006812:	d501      	bpl.n	8006818 <_printf_float+0x154>
 8006814:	3301      	adds	r3, #1
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0a2      	beq.n	8006766 <_printf_float+0xa2>
 8006820:	232d      	movs	r3, #45	@ 0x2d
 8006822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006826:	e79e      	b.n	8006766 <_printf_float+0xa2>
 8006828:	9a06      	ldr	r2, [sp, #24]
 800682a:	2a47      	cmp	r2, #71	@ 0x47
 800682c:	d1c2      	bne.n	80067b4 <_printf_float+0xf0>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1c0      	bne.n	80067b4 <_printf_float+0xf0>
 8006832:	2301      	movs	r3, #1
 8006834:	e7bd      	b.n	80067b2 <_printf_float+0xee>
 8006836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800683a:	d9db      	bls.n	80067f4 <_printf_float+0x130>
 800683c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006840:	d118      	bne.n	8006874 <_printf_float+0x1b0>
 8006842:	2900      	cmp	r1, #0
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	dd0b      	ble.n	8006860 <_printf_float+0x19c>
 8006848:	6121      	str	r1, [r4, #16]
 800684a:	b913      	cbnz	r3, 8006852 <_printf_float+0x18e>
 800684c:	6822      	ldr	r2, [r4, #0]
 800684e:	07d0      	lsls	r0, r2, #31
 8006850:	d502      	bpl.n	8006858 <_printf_float+0x194>
 8006852:	3301      	adds	r3, #1
 8006854:	440b      	add	r3, r1
 8006856:	6123      	str	r3, [r4, #16]
 8006858:	65a1      	str	r1, [r4, #88]	@ 0x58
 800685a:	f04f 0900 	mov.w	r9, #0
 800685e:	e7db      	b.n	8006818 <_printf_float+0x154>
 8006860:	b913      	cbnz	r3, 8006868 <_printf_float+0x1a4>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	07d2      	lsls	r2, r2, #31
 8006866:	d501      	bpl.n	800686c <_printf_float+0x1a8>
 8006868:	3302      	adds	r3, #2
 800686a:	e7f4      	b.n	8006856 <_printf_float+0x192>
 800686c:	2301      	movs	r3, #1
 800686e:	e7f2      	b.n	8006856 <_printf_float+0x192>
 8006870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006876:	4299      	cmp	r1, r3
 8006878:	db05      	blt.n	8006886 <_printf_float+0x1c2>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	6121      	str	r1, [r4, #16]
 800687e:	07d8      	lsls	r0, r3, #31
 8006880:	d5ea      	bpl.n	8006858 <_printf_float+0x194>
 8006882:	1c4b      	adds	r3, r1, #1
 8006884:	e7e7      	b.n	8006856 <_printf_float+0x192>
 8006886:	2900      	cmp	r1, #0
 8006888:	bfd4      	ite	le
 800688a:	f1c1 0202 	rsble	r2, r1, #2
 800688e:	2201      	movgt	r2, #1
 8006890:	4413      	add	r3, r2
 8006892:	e7e0      	b.n	8006856 <_printf_float+0x192>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	055a      	lsls	r2, r3, #21
 8006898:	d407      	bmi.n	80068aa <_printf_float+0x1e6>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	4642      	mov	r2, r8
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	d12b      	bne.n	8006900 <_printf_float+0x23c>
 80068a8:	e767      	b.n	800677a <_printf_float+0xb6>
 80068aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068ae:	f240 80dd 	bls.w	8006a6c <_printf_float+0x3a8>
 80068b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068b6:	2200      	movs	r2, #0
 80068b8:	2300      	movs	r3, #0
 80068ba:	f7fa f915 	bl	8000ae8 <__aeabi_dcmpeq>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d033      	beq.n	800692a <_printf_float+0x266>
 80068c2:	4a37      	ldr	r2, [pc, #220]	@ (80069a0 <_printf_float+0x2dc>)
 80068c4:	2301      	movs	r3, #1
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f af54 	beq.w	800677a <_printf_float+0xb6>
 80068d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068d6:	4543      	cmp	r3, r8
 80068d8:	db02      	blt.n	80068e0 <_printf_float+0x21c>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	07d8      	lsls	r0, r3, #31
 80068de:	d50f      	bpl.n	8006900 <_printf_float+0x23c>
 80068e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af45 	beq.w	800677a <_printf_float+0xb6>
 80068f0:	f04f 0900 	mov.w	r9, #0
 80068f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80068f8:	f104 0a1a 	add.w	sl, r4, #26
 80068fc:	45c8      	cmp	r8, r9
 80068fe:	dc09      	bgt.n	8006914 <_printf_float+0x250>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	079b      	lsls	r3, r3, #30
 8006904:	f100 8103 	bmi.w	8006b0e <_printf_float+0x44a>
 8006908:	68e0      	ldr	r0, [r4, #12]
 800690a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800690c:	4298      	cmp	r0, r3
 800690e:	bfb8      	it	lt
 8006910:	4618      	movlt	r0, r3
 8006912:	e734      	b.n	800677e <_printf_float+0xba>
 8006914:	2301      	movs	r3, #1
 8006916:	4652      	mov	r2, sl
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f af2b 	beq.w	800677a <_printf_float+0xb6>
 8006924:	f109 0901 	add.w	r9, r9, #1
 8006928:	e7e8      	b.n	80068fc <_printf_float+0x238>
 800692a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc39      	bgt.n	80069a4 <_printf_float+0x2e0>
 8006930:	4a1b      	ldr	r2, [pc, #108]	@ (80069a0 <_printf_float+0x2dc>)
 8006932:	2301      	movs	r3, #1
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af1d 	beq.w	800677a <_printf_float+0xb6>
 8006940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006944:	ea59 0303 	orrs.w	r3, r9, r3
 8006948:	d102      	bne.n	8006950 <_printf_float+0x28c>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	07d9      	lsls	r1, r3, #31
 800694e:	d5d7      	bpl.n	8006900 <_printf_float+0x23c>
 8006950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af0d 	beq.w	800677a <_printf_float+0xb6>
 8006960:	f04f 0a00 	mov.w	sl, #0
 8006964:	f104 0b1a 	add.w	fp, r4, #26
 8006968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696a:	425b      	negs	r3, r3
 800696c:	4553      	cmp	r3, sl
 800696e:	dc01      	bgt.n	8006974 <_printf_float+0x2b0>
 8006970:	464b      	mov	r3, r9
 8006972:	e793      	b.n	800689c <_printf_float+0x1d8>
 8006974:	2301      	movs	r3, #1
 8006976:	465a      	mov	r2, fp
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f aefb 	beq.w	800677a <_printf_float+0xb6>
 8006984:	f10a 0a01 	add.w	sl, sl, #1
 8006988:	e7ee      	b.n	8006968 <_printf_float+0x2a4>
 800698a:	bf00      	nop
 800698c:	7fefffff 	.word	0x7fefffff
 8006990:	080092d8 	.word	0x080092d8
 8006994:	080092dc 	.word	0x080092dc
 8006998:	080092e0 	.word	0x080092e0
 800699c:	080092e4 	.word	0x080092e4
 80069a0:	080092e8 	.word	0x080092e8
 80069a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069aa:	4553      	cmp	r3, sl
 80069ac:	bfa8      	it	ge
 80069ae:	4653      	movge	r3, sl
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	4699      	mov	r9, r3
 80069b4:	dc36      	bgt.n	8006a24 <_printf_float+0x360>
 80069b6:	f04f 0b00 	mov.w	fp, #0
 80069ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069be:	f104 021a 	add.w	r2, r4, #26
 80069c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069c4:	9306      	str	r3, [sp, #24]
 80069c6:	eba3 0309 	sub.w	r3, r3, r9
 80069ca:	455b      	cmp	r3, fp
 80069cc:	dc31      	bgt.n	8006a32 <_printf_float+0x36e>
 80069ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d0:	459a      	cmp	sl, r3
 80069d2:	dc3a      	bgt.n	8006a4a <_printf_float+0x386>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d437      	bmi.n	8006a4a <_printf_float+0x386>
 80069da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069dc:	ebaa 0903 	sub.w	r9, sl, r3
 80069e0:	9b06      	ldr	r3, [sp, #24]
 80069e2:	ebaa 0303 	sub.w	r3, sl, r3
 80069e6:	4599      	cmp	r9, r3
 80069e8:	bfa8      	it	ge
 80069ea:	4699      	movge	r9, r3
 80069ec:	f1b9 0f00 	cmp.w	r9, #0
 80069f0:	dc33      	bgt.n	8006a5a <_printf_float+0x396>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fa:	f104 0b1a 	add.w	fp, r4, #26
 80069fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a00:	ebaa 0303 	sub.w	r3, sl, r3
 8006a04:	eba3 0309 	sub.w	r3, r3, r9
 8006a08:	4543      	cmp	r3, r8
 8006a0a:	f77f af79 	ble.w	8006900 <_printf_float+0x23c>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	465a      	mov	r2, fp
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f aeae 	beq.w	800677a <_printf_float+0xb6>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	e7ec      	b.n	80069fe <_printf_float+0x33a>
 8006a24:	4642      	mov	r2, r8
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b8      	blx	r7
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d1c2      	bne.n	80069b6 <_printf_float+0x2f2>
 8006a30:	e6a3      	b.n	800677a <_printf_float+0xb6>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	9206      	str	r2, [sp, #24]
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f ae9c 	beq.w	800677a <_printf_float+0xb6>
 8006a42:	9a06      	ldr	r2, [sp, #24]
 8006a44:	f10b 0b01 	add.w	fp, fp, #1
 8006a48:	e7bb      	b.n	80069c2 <_printf_float+0x2fe>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	d1c0      	bne.n	80069da <_printf_float+0x316>
 8006a58:	e68f      	b.n	800677a <_printf_float+0xb6>
 8006a5a:	9a06      	ldr	r2, [sp, #24]
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	4442      	add	r2, r8
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	d1c3      	bne.n	80069f2 <_printf_float+0x32e>
 8006a6a:	e686      	b.n	800677a <_printf_float+0xb6>
 8006a6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a70:	f1ba 0f01 	cmp.w	sl, #1
 8006a74:	dc01      	bgt.n	8006a7a <_printf_float+0x3b6>
 8006a76:	07db      	lsls	r3, r3, #31
 8006a78:	d536      	bpl.n	8006ae8 <_printf_float+0x424>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	f43f ae78 	beq.w	800677a <_printf_float+0xb6>
 8006a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f ae70 	beq.w	800677a <_printf_float+0xb6>
 8006a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa6:	f7fa f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aaa:	b9c0      	cbnz	r0, 8006ade <_printf_float+0x41a>
 8006aac:	4653      	mov	r3, sl
 8006aae:	f108 0201 	add.w	r2, r8, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d10c      	bne.n	8006ad6 <_printf_float+0x412>
 8006abc:	e65d      	b.n	800677a <_printf_float+0xb6>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	465a      	mov	r2, fp
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae56 	beq.w	800677a <_printf_float+0xb6>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	45d0      	cmp	r8, sl
 8006ad4:	dbf3      	blt.n	8006abe <_printf_float+0x3fa>
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006adc:	e6df      	b.n	800689e <_printf_float+0x1da>
 8006ade:	f04f 0800 	mov.w	r8, #0
 8006ae2:	f104 0b1a 	add.w	fp, r4, #26
 8006ae6:	e7f4      	b.n	8006ad2 <_printf_float+0x40e>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4642      	mov	r2, r8
 8006aec:	e7e1      	b.n	8006ab2 <_printf_float+0x3ee>
 8006aee:	2301      	movs	r3, #1
 8006af0:	464a      	mov	r2, r9
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b8      	blx	r7
 8006af8:	3001      	adds	r0, #1
 8006afa:	f43f ae3e 	beq.w	800677a <_printf_float+0xb6>
 8006afe:	f108 0801 	add.w	r8, r8, #1
 8006b02:	68e3      	ldr	r3, [r4, #12]
 8006b04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b06:	1a5b      	subs	r3, r3, r1
 8006b08:	4543      	cmp	r3, r8
 8006b0a:	dcf0      	bgt.n	8006aee <_printf_float+0x42a>
 8006b0c:	e6fc      	b.n	8006908 <_printf_float+0x244>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	f104 0919 	add.w	r9, r4, #25
 8006b16:	e7f4      	b.n	8006b02 <_printf_float+0x43e>

08006b18 <_printf_common>:
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	4698      	mov	r8, r3
 8006b20:	688a      	ldr	r2, [r1, #8]
 8006b22:	690b      	ldr	r3, [r1, #16]
 8006b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	bfb8      	it	lt
 8006b2c:	4613      	movlt	r3, r2
 8006b2e:	6033      	str	r3, [r6, #0]
 8006b30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b34:	4607      	mov	r7, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b10a      	cbz	r2, 8006b3e <_printf_common+0x26>
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	0699      	lsls	r1, r3, #26
 8006b42:	bf42      	ittt	mi
 8006b44:	6833      	ldrmi	r3, [r6, #0]
 8006b46:	3302      	addmi	r3, #2
 8006b48:	6033      	strmi	r3, [r6, #0]
 8006b4a:	6825      	ldr	r5, [r4, #0]
 8006b4c:	f015 0506 	ands.w	r5, r5, #6
 8006b50:	d106      	bne.n	8006b60 <_printf_common+0x48>
 8006b52:	f104 0a19 	add.w	sl, r4, #25
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	6832      	ldr	r2, [r6, #0]
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	42ab      	cmp	r3, r5
 8006b5e:	dc26      	bgt.n	8006bae <_printf_common+0x96>
 8006b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b64:	6822      	ldr	r2, [r4, #0]
 8006b66:	3b00      	subs	r3, #0
 8006b68:	bf18      	it	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	0692      	lsls	r2, r2, #26
 8006b6e:	d42b      	bmi.n	8006bc8 <_printf_common+0xb0>
 8006b70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b74:	4641      	mov	r1, r8
 8006b76:	4638      	mov	r0, r7
 8006b78:	47c8      	blx	r9
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d01e      	beq.n	8006bbc <_printf_common+0xa4>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	6922      	ldr	r2, [r4, #16]
 8006b82:	f003 0306 	and.w	r3, r3, #6
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	bf02      	ittt	eq
 8006b8a:	68e5      	ldreq	r5, [r4, #12]
 8006b8c:	6833      	ldreq	r3, [r6, #0]
 8006b8e:	1aed      	subeq	r5, r5, r3
 8006b90:	68a3      	ldr	r3, [r4, #8]
 8006b92:	bf0c      	ite	eq
 8006b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b98:	2500      	movne	r5, #0
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	bfc4      	itt	gt
 8006b9e:	1a9b      	subgt	r3, r3, r2
 8006ba0:	18ed      	addgt	r5, r5, r3
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	341a      	adds	r4, #26
 8006ba6:	42b5      	cmp	r5, r6
 8006ba8:	d11a      	bne.n	8006be0 <_printf_common+0xc8>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e008      	b.n	8006bc0 <_printf_common+0xa8>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	4641      	mov	r1, r8
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	47c8      	blx	r9
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d103      	bne.n	8006bc4 <_printf_common+0xac>
 8006bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	e7c6      	b.n	8006b56 <_printf_common+0x3e>
 8006bc8:	18e1      	adds	r1, r4, r3
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	2030      	movs	r0, #48	@ 0x30
 8006bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bd2:	4422      	add	r2, r4
 8006bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bdc:	3302      	adds	r3, #2
 8006bde:	e7c7      	b.n	8006b70 <_printf_common+0x58>
 8006be0:	2301      	movs	r3, #1
 8006be2:	4622      	mov	r2, r4
 8006be4:	4641      	mov	r1, r8
 8006be6:	4638      	mov	r0, r7
 8006be8:	47c8      	blx	r9
 8006bea:	3001      	adds	r0, #1
 8006bec:	d0e6      	beq.n	8006bbc <_printf_common+0xa4>
 8006bee:	3601      	adds	r6, #1
 8006bf0:	e7d9      	b.n	8006ba6 <_printf_common+0x8e>
	...

08006bf4 <_printf_i>:
 8006bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf8:	7e0f      	ldrb	r7, [r1, #24]
 8006bfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bfc:	2f78      	cmp	r7, #120	@ 0x78
 8006bfe:	4691      	mov	r9, r2
 8006c00:	4680      	mov	r8, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	469a      	mov	sl, r3
 8006c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c0a:	d807      	bhi.n	8006c1c <_printf_i+0x28>
 8006c0c:	2f62      	cmp	r7, #98	@ 0x62
 8006c0e:	d80a      	bhi.n	8006c26 <_printf_i+0x32>
 8006c10:	2f00      	cmp	r7, #0
 8006c12:	f000 80d2 	beq.w	8006dba <_printf_i+0x1c6>
 8006c16:	2f58      	cmp	r7, #88	@ 0x58
 8006c18:	f000 80b9 	beq.w	8006d8e <_printf_i+0x19a>
 8006c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c24:	e03a      	b.n	8006c9c <_printf_i+0xa8>
 8006c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c2a:	2b15      	cmp	r3, #21
 8006c2c:	d8f6      	bhi.n	8006c1c <_printf_i+0x28>
 8006c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c34 <_printf_i+0x40>)
 8006c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c34:	08006c8d 	.word	0x08006c8d
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006c1d 	.word	0x08006c1d
 8006c40:	08006c1d 	.word	0x08006c1d
 8006c44:	08006c1d 	.word	0x08006c1d
 8006c48:	08006c1d 	.word	0x08006c1d
 8006c4c:	08006ca1 	.word	0x08006ca1
 8006c50:	08006c1d 	.word	0x08006c1d
 8006c54:	08006c1d 	.word	0x08006c1d
 8006c58:	08006c1d 	.word	0x08006c1d
 8006c5c:	08006c1d 	.word	0x08006c1d
 8006c60:	08006da1 	.word	0x08006da1
 8006c64:	08006ccb 	.word	0x08006ccb
 8006c68:	08006d5b 	.word	0x08006d5b
 8006c6c:	08006c1d 	.word	0x08006c1d
 8006c70:	08006c1d 	.word	0x08006c1d
 8006c74:	08006dc3 	.word	0x08006dc3
 8006c78:	08006c1d 	.word	0x08006c1d
 8006c7c:	08006ccb 	.word	0x08006ccb
 8006c80:	08006c1d 	.word	0x08006c1d
 8006c84:	08006c1d 	.word	0x08006c1d
 8006c88:	08006d63 	.word	0x08006d63
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	1d1a      	adds	r2, r3, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6032      	str	r2, [r6, #0]
 8006c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e09d      	b.n	8006ddc <_printf_i+0x1e8>
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	6820      	ldr	r0, [r4, #0]
 8006ca4:	1d19      	adds	r1, r3, #4
 8006ca6:	6031      	str	r1, [r6, #0]
 8006ca8:	0606      	lsls	r6, r0, #24
 8006caa:	d501      	bpl.n	8006cb0 <_printf_i+0xbc>
 8006cac:	681d      	ldr	r5, [r3, #0]
 8006cae:	e003      	b.n	8006cb8 <_printf_i+0xc4>
 8006cb0:	0645      	lsls	r5, r0, #25
 8006cb2:	d5fb      	bpl.n	8006cac <_printf_i+0xb8>
 8006cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	da03      	bge.n	8006cc4 <_printf_i+0xd0>
 8006cbc:	232d      	movs	r3, #45	@ 0x2d
 8006cbe:	426d      	negs	r5, r5
 8006cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc4:	4859      	ldr	r0, [pc, #356]	@ (8006e2c <_printf_i+0x238>)
 8006cc6:	230a      	movs	r3, #10
 8006cc8:	e011      	b.n	8006cee <_printf_i+0xfa>
 8006cca:	6821      	ldr	r1, [r4, #0]
 8006ccc:	6833      	ldr	r3, [r6, #0]
 8006cce:	0608      	lsls	r0, r1, #24
 8006cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cd4:	d402      	bmi.n	8006cdc <_printf_i+0xe8>
 8006cd6:	0649      	lsls	r1, r1, #25
 8006cd8:	bf48      	it	mi
 8006cda:	b2ad      	uxthmi	r5, r5
 8006cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cde:	4853      	ldr	r0, [pc, #332]	@ (8006e2c <_printf_i+0x238>)
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	bf14      	ite	ne
 8006ce4:	230a      	movne	r3, #10
 8006ce6:	2308      	moveq	r3, #8
 8006ce8:	2100      	movs	r1, #0
 8006cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cee:	6866      	ldr	r6, [r4, #4]
 8006cf0:	60a6      	str	r6, [r4, #8]
 8006cf2:	2e00      	cmp	r6, #0
 8006cf4:	bfa2      	ittt	ge
 8006cf6:	6821      	ldrge	r1, [r4, #0]
 8006cf8:	f021 0104 	bicge.w	r1, r1, #4
 8006cfc:	6021      	strge	r1, [r4, #0]
 8006cfe:	b90d      	cbnz	r5, 8006d04 <_printf_i+0x110>
 8006d00:	2e00      	cmp	r6, #0
 8006d02:	d04b      	beq.n	8006d9c <_printf_i+0x1a8>
 8006d04:	4616      	mov	r6, r2
 8006d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d0e:	5dc7      	ldrb	r7, [r0, r7]
 8006d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d14:	462f      	mov	r7, r5
 8006d16:	42bb      	cmp	r3, r7
 8006d18:	460d      	mov	r5, r1
 8006d1a:	d9f4      	bls.n	8006d06 <_printf_i+0x112>
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d10b      	bne.n	8006d38 <_printf_i+0x144>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	07df      	lsls	r7, r3, #31
 8006d24:	d508      	bpl.n	8006d38 <_printf_i+0x144>
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	6861      	ldr	r1, [r4, #4]
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	bfde      	ittt	le
 8006d2e:	2330      	movle	r3, #48	@ 0x30
 8006d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d38:	1b92      	subs	r2, r2, r6
 8006d3a:	6122      	str	r2, [r4, #16]
 8006d3c:	f8cd a000 	str.w	sl, [sp]
 8006d40:	464b      	mov	r3, r9
 8006d42:	aa03      	add	r2, sp, #12
 8006d44:	4621      	mov	r1, r4
 8006d46:	4640      	mov	r0, r8
 8006d48:	f7ff fee6 	bl	8006b18 <_printf_common>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d14a      	bne.n	8006de6 <_printf_i+0x1f2>
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	b004      	add	sp, #16
 8006d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f043 0320 	orr.w	r3, r3, #32
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	4833      	ldr	r0, [pc, #204]	@ (8006e30 <_printf_i+0x23c>)
 8006d64:	2778      	movs	r7, #120	@ 0x78
 8006d66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	6831      	ldr	r1, [r6, #0]
 8006d6e:	061f      	lsls	r7, r3, #24
 8006d70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d74:	d402      	bmi.n	8006d7c <_printf_i+0x188>
 8006d76:	065f      	lsls	r7, r3, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2ad      	uxthmi	r5, r5
 8006d7c:	6031      	str	r1, [r6, #0]
 8006d7e:	07d9      	lsls	r1, r3, #31
 8006d80:	bf44      	itt	mi
 8006d82:	f043 0320 	orrmi.w	r3, r3, #32
 8006d86:	6023      	strmi	r3, [r4, #0]
 8006d88:	b11d      	cbz	r5, 8006d92 <_printf_i+0x19e>
 8006d8a:	2310      	movs	r3, #16
 8006d8c:	e7ac      	b.n	8006ce8 <_printf_i+0xf4>
 8006d8e:	4827      	ldr	r0, [pc, #156]	@ (8006e2c <_printf_i+0x238>)
 8006d90:	e7e9      	b.n	8006d66 <_printf_i+0x172>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f023 0320 	bic.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	e7f6      	b.n	8006d8a <_printf_i+0x196>
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	e7bd      	b.n	8006d1c <_printf_i+0x128>
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	6825      	ldr	r5, [r4, #0]
 8006da4:	6961      	ldr	r1, [r4, #20]
 8006da6:	1d18      	adds	r0, r3, #4
 8006da8:	6030      	str	r0, [r6, #0]
 8006daa:	062e      	lsls	r6, r5, #24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	d501      	bpl.n	8006db4 <_printf_i+0x1c0>
 8006db0:	6019      	str	r1, [r3, #0]
 8006db2:	e002      	b.n	8006dba <_printf_i+0x1c6>
 8006db4:	0668      	lsls	r0, r5, #25
 8006db6:	d5fb      	bpl.n	8006db0 <_printf_i+0x1bc>
 8006db8:	8019      	strh	r1, [r3, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	4616      	mov	r6, r2
 8006dc0:	e7bc      	b.n	8006d3c <_printf_i+0x148>
 8006dc2:	6833      	ldr	r3, [r6, #0]
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	6032      	str	r2, [r6, #0]
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7f9 fa0e 	bl	80001f0 <memchr>
 8006dd4:	b108      	cbz	r0, 8006dda <_printf_i+0x1e6>
 8006dd6:	1b80      	subs	r0, r0, r6
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	2300      	movs	r3, #0
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de4:	e7aa      	b.n	8006d3c <_printf_i+0x148>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	4632      	mov	r2, r6
 8006dea:	4649      	mov	r1, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	47d0      	blx	sl
 8006df0:	3001      	adds	r0, #1
 8006df2:	d0ad      	beq.n	8006d50 <_printf_i+0x15c>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	079b      	lsls	r3, r3, #30
 8006df8:	d413      	bmi.n	8006e22 <_printf_i+0x22e>
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	bfb8      	it	lt
 8006e02:	4618      	movlt	r0, r3
 8006e04:	e7a6      	b.n	8006d54 <_printf_i+0x160>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d09d      	beq.n	8006d50 <_printf_i+0x15c>
 8006e14:	3501      	adds	r5, #1
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dcf2      	bgt.n	8006e06 <_printf_i+0x212>
 8006e20:	e7eb      	b.n	8006dfa <_printf_i+0x206>
 8006e22:	2500      	movs	r5, #0
 8006e24:	f104 0619 	add.w	r6, r4, #25
 8006e28:	e7f5      	b.n	8006e16 <_printf_i+0x222>
 8006e2a:	bf00      	nop
 8006e2c:	080092ea 	.word	0x080092ea
 8006e30:	080092fb 	.word	0x080092fb

08006e34 <std>:
 8006e34:	2300      	movs	r3, #0
 8006e36:	b510      	push	{r4, lr}
 8006e38:	4604      	mov	r4, r0
 8006e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e42:	6083      	str	r3, [r0, #8]
 8006e44:	8181      	strh	r1, [r0, #12]
 8006e46:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e48:	81c2      	strh	r2, [r0, #14]
 8006e4a:	6183      	str	r3, [r0, #24]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	2208      	movs	r2, #8
 8006e50:	305c      	adds	r0, #92	@ 0x5c
 8006e52:	f000 f914 	bl	800707e <memset>
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <std+0x58>)
 8006e58:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <std+0x5c>)
 8006e5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <std+0x60>)
 8006e60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e62:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <std+0x64>)
 8006e64:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <std+0x68>)
 8006e68:	6224      	str	r4, [r4, #32]
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	d006      	beq.n	8006e7c <std+0x48>
 8006e6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e72:	4294      	cmp	r4, r2
 8006e74:	d002      	beq.n	8006e7c <std+0x48>
 8006e76:	33d0      	adds	r3, #208	@ 0xd0
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	d105      	bne.n	8006e88 <std+0x54>
 8006e7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	f000 b978 	b.w	8007178 <__retarget_lock_init_recursive>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	bf00      	nop
 8006e8c:	08006ff9 	.word	0x08006ff9
 8006e90:	0800701b 	.word	0x0800701b
 8006e94:	08007053 	.word	0x08007053
 8006e98:	08007077 	.word	0x08007077
 8006e9c:	200003b0 	.word	0x200003b0

08006ea0 <stdio_exit_handler>:
 8006ea0:	4a02      	ldr	r2, [pc, #8]	@ (8006eac <stdio_exit_handler+0xc>)
 8006ea2:	4903      	ldr	r1, [pc, #12]	@ (8006eb0 <stdio_exit_handler+0x10>)
 8006ea4:	4803      	ldr	r0, [pc, #12]	@ (8006eb4 <stdio_exit_handler+0x14>)
 8006ea6:	f000 b869 	b.w	8006f7c <_fwalk_sglue>
 8006eaa:	bf00      	nop
 8006eac:	20000014 	.word	0x20000014
 8006eb0:	08008ad5 	.word	0x08008ad5
 8006eb4:	20000024 	.word	0x20000024

08006eb8 <cleanup_stdio>:
 8006eb8:	6841      	ldr	r1, [r0, #4]
 8006eba:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <cleanup_stdio+0x34>)
 8006ebc:	4299      	cmp	r1, r3
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	d001      	beq.n	8006ec8 <cleanup_stdio+0x10>
 8006ec4:	f001 fe06 	bl	8008ad4 <_fflush_r>
 8006ec8:	68a1      	ldr	r1, [r4, #8]
 8006eca:	4b09      	ldr	r3, [pc, #36]	@ (8006ef0 <cleanup_stdio+0x38>)
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	d002      	beq.n	8006ed6 <cleanup_stdio+0x1e>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f001 fdff 	bl	8008ad4 <_fflush_r>
 8006ed6:	68e1      	ldr	r1, [r4, #12]
 8006ed8:	4b06      	ldr	r3, [pc, #24]	@ (8006ef4 <cleanup_stdio+0x3c>)
 8006eda:	4299      	cmp	r1, r3
 8006edc:	d004      	beq.n	8006ee8 <cleanup_stdio+0x30>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f001 bdf6 	b.w	8008ad4 <_fflush_r>
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	bf00      	nop
 8006eec:	200003b0 	.word	0x200003b0
 8006ef0:	20000418 	.word	0x20000418
 8006ef4:	20000480 	.word	0x20000480

08006ef8 <global_stdio_init.part.0>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <global_stdio_init.part.0+0x30>)
 8006efc:	4c0b      	ldr	r4, [pc, #44]	@ (8006f2c <global_stdio_init.part.0+0x34>)
 8006efe:	4a0c      	ldr	r2, [pc, #48]	@ (8006f30 <global_stdio_init.part.0+0x38>)
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	4620      	mov	r0, r4
 8006f04:	2200      	movs	r2, #0
 8006f06:	2104      	movs	r1, #4
 8006f08:	f7ff ff94 	bl	8006e34 <std>
 8006f0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f10:	2201      	movs	r2, #1
 8006f12:	2109      	movs	r1, #9
 8006f14:	f7ff ff8e 	bl	8006e34 <std>
 8006f18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f22:	2112      	movs	r1, #18
 8006f24:	f7ff bf86 	b.w	8006e34 <std>
 8006f28:	200004e8 	.word	0x200004e8
 8006f2c:	200003b0 	.word	0x200003b0
 8006f30:	08006ea1 	.word	0x08006ea1

08006f34 <__sfp_lock_acquire>:
 8006f34:	4801      	ldr	r0, [pc, #4]	@ (8006f3c <__sfp_lock_acquire+0x8>)
 8006f36:	f000 b920 	b.w	800717a <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	200004f1 	.word	0x200004f1

08006f40 <__sfp_lock_release>:
 8006f40:	4801      	ldr	r0, [pc, #4]	@ (8006f48 <__sfp_lock_release+0x8>)
 8006f42:	f000 b91b 	b.w	800717c <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	200004f1 	.word	0x200004f1

08006f4c <__sinit>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4604      	mov	r4, r0
 8006f50:	f7ff fff0 	bl	8006f34 <__sfp_lock_acquire>
 8006f54:	6a23      	ldr	r3, [r4, #32]
 8006f56:	b11b      	cbz	r3, 8006f60 <__sinit+0x14>
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5c:	f7ff bff0 	b.w	8006f40 <__sfp_lock_release>
 8006f60:	4b04      	ldr	r3, [pc, #16]	@ (8006f74 <__sinit+0x28>)
 8006f62:	6223      	str	r3, [r4, #32]
 8006f64:	4b04      	ldr	r3, [pc, #16]	@ (8006f78 <__sinit+0x2c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f5      	bne.n	8006f58 <__sinit+0xc>
 8006f6c:	f7ff ffc4 	bl	8006ef8 <global_stdio_init.part.0>
 8006f70:	e7f2      	b.n	8006f58 <__sinit+0xc>
 8006f72:	bf00      	nop
 8006f74:	08006eb9 	.word	0x08006eb9
 8006f78:	200004e8 	.word	0x200004e8

08006f7c <_fwalk_sglue>:
 8006f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	4607      	mov	r7, r0
 8006f82:	4688      	mov	r8, r1
 8006f84:	4614      	mov	r4, r2
 8006f86:	2600      	movs	r6, #0
 8006f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f90:	d505      	bpl.n	8006f9e <_fwalk_sglue+0x22>
 8006f92:	6824      	ldr	r4, [r4, #0]
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	d1f7      	bne.n	8006f88 <_fwalk_sglue+0xc>
 8006f98:	4630      	mov	r0, r6
 8006f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d907      	bls.n	8006fb4 <_fwalk_sglue+0x38>
 8006fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	d003      	beq.n	8006fb4 <_fwalk_sglue+0x38>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c0      	blx	r8
 8006fb2:	4306      	orrs	r6, r0
 8006fb4:	3568      	adds	r5, #104	@ 0x68
 8006fb6:	e7e9      	b.n	8006f8c <_fwalk_sglue+0x10>

08006fb8 <siprintf>:
 8006fb8:	b40e      	push	{r1, r2, r3}
 8006fba:	b500      	push	{lr}
 8006fbc:	b09c      	sub	sp, #112	@ 0x70
 8006fbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006fc0:	9002      	str	r0, [sp, #8]
 8006fc2:	9006      	str	r0, [sp, #24]
 8006fc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fc8:	4809      	ldr	r0, [pc, #36]	@ (8006ff0 <siprintf+0x38>)
 8006fca:	9107      	str	r1, [sp, #28]
 8006fcc:	9104      	str	r1, [sp, #16]
 8006fce:	4909      	ldr	r1, [pc, #36]	@ (8006ff4 <siprintf+0x3c>)
 8006fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd4:	9105      	str	r1, [sp, #20]
 8006fd6:	6800      	ldr	r0, [r0, #0]
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	a902      	add	r1, sp, #8
 8006fdc:	f001 fbfa 	bl	80087d4 <_svfiprintf_r>
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	b01c      	add	sp, #112	@ 0x70
 8006fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fec:	b003      	add	sp, #12
 8006fee:	4770      	bx	lr
 8006ff0:	20000020 	.word	0x20000020
 8006ff4:	ffff0208 	.word	0xffff0208

08006ff8 <__sread>:
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007000:	f000 f86c 	bl	80070dc <_read_r>
 8007004:	2800      	cmp	r0, #0
 8007006:	bfab      	itete	ge
 8007008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800700a:	89a3      	ldrhlt	r3, [r4, #12]
 800700c:	181b      	addge	r3, r3, r0
 800700e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007012:	bfac      	ite	ge
 8007014:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007016:	81a3      	strhlt	r3, [r4, #12]
 8007018:	bd10      	pop	{r4, pc}

0800701a <__swrite>:
 800701a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701e:	461f      	mov	r7, r3
 8007020:	898b      	ldrh	r3, [r1, #12]
 8007022:	05db      	lsls	r3, r3, #23
 8007024:	4605      	mov	r5, r0
 8007026:	460c      	mov	r4, r1
 8007028:	4616      	mov	r6, r2
 800702a:	d505      	bpl.n	8007038 <__swrite+0x1e>
 800702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007030:	2302      	movs	r3, #2
 8007032:	2200      	movs	r2, #0
 8007034:	f000 f840 	bl	80070b8 <_lseek_r>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800703e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007042:	81a3      	strh	r3, [r4, #12]
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	4628      	mov	r0, r5
 800704a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800704e:	f000 b857 	b.w	8007100 <_write_r>

08007052 <__sseek>:
 8007052:	b510      	push	{r4, lr}
 8007054:	460c      	mov	r4, r1
 8007056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705a:	f000 f82d 	bl	80070b8 <_lseek_r>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	bf15      	itete	ne
 8007064:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800706a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800706e:	81a3      	strheq	r3, [r4, #12]
 8007070:	bf18      	it	ne
 8007072:	81a3      	strhne	r3, [r4, #12]
 8007074:	bd10      	pop	{r4, pc}

08007076 <__sclose>:
 8007076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707a:	f000 b80d 	b.w	8007098 <_close_r>

0800707e <memset>:
 800707e:	4402      	add	r2, r0
 8007080:	4603      	mov	r3, r0
 8007082:	4293      	cmp	r3, r2
 8007084:	d100      	bne.n	8007088 <memset+0xa>
 8007086:	4770      	bx	lr
 8007088:	f803 1b01 	strb.w	r1, [r3], #1
 800708c:	e7f9      	b.n	8007082 <memset+0x4>
	...

08007090 <_localeconv_r>:
 8007090:	4800      	ldr	r0, [pc, #0]	@ (8007094 <_localeconv_r+0x4>)
 8007092:	4770      	bx	lr
 8007094:	20000160 	.word	0x20000160

08007098 <_close_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d06      	ldr	r5, [pc, #24]	@ (80070b4 <_close_r+0x1c>)
 800709c:	2300      	movs	r3, #0
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	f7fa fbdb 	bl	800185e <_close>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_close_r+0x1a>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_close_r+0x1a>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	200004ec 	.word	0x200004ec

080070b8 <_lseek_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	@ (80070d8 <_lseek_r+0x20>)
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fa fbf0 	bl	80018ac <_lseek>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_lseek_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_lseek_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	200004ec 	.word	0x200004ec

080070dc <_read_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	@ (80070fc <_read_r+0x20>)
 80070e0:	4604      	mov	r4, r0
 80070e2:	4608      	mov	r0, r1
 80070e4:	4611      	mov	r1, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f7fa fb7e 	bl	80017ec <_read>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_read_r+0x1e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_read_r+0x1e>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	200004ec 	.word	0x200004ec

08007100 <_write_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d07      	ldr	r5, [pc, #28]	@ (8007120 <_write_r+0x20>)
 8007104:	4604      	mov	r4, r0
 8007106:	4608      	mov	r0, r1
 8007108:	4611      	mov	r1, r2
 800710a:	2200      	movs	r2, #0
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	f7fa fb89 	bl	8001826 <_write>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_write_r+0x1e>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_write_r+0x1e>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	200004ec 	.word	0x200004ec

08007124 <__errno>:
 8007124:	4b01      	ldr	r3, [pc, #4]	@ (800712c <__errno+0x8>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000020 	.word	0x20000020

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4d0d      	ldr	r5, [pc, #52]	@ (8007168 <__libc_init_array+0x38>)
 8007134:	4c0d      	ldr	r4, [pc, #52]	@ (800716c <__libc_init_array+0x3c>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	2600      	movs	r6, #0
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	4d0b      	ldr	r5, [pc, #44]	@ (8007170 <__libc_init_array+0x40>)
 8007142:	4c0c      	ldr	r4, [pc, #48]	@ (8007174 <__libc_init_array+0x44>)
 8007144:	f002 f864 	bl	8009210 <_init>
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	2600      	movs	r6, #0
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	08009650 	.word	0x08009650
 800716c:	08009650 	.word	0x08009650
 8007170:	08009650 	.word	0x08009650
 8007174:	08009654 	.word	0x08009654

08007178 <__retarget_lock_init_recursive>:
 8007178:	4770      	bx	lr

0800717a <__retarget_lock_acquire_recursive>:
 800717a:	4770      	bx	lr

0800717c <__retarget_lock_release_recursive>:
 800717c:	4770      	bx	lr

0800717e <quorem>:
 800717e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007182:	6903      	ldr	r3, [r0, #16]
 8007184:	690c      	ldr	r4, [r1, #16]
 8007186:	42a3      	cmp	r3, r4
 8007188:	4607      	mov	r7, r0
 800718a:	db7e      	blt.n	800728a <quorem+0x10c>
 800718c:	3c01      	subs	r4, #1
 800718e:	f101 0814 	add.w	r8, r1, #20
 8007192:	00a3      	lsls	r3, r4, #2
 8007194:	f100 0514 	add.w	r5, r0, #20
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071a8:	3301      	adds	r3, #1
 80071aa:	429a      	cmp	r2, r3
 80071ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80071b4:	d32e      	bcc.n	8007214 <quorem+0x96>
 80071b6:	f04f 0a00 	mov.w	sl, #0
 80071ba:	46c4      	mov	ip, r8
 80071bc:	46ae      	mov	lr, r5
 80071be:	46d3      	mov	fp, sl
 80071c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071c4:	b298      	uxth	r0, r3
 80071c6:	fb06 a000 	mla	r0, r6, r0, sl
 80071ca:	0c02      	lsrs	r2, r0, #16
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	fb06 2303 	mla	r3, r6, r3, r2
 80071d2:	f8de 2000 	ldr.w	r2, [lr]
 80071d6:	b280      	uxth	r0, r0
 80071d8:	b292      	uxth	r2, r2
 80071da:	1a12      	subs	r2, r2, r0
 80071dc:	445a      	add	r2, fp
 80071de:	f8de 0000 	ldr.w	r0, [lr]
 80071e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071f0:	b292      	uxth	r2, r2
 80071f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071f6:	45e1      	cmp	r9, ip
 80071f8:	f84e 2b04 	str.w	r2, [lr], #4
 80071fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007200:	d2de      	bcs.n	80071c0 <quorem+0x42>
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	58eb      	ldr	r3, [r5, r3]
 8007206:	b92b      	cbnz	r3, 8007214 <quorem+0x96>
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	3b04      	subs	r3, #4
 800720c:	429d      	cmp	r5, r3
 800720e:	461a      	mov	r2, r3
 8007210:	d32f      	bcc.n	8007272 <quorem+0xf4>
 8007212:	613c      	str	r4, [r7, #16]
 8007214:	4638      	mov	r0, r7
 8007216:	f001 f979 	bl	800850c <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	db25      	blt.n	800726a <quorem+0xec>
 800721e:	4629      	mov	r1, r5
 8007220:	2000      	movs	r0, #0
 8007222:	f858 2b04 	ldr.w	r2, [r8], #4
 8007226:	f8d1 c000 	ldr.w	ip, [r1]
 800722a:	fa1f fe82 	uxth.w	lr, r2
 800722e:	fa1f f38c 	uxth.w	r3, ip
 8007232:	eba3 030e 	sub.w	r3, r3, lr
 8007236:	4403      	add	r3, r0
 8007238:	0c12      	lsrs	r2, r2, #16
 800723a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800723e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007242:	b29b      	uxth	r3, r3
 8007244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007248:	45c1      	cmp	r9, r8
 800724a:	f841 3b04 	str.w	r3, [r1], #4
 800724e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007252:	d2e6      	bcs.n	8007222 <quorem+0xa4>
 8007254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800725c:	b922      	cbnz	r2, 8007268 <quorem+0xea>
 800725e:	3b04      	subs	r3, #4
 8007260:	429d      	cmp	r5, r3
 8007262:	461a      	mov	r2, r3
 8007264:	d30b      	bcc.n	800727e <quorem+0x100>
 8007266:	613c      	str	r4, [r7, #16]
 8007268:	3601      	adds	r6, #1
 800726a:	4630      	mov	r0, r6
 800726c:	b003      	add	sp, #12
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	3b04      	subs	r3, #4
 8007276:	2a00      	cmp	r2, #0
 8007278:	d1cb      	bne.n	8007212 <quorem+0x94>
 800727a:	3c01      	subs	r4, #1
 800727c:	e7c6      	b.n	800720c <quorem+0x8e>
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	3b04      	subs	r3, #4
 8007282:	2a00      	cmp	r2, #0
 8007284:	d1ef      	bne.n	8007266 <quorem+0xe8>
 8007286:	3c01      	subs	r4, #1
 8007288:	e7ea      	b.n	8007260 <quorem+0xe2>
 800728a:	2000      	movs	r0, #0
 800728c:	e7ee      	b.n	800726c <quorem+0xee>
	...

08007290 <_dtoa_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	69c7      	ldr	r7, [r0, #28]
 8007296:	b099      	sub	sp, #100	@ 0x64
 8007298:	ed8d 0b02 	vstr	d0, [sp, #8]
 800729c:	ec55 4b10 	vmov	r4, r5, d0
 80072a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80072a4:	4683      	mov	fp, r0
 80072a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80072a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072aa:	b97f      	cbnz	r7, 80072cc <_dtoa_r+0x3c>
 80072ac:	2010      	movs	r0, #16
 80072ae:	f000 fdfd 	bl	8007eac <malloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80072b8:	b920      	cbnz	r0, 80072c4 <_dtoa_r+0x34>
 80072ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007558 <_dtoa_r+0x2c8>)
 80072bc:	21ef      	movs	r1, #239	@ 0xef
 80072be:	48a7      	ldr	r0, [pc, #668]	@ (800755c <_dtoa_r+0x2cc>)
 80072c0:	f001 fc68 	bl	8008b94 <__assert_func>
 80072c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072c8:	6007      	str	r7, [r0, #0]
 80072ca:	60c7      	str	r7, [r0, #12]
 80072cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	b159      	cbz	r1, 80072ec <_dtoa_r+0x5c>
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	604a      	str	r2, [r1, #4]
 80072d8:	2301      	movs	r3, #1
 80072da:	4093      	lsls	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
 80072de:	4658      	mov	r0, fp
 80072e0:	f000 feda 	bl	8008098 <_Bfree>
 80072e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	1e2b      	subs	r3, r5, #0
 80072ee:	bfb9      	ittee	lt
 80072f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072f4:	9303      	strlt	r3, [sp, #12]
 80072f6:	2300      	movge	r3, #0
 80072f8:	6033      	strge	r3, [r6, #0]
 80072fa:	9f03      	ldr	r7, [sp, #12]
 80072fc:	4b98      	ldr	r3, [pc, #608]	@ (8007560 <_dtoa_r+0x2d0>)
 80072fe:	bfbc      	itt	lt
 8007300:	2201      	movlt	r2, #1
 8007302:	6032      	strlt	r2, [r6, #0]
 8007304:	43bb      	bics	r3, r7
 8007306:	d112      	bne.n	800732e <_dtoa_r+0x9e>
 8007308:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800730a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007314:	4323      	orrs	r3, r4
 8007316:	f000 854d 	beq.w	8007db4 <_dtoa_r+0xb24>
 800731a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800731c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007574 <_dtoa_r+0x2e4>
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 854f 	beq.w	8007dc4 <_dtoa_r+0xb34>
 8007326:	f10a 0303 	add.w	r3, sl, #3
 800732a:	f000 bd49 	b.w	8007dc0 <_dtoa_r+0xb30>
 800732e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	ec51 0b17 	vmov	r0, r1, d7
 8007338:	2300      	movs	r3, #0
 800733a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800733e:	f7f9 fbd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007342:	4680      	mov	r8, r0
 8007344:	b158      	cbz	r0, 800735e <_dtoa_r+0xce>
 8007346:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007348:	2301      	movs	r3, #1
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800734e:	b113      	cbz	r3, 8007356 <_dtoa_r+0xc6>
 8007350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007352:	4b84      	ldr	r3, [pc, #528]	@ (8007564 <_dtoa_r+0x2d4>)
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007578 <_dtoa_r+0x2e8>
 800735a:	f000 bd33 	b.w	8007dc4 <_dtoa_r+0xb34>
 800735e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007362:	aa16      	add	r2, sp, #88	@ 0x58
 8007364:	a917      	add	r1, sp, #92	@ 0x5c
 8007366:	4658      	mov	r0, fp
 8007368:	f001 f980 	bl	800866c <__d2b>
 800736c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007370:	4681      	mov	r9, r0
 8007372:	2e00      	cmp	r6, #0
 8007374:	d077      	beq.n	8007466 <_dtoa_r+0x1d6>
 8007376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007378:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800737c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007384:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007388:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800738c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007390:	4619      	mov	r1, r3
 8007392:	2200      	movs	r2, #0
 8007394:	4b74      	ldr	r3, [pc, #464]	@ (8007568 <_dtoa_r+0x2d8>)
 8007396:	f7f8 ff87 	bl	80002a8 <__aeabi_dsub>
 800739a:	a369      	add	r3, pc, #420	@ (adr r3, 8007540 <_dtoa_r+0x2b0>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f9 f93a 	bl	8000618 <__aeabi_dmul>
 80073a4:	a368      	add	r3, pc, #416	@ (adr r3, 8007548 <_dtoa_r+0x2b8>)
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f7f8 ff7f 	bl	80002ac <__adddf3>
 80073ae:	4604      	mov	r4, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	460d      	mov	r5, r1
 80073b4:	f7f9 f8c6 	bl	8000544 <__aeabi_i2d>
 80073b8:	a365      	add	r3, pc, #404	@ (adr r3, 8007550 <_dtoa_r+0x2c0>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f7f9 f92b 	bl	8000618 <__aeabi_dmul>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7f8 ff6f 	bl	80002ac <__adddf3>
 80073ce:	4604      	mov	r4, r0
 80073d0:	460d      	mov	r5, r1
 80073d2:	f7f9 fbd1 	bl	8000b78 <__aeabi_d2iz>
 80073d6:	2200      	movs	r2, #0
 80073d8:	4607      	mov	r7, r0
 80073da:	2300      	movs	r3, #0
 80073dc:	4620      	mov	r0, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	f7f9 fb8c 	bl	8000afc <__aeabi_dcmplt>
 80073e4:	b140      	cbz	r0, 80073f8 <_dtoa_r+0x168>
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7f9 f8ac 	bl	8000544 <__aeabi_i2d>
 80073ec:	4622      	mov	r2, r4
 80073ee:	462b      	mov	r3, r5
 80073f0:	f7f9 fb7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80073f4:	b900      	cbnz	r0, 80073f8 <_dtoa_r+0x168>
 80073f6:	3f01      	subs	r7, #1
 80073f8:	2f16      	cmp	r7, #22
 80073fa:	d851      	bhi.n	80074a0 <_dtoa_r+0x210>
 80073fc:	4b5b      	ldr	r3, [pc, #364]	@ (800756c <_dtoa_r+0x2dc>)
 80073fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800740a:	f7f9 fb77 	bl	8000afc <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d048      	beq.n	80074a4 <_dtoa_r+0x214>
 8007412:	3f01      	subs	r7, #1
 8007414:	2300      	movs	r3, #0
 8007416:	9312      	str	r3, [sp, #72]	@ 0x48
 8007418:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800741a:	1b9b      	subs	r3, r3, r6
 800741c:	1e5a      	subs	r2, r3, #1
 800741e:	bf44      	itt	mi
 8007420:	f1c3 0801 	rsbmi	r8, r3, #1
 8007424:	2300      	movmi	r3, #0
 8007426:	9208      	str	r2, [sp, #32]
 8007428:	bf54      	ite	pl
 800742a:	f04f 0800 	movpl.w	r8, #0
 800742e:	9308      	strmi	r3, [sp, #32]
 8007430:	2f00      	cmp	r7, #0
 8007432:	db39      	blt.n	80074a8 <_dtoa_r+0x218>
 8007434:	9b08      	ldr	r3, [sp, #32]
 8007436:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007438:	443b      	add	r3, r7
 800743a:	9308      	str	r3, [sp, #32]
 800743c:	2300      	movs	r3, #0
 800743e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007442:	2b09      	cmp	r3, #9
 8007444:	d864      	bhi.n	8007510 <_dtoa_r+0x280>
 8007446:	2b05      	cmp	r3, #5
 8007448:	bfc4      	itt	gt
 800744a:	3b04      	subgt	r3, #4
 800744c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	f1a3 0302 	sub.w	r3, r3, #2
 8007454:	bfcc      	ite	gt
 8007456:	2400      	movgt	r4, #0
 8007458:	2401      	movle	r4, #1
 800745a:	2b03      	cmp	r3, #3
 800745c:	d863      	bhi.n	8007526 <_dtoa_r+0x296>
 800745e:	e8df f003 	tbb	[pc, r3]
 8007462:	372a      	.short	0x372a
 8007464:	5535      	.short	0x5535
 8007466:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800746a:	441e      	add	r6, r3
 800746c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007470:	2b20      	cmp	r3, #32
 8007472:	bfc1      	itttt	gt
 8007474:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007478:	409f      	lslgt	r7, r3
 800747a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800747e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007482:	bfd6      	itet	le
 8007484:	f1c3 0320 	rsble	r3, r3, #32
 8007488:	ea47 0003 	orrgt.w	r0, r7, r3
 800748c:	fa04 f003 	lslle.w	r0, r4, r3
 8007490:	f7f9 f848 	bl	8000524 <__aeabi_ui2d>
 8007494:	2201      	movs	r2, #1
 8007496:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800749a:	3e01      	subs	r6, #1
 800749c:	9214      	str	r2, [sp, #80]	@ 0x50
 800749e:	e777      	b.n	8007390 <_dtoa_r+0x100>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7b8      	b.n	8007416 <_dtoa_r+0x186>
 80074a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80074a6:	e7b7      	b.n	8007418 <_dtoa_r+0x188>
 80074a8:	427b      	negs	r3, r7
 80074aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ac:	2300      	movs	r3, #0
 80074ae:	eba8 0807 	sub.w	r8, r8, r7
 80074b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074b4:	e7c4      	b.n	8007440 <_dtoa_r+0x1b0>
 80074b6:	2300      	movs	r3, #0
 80074b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dc35      	bgt.n	800752c <_dtoa_r+0x29c>
 80074c0:	2301      	movs	r3, #1
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	461a      	mov	r2, r3
 80074c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ca:	e00b      	b.n	80074e4 <_dtoa_r+0x254>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e7f3      	b.n	80074b8 <_dtoa_r+0x228>
 80074d0:	2300      	movs	r3, #0
 80074d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	bfb8      	it	lt
 80074e2:	2301      	movlt	r3, #1
 80074e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074e8:	2100      	movs	r1, #0
 80074ea:	2204      	movs	r2, #4
 80074ec:	f102 0514 	add.w	r5, r2, #20
 80074f0:	429d      	cmp	r5, r3
 80074f2:	d91f      	bls.n	8007534 <_dtoa_r+0x2a4>
 80074f4:	6041      	str	r1, [r0, #4]
 80074f6:	4658      	mov	r0, fp
 80074f8:	f000 fd8e 	bl	8008018 <_Balloc>
 80074fc:	4682      	mov	sl, r0
 80074fe:	2800      	cmp	r0, #0
 8007500:	d13c      	bne.n	800757c <_dtoa_r+0x2ec>
 8007502:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <_dtoa_r+0x2e0>)
 8007504:	4602      	mov	r2, r0
 8007506:	f240 11af 	movw	r1, #431	@ 0x1af
 800750a:	e6d8      	b.n	80072be <_dtoa_r+0x2e>
 800750c:	2301      	movs	r3, #1
 800750e:	e7e0      	b.n	80074d2 <_dtoa_r+0x242>
 8007510:	2401      	movs	r4, #1
 8007512:	2300      	movs	r3, #0
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	2200      	movs	r2, #0
 8007522:	2312      	movs	r3, #18
 8007524:	e7d0      	b.n	80074c8 <_dtoa_r+0x238>
 8007526:	2301      	movs	r3, #1
 8007528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800752a:	e7f5      	b.n	8007518 <_dtoa_r+0x288>
 800752c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	e7d7      	b.n	80074e4 <_dtoa_r+0x254>
 8007534:	3101      	adds	r1, #1
 8007536:	0052      	lsls	r2, r2, #1
 8007538:	e7d8      	b.n	80074ec <_dtoa_r+0x25c>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
 8007540:	636f4361 	.word	0x636f4361
 8007544:	3fd287a7 	.word	0x3fd287a7
 8007548:	8b60c8b3 	.word	0x8b60c8b3
 800754c:	3fc68a28 	.word	0x3fc68a28
 8007550:	509f79fb 	.word	0x509f79fb
 8007554:	3fd34413 	.word	0x3fd34413
 8007558:	08009319 	.word	0x08009319
 800755c:	08009330 	.word	0x08009330
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	080092e9 	.word	0x080092e9
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	08009428 	.word	0x08009428
 8007570:	08009388 	.word	0x08009388
 8007574:	08009315 	.word	0x08009315
 8007578:	080092e8 	.word	0x080092e8
 800757c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007580:	6018      	str	r0, [r3, #0]
 8007582:	9b07      	ldr	r3, [sp, #28]
 8007584:	2b0e      	cmp	r3, #14
 8007586:	f200 80a4 	bhi.w	80076d2 <_dtoa_r+0x442>
 800758a:	2c00      	cmp	r4, #0
 800758c:	f000 80a1 	beq.w	80076d2 <_dtoa_r+0x442>
 8007590:	2f00      	cmp	r7, #0
 8007592:	dd33      	ble.n	80075fc <_dtoa_r+0x36c>
 8007594:	4bad      	ldr	r3, [pc, #692]	@ (800784c <_dtoa_r+0x5bc>)
 8007596:	f007 020f 	and.w	r2, r7, #15
 800759a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800759e:	ed93 7b00 	vldr	d7, [r3]
 80075a2:	05f8      	lsls	r0, r7, #23
 80075a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075ac:	d516      	bpl.n	80075dc <_dtoa_r+0x34c>
 80075ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007850 <_dtoa_r+0x5c0>)
 80075b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b8:	f7f9 f958 	bl	800086c <__aeabi_ddiv>
 80075bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c0:	f004 040f 	and.w	r4, r4, #15
 80075c4:	2603      	movs	r6, #3
 80075c6:	4da2      	ldr	r5, [pc, #648]	@ (8007850 <_dtoa_r+0x5c0>)
 80075c8:	b954      	cbnz	r4, 80075e0 <_dtoa_r+0x350>
 80075ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d2:	f7f9 f94b 	bl	800086c <__aeabi_ddiv>
 80075d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075da:	e028      	b.n	800762e <_dtoa_r+0x39e>
 80075dc:	2602      	movs	r6, #2
 80075de:	e7f2      	b.n	80075c6 <_dtoa_r+0x336>
 80075e0:	07e1      	lsls	r1, r4, #31
 80075e2:	d508      	bpl.n	80075f6 <_dtoa_r+0x366>
 80075e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075ec:	f7f9 f814 	bl	8000618 <__aeabi_dmul>
 80075f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075f4:	3601      	adds	r6, #1
 80075f6:	1064      	asrs	r4, r4, #1
 80075f8:	3508      	adds	r5, #8
 80075fa:	e7e5      	b.n	80075c8 <_dtoa_r+0x338>
 80075fc:	f000 80d2 	beq.w	80077a4 <_dtoa_r+0x514>
 8007600:	427c      	negs	r4, r7
 8007602:	4b92      	ldr	r3, [pc, #584]	@ (800784c <_dtoa_r+0x5bc>)
 8007604:	4d92      	ldr	r5, [pc, #584]	@ (8007850 <_dtoa_r+0x5c0>)
 8007606:	f004 020f 	and.w	r2, r4, #15
 800760a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007616:	f7f8 ffff 	bl	8000618 <__aeabi_dmul>
 800761a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800761e:	1124      	asrs	r4, r4, #4
 8007620:	2300      	movs	r3, #0
 8007622:	2602      	movs	r6, #2
 8007624:	2c00      	cmp	r4, #0
 8007626:	f040 80b2 	bne.w	800778e <_dtoa_r+0x4fe>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d3      	bne.n	80075d6 <_dtoa_r+0x346>
 800762e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007630:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80b7 	beq.w	80077a8 <_dtoa_r+0x518>
 800763a:	4b86      	ldr	r3, [pc, #536]	@ (8007854 <_dtoa_r+0x5c4>)
 800763c:	2200      	movs	r2, #0
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fa5b 	bl	8000afc <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	f000 80ae 	beq.w	80077a8 <_dtoa_r+0x518>
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80aa 	beq.w	80077a8 <_dtoa_r+0x518>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd37      	ble.n	80076ca <_dtoa_r+0x43a>
 800765a:	1e7b      	subs	r3, r7, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	4620      	mov	r0, r4
 8007660:	4b7d      	ldr	r3, [pc, #500]	@ (8007858 <_dtoa_r+0x5c8>)
 8007662:	2200      	movs	r2, #0
 8007664:	4629      	mov	r1, r5
 8007666:	f7f8 ffd7 	bl	8000618 <__aeabi_dmul>
 800766a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800766e:	9c00      	ldr	r4, [sp, #0]
 8007670:	3601      	adds	r6, #1
 8007672:	4630      	mov	r0, r6
 8007674:	f7f8 ff66 	bl	8000544 <__aeabi_i2d>
 8007678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767c:	f7f8 ffcc 	bl	8000618 <__aeabi_dmul>
 8007680:	4b76      	ldr	r3, [pc, #472]	@ (800785c <_dtoa_r+0x5cc>)
 8007682:	2200      	movs	r2, #0
 8007684:	f7f8 fe12 	bl	80002ac <__adddf3>
 8007688:	4605      	mov	r5, r0
 800768a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800768e:	2c00      	cmp	r4, #0
 8007690:	f040 808d 	bne.w	80077ae <_dtoa_r+0x51e>
 8007694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007698:	4b71      	ldr	r3, [pc, #452]	@ (8007860 <_dtoa_r+0x5d0>)
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 fe04 	bl	80002a8 <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4633      	mov	r3, r6
 80076ac:	f7f9 fa44 	bl	8000b38 <__aeabi_dcmpgt>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f040 828b 	bne.w	8007bcc <_dtoa_r+0x93c>
 80076b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ba:	462a      	mov	r2, r5
 80076bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076c0:	f7f9 fa1c 	bl	8000afc <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 8128 	bne.w	800791a <_dtoa_r+0x68a>
 80076ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f2c0 815a 	blt.w	800798e <_dtoa_r+0x6fe>
 80076da:	2f0e      	cmp	r7, #14
 80076dc:	f300 8157 	bgt.w	800798e <_dtoa_r+0x6fe>
 80076e0:	4b5a      	ldr	r3, [pc, #360]	@ (800784c <_dtoa_r+0x5bc>)
 80076e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076e6:	ed93 7b00 	vldr	d7, [r3]
 80076ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	ed8d 7b00 	vstr	d7, [sp]
 80076f2:	da03      	bge.n	80076fc <_dtoa_r+0x46c>
 80076f4:	9b07      	ldr	r3, [sp, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f340 8101 	ble.w	80078fe <_dtoa_r+0x66e>
 80076fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007700:	4656      	mov	r6, sl
 8007702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f9 f8af 	bl	800086c <__aeabi_ddiv>
 800770e:	f7f9 fa33 	bl	8000b78 <__aeabi_d2iz>
 8007712:	4680      	mov	r8, r0
 8007714:	f7f8 ff16 	bl	8000544 <__aeabi_i2d>
 8007718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771c:	f7f8 ff7c 	bl	8000618 <__aeabi_dmul>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800772c:	f7f8 fdbc 	bl	80002a8 <__aeabi_dsub>
 8007730:	f806 4b01 	strb.w	r4, [r6], #1
 8007734:	9d07      	ldr	r5, [sp, #28]
 8007736:	eba6 040a 	sub.w	r4, r6, sl
 800773a:	42a5      	cmp	r5, r4
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	f040 8117 	bne.w	8007972 <_dtoa_r+0x6e2>
 8007744:	f7f8 fdb2 	bl	80002ac <__adddf3>
 8007748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	f7f9 f9f2 	bl	8000b38 <__aeabi_dcmpgt>
 8007754:	2800      	cmp	r0, #0
 8007756:	f040 80f9 	bne.w	800794c <_dtoa_r+0x6bc>
 800775a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f9 f9c1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007766:	b118      	cbz	r0, 8007770 <_dtoa_r+0x4e0>
 8007768:	f018 0f01 	tst.w	r8, #1
 800776c:	f040 80ee 	bne.w	800794c <_dtoa_r+0x6bc>
 8007770:	4649      	mov	r1, r9
 8007772:	4658      	mov	r0, fp
 8007774:	f000 fc90 	bl	8008098 <_Bfree>
 8007778:	2300      	movs	r3, #0
 800777a:	7033      	strb	r3, [r6, #0]
 800777c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800777e:	3701      	adds	r7, #1
 8007780:	601f      	str	r7, [r3, #0]
 8007782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 831d 	beq.w	8007dc4 <_dtoa_r+0xb34>
 800778a:	601e      	str	r6, [r3, #0]
 800778c:	e31a      	b.n	8007dc4 <_dtoa_r+0xb34>
 800778e:	07e2      	lsls	r2, r4, #31
 8007790:	d505      	bpl.n	800779e <_dtoa_r+0x50e>
 8007792:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007796:	f7f8 ff3f 	bl	8000618 <__aeabi_dmul>
 800779a:	3601      	adds	r6, #1
 800779c:	2301      	movs	r3, #1
 800779e:	1064      	asrs	r4, r4, #1
 80077a0:	3508      	adds	r5, #8
 80077a2:	e73f      	b.n	8007624 <_dtoa_r+0x394>
 80077a4:	2602      	movs	r6, #2
 80077a6:	e742      	b.n	800762e <_dtoa_r+0x39e>
 80077a8:	9c07      	ldr	r4, [sp, #28]
 80077aa:	9704      	str	r7, [sp, #16]
 80077ac:	e761      	b.n	8007672 <_dtoa_r+0x3e2>
 80077ae:	4b27      	ldr	r3, [pc, #156]	@ (800784c <_dtoa_r+0x5bc>)
 80077b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ba:	4454      	add	r4, sl
 80077bc:	2900      	cmp	r1, #0
 80077be:	d053      	beq.n	8007868 <_dtoa_r+0x5d8>
 80077c0:	4928      	ldr	r1, [pc, #160]	@ (8007864 <_dtoa_r+0x5d4>)
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7f9 f852 	bl	800086c <__aeabi_ddiv>
 80077c8:	4633      	mov	r3, r6
 80077ca:	462a      	mov	r2, r5
 80077cc:	f7f8 fd6c 	bl	80002a8 <__aeabi_dsub>
 80077d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077d4:	4656      	mov	r6, sl
 80077d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077da:	f7f9 f9cd 	bl	8000b78 <__aeabi_d2iz>
 80077de:	4605      	mov	r5, r0
 80077e0:	f7f8 feb0 	bl	8000544 <__aeabi_i2d>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ec:	f7f8 fd5c 	bl	80002a8 <__aeabi_dsub>
 80077f0:	3530      	adds	r5, #48	@ 0x30
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077fa:	f806 5b01 	strb.w	r5, [r6], #1
 80077fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007802:	f7f9 f97b 	bl	8000afc <__aeabi_dcmplt>
 8007806:	2800      	cmp	r0, #0
 8007808:	d171      	bne.n	80078ee <_dtoa_r+0x65e>
 800780a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800780e:	4911      	ldr	r1, [pc, #68]	@ (8007854 <_dtoa_r+0x5c4>)
 8007810:	2000      	movs	r0, #0
 8007812:	f7f8 fd49 	bl	80002a8 <__aeabi_dsub>
 8007816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800781a:	f7f9 f96f 	bl	8000afc <__aeabi_dcmplt>
 800781e:	2800      	cmp	r0, #0
 8007820:	f040 8095 	bne.w	800794e <_dtoa_r+0x6be>
 8007824:	42a6      	cmp	r6, r4
 8007826:	f43f af50 	beq.w	80076ca <_dtoa_r+0x43a>
 800782a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800782e:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <_dtoa_r+0x5c8>)
 8007830:	2200      	movs	r2, #0
 8007832:	f7f8 fef1 	bl	8000618 <__aeabi_dmul>
 8007836:	4b08      	ldr	r3, [pc, #32]	@ (8007858 <_dtoa_r+0x5c8>)
 8007838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800783c:	2200      	movs	r2, #0
 800783e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007842:	f7f8 fee9 	bl	8000618 <__aeabi_dmul>
 8007846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800784a:	e7c4      	b.n	80077d6 <_dtoa_r+0x546>
 800784c:	08009428 	.word	0x08009428
 8007850:	08009400 	.word	0x08009400
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	40240000 	.word	0x40240000
 800785c:	401c0000 	.word	0x401c0000
 8007860:	40140000 	.word	0x40140000
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	f7f8 fed4 	bl	8000618 <__aeabi_dmul>
 8007870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007874:	9415      	str	r4, [sp, #84]	@ 0x54
 8007876:	4656      	mov	r6, sl
 8007878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787c:	f7f9 f97c 	bl	8000b78 <__aeabi_d2iz>
 8007880:	4605      	mov	r5, r0
 8007882:	f7f8 fe5f 	bl	8000544 <__aeabi_i2d>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788e:	f7f8 fd0b 	bl	80002a8 <__aeabi_dsub>
 8007892:	3530      	adds	r5, #48	@ 0x30
 8007894:	f806 5b01 	strb.w	r5, [r6], #1
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	42a6      	cmp	r6, r4
 800789e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	d124      	bne.n	80078f2 <_dtoa_r+0x662>
 80078a8:	4bac      	ldr	r3, [pc, #688]	@ (8007b5c <_dtoa_r+0x8cc>)
 80078aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078ae:	f7f8 fcfd 	bl	80002ac <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ba:	f7f9 f93d 	bl	8000b38 <__aeabi_dcmpgt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d145      	bne.n	800794e <_dtoa_r+0x6be>
 80078c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078c6:	49a5      	ldr	r1, [pc, #660]	@ (8007b5c <_dtoa_r+0x8cc>)
 80078c8:	2000      	movs	r0, #0
 80078ca:	f7f8 fced 	bl	80002a8 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d6:	f7f9 f911 	bl	8000afc <__aeabi_dcmplt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f43f aef5 	beq.w	80076ca <_dtoa_r+0x43a>
 80078e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078e2:	1e73      	subs	r3, r6, #1
 80078e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078ea:	2b30      	cmp	r3, #48	@ 0x30
 80078ec:	d0f8      	beq.n	80078e0 <_dtoa_r+0x650>
 80078ee:	9f04      	ldr	r7, [sp, #16]
 80078f0:	e73e      	b.n	8007770 <_dtoa_r+0x4e0>
 80078f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007b60 <_dtoa_r+0x8d0>)
 80078f4:	f7f8 fe90 	bl	8000618 <__aeabi_dmul>
 80078f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078fc:	e7bc      	b.n	8007878 <_dtoa_r+0x5e8>
 80078fe:	d10c      	bne.n	800791a <_dtoa_r+0x68a>
 8007900:	4b98      	ldr	r3, [pc, #608]	@ (8007b64 <_dtoa_r+0x8d4>)
 8007902:	2200      	movs	r2, #0
 8007904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007908:	f7f8 fe86 	bl	8000618 <__aeabi_dmul>
 800790c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007910:	f7f9 f908 	bl	8000b24 <__aeabi_dcmpge>
 8007914:	2800      	cmp	r0, #0
 8007916:	f000 8157 	beq.w	8007bc8 <_dtoa_r+0x938>
 800791a:	2400      	movs	r4, #0
 800791c:	4625      	mov	r5, r4
 800791e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007920:	43db      	mvns	r3, r3
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	4656      	mov	r6, sl
 8007926:	2700      	movs	r7, #0
 8007928:	4621      	mov	r1, r4
 800792a:	4658      	mov	r0, fp
 800792c:	f000 fbb4 	bl	8008098 <_Bfree>
 8007930:	2d00      	cmp	r5, #0
 8007932:	d0dc      	beq.n	80078ee <_dtoa_r+0x65e>
 8007934:	b12f      	cbz	r7, 8007942 <_dtoa_r+0x6b2>
 8007936:	42af      	cmp	r7, r5
 8007938:	d003      	beq.n	8007942 <_dtoa_r+0x6b2>
 800793a:	4639      	mov	r1, r7
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fbab 	bl	8008098 <_Bfree>
 8007942:	4629      	mov	r1, r5
 8007944:	4658      	mov	r0, fp
 8007946:	f000 fba7 	bl	8008098 <_Bfree>
 800794a:	e7d0      	b.n	80078ee <_dtoa_r+0x65e>
 800794c:	9704      	str	r7, [sp, #16]
 800794e:	4633      	mov	r3, r6
 8007950:	461e      	mov	r6, r3
 8007952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007956:	2a39      	cmp	r2, #57	@ 0x39
 8007958:	d107      	bne.n	800796a <_dtoa_r+0x6da>
 800795a:	459a      	cmp	sl, r3
 800795c:	d1f8      	bne.n	8007950 <_dtoa_r+0x6c0>
 800795e:	9a04      	ldr	r2, [sp, #16]
 8007960:	3201      	adds	r2, #1
 8007962:	9204      	str	r2, [sp, #16]
 8007964:	2230      	movs	r2, #48	@ 0x30
 8007966:	f88a 2000 	strb.w	r2, [sl]
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	3201      	adds	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e7bd      	b.n	80078ee <_dtoa_r+0x65e>
 8007972:	4b7b      	ldr	r3, [pc, #492]	@ (8007b60 <_dtoa_r+0x8d0>)
 8007974:	2200      	movs	r2, #0
 8007976:	f7f8 fe4f 	bl	8000618 <__aeabi_dmul>
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	f7f9 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f aebb 	beq.w	8007702 <_dtoa_r+0x472>
 800798c:	e6f0      	b.n	8007770 <_dtoa_r+0x4e0>
 800798e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007990:	2a00      	cmp	r2, #0
 8007992:	f000 80db 	beq.w	8007b4c <_dtoa_r+0x8bc>
 8007996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007998:	2a01      	cmp	r2, #1
 800799a:	f300 80bf 	bgt.w	8007b1c <_dtoa_r+0x88c>
 800799e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	f000 80b7 	beq.w	8007b14 <_dtoa_r+0x884>
 80079a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079ac:	4646      	mov	r6, r8
 80079ae:	9a08      	ldr	r2, [sp, #32]
 80079b0:	2101      	movs	r1, #1
 80079b2:	441a      	add	r2, r3
 80079b4:	4658      	mov	r0, fp
 80079b6:	4498      	add	r8, r3
 80079b8:	9208      	str	r2, [sp, #32]
 80079ba:	f000 fc21 	bl	8008200 <__i2b>
 80079be:	4605      	mov	r5, r0
 80079c0:	b15e      	cbz	r6, 80079da <_dtoa_r+0x74a>
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd08      	ble.n	80079da <_dtoa_r+0x74a>
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	9a08      	ldr	r2, [sp, #32]
 80079cc:	bfa8      	it	ge
 80079ce:	4633      	movge	r3, r6
 80079d0:	eba8 0803 	sub.w	r8, r8, r3
 80079d4:	1af6      	subs	r6, r6, r3
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	9308      	str	r3, [sp, #32]
 80079da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079dc:	b1f3      	cbz	r3, 8007a1c <_dtoa_r+0x78c>
 80079de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80b7 	beq.w	8007b54 <_dtoa_r+0x8c4>
 80079e6:	b18c      	cbz	r4, 8007a0c <_dtoa_r+0x77c>
 80079e8:	4629      	mov	r1, r5
 80079ea:	4622      	mov	r2, r4
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fcc7 	bl	8008380 <__pow5mult>
 80079f2:	464a      	mov	r2, r9
 80079f4:	4601      	mov	r1, r0
 80079f6:	4605      	mov	r5, r0
 80079f8:	4658      	mov	r0, fp
 80079fa:	f000 fc17 	bl	800822c <__multiply>
 80079fe:	4649      	mov	r1, r9
 8007a00:	9004      	str	r0, [sp, #16]
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fb48 	bl	8008098 <_Bfree>
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a0e:	1b1a      	subs	r2, r3, r4
 8007a10:	d004      	beq.n	8007a1c <_dtoa_r+0x78c>
 8007a12:	4649      	mov	r1, r9
 8007a14:	4658      	mov	r0, fp
 8007a16:	f000 fcb3 	bl	8008380 <__pow5mult>
 8007a1a:	4681      	mov	r9, r0
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	4658      	mov	r0, fp
 8007a20:	f000 fbee 	bl	8008200 <__i2b>
 8007a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a26:	4604      	mov	r4, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 81cf 	beq.w	8007dcc <_dtoa_r+0xb3c>
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4601      	mov	r1, r0
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fca4 	bl	8008380 <__pow5mult>
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	f300 8095 	bgt.w	8007b6c <_dtoa_r+0x8dc>
 8007a42:	9b02      	ldr	r3, [sp, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f040 8087 	bne.w	8007b58 <_dtoa_r+0x8c8>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 8089 	bne.w	8007b68 <_dtoa_r+0x8d8>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a5c:	0d1b      	lsrs	r3, r3, #20
 8007a5e:	051b      	lsls	r3, r3, #20
 8007a60:	b12b      	cbz	r3, 8007a6e <_dtoa_r+0x7de>
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	3301      	adds	r3, #1
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	f108 0801 	add.w	r8, r8, #1
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 81b0 	beq.w	8007dd8 <_dtoa_r+0xb48>
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a7e:	6918      	ldr	r0, [r3, #16]
 8007a80:	f000 fb72 	bl	8008168 <__hi0bits>
 8007a84:	f1c0 0020 	rsb	r0, r0, #32
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	4418      	add	r0, r3
 8007a8c:	f010 001f 	ands.w	r0, r0, #31
 8007a90:	d077      	beq.n	8007b82 <_dtoa_r+0x8f2>
 8007a92:	f1c0 0320 	rsb	r3, r0, #32
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	dd6b      	ble.n	8007b72 <_dtoa_r+0x8e2>
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	f1c0 001c 	rsb	r0, r0, #28
 8007aa0:	4403      	add	r3, r0
 8007aa2:	4480      	add	r8, r0
 8007aa4:	4406      	add	r6, r0
 8007aa6:	9308      	str	r3, [sp, #32]
 8007aa8:	f1b8 0f00 	cmp.w	r8, #0
 8007aac:	dd05      	ble.n	8007aba <_dtoa_r+0x82a>
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f000 fcbe 	bl	8008434 <__lshift>
 8007ab8:	4681      	mov	r9, r0
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dd05      	ble.n	8007acc <_dtoa_r+0x83c>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	f000 fcb5 	bl	8008434 <__lshift>
 8007aca:	4604      	mov	r4, r0
 8007acc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d059      	beq.n	8007b86 <_dtoa_r+0x8f6>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	f000 fd19 	bl	800850c <__mcmp>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	da53      	bge.n	8007b86 <_dtoa_r+0x8f6>
 8007ade:	1e7b      	subs	r3, r7, #1
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	220a      	movs	r2, #10
 8007ae8:	4658      	mov	r0, fp
 8007aea:	f000 faf7 	bl	80080dc <__multadd>
 8007aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af0:	4681      	mov	r9, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8172 	beq.w	8007ddc <_dtoa_r+0xb4c>
 8007af8:	2300      	movs	r3, #0
 8007afa:	4629      	mov	r1, r5
 8007afc:	220a      	movs	r2, #10
 8007afe:	4658      	mov	r0, fp
 8007b00:	f000 faec 	bl	80080dc <__multadd>
 8007b04:	9b00      	ldr	r3, [sp, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	4605      	mov	r5, r0
 8007b0a:	dc67      	bgt.n	8007bdc <_dtoa_r+0x94c>
 8007b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	dc41      	bgt.n	8007b96 <_dtoa_r+0x906>
 8007b12:	e063      	b.n	8007bdc <_dtoa_r+0x94c>
 8007b14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b1a:	e746      	b.n	80079aa <_dtoa_r+0x71a>
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	1e5c      	subs	r4, r3, #1
 8007b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	bfbf      	itttt	lt
 8007b26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b2c:	1ae3      	sublt	r3, r4, r3
 8007b2e:	bfb4      	ite	lt
 8007b30:	18d2      	addlt	r2, r2, r3
 8007b32:	1b1c      	subge	r4, r3, r4
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	bfbc      	itt	lt
 8007b38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b3a:	2400      	movlt	r4, #0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfb5      	itete	lt
 8007b40:	eba8 0603 	sublt.w	r6, r8, r3
 8007b44:	9b07      	ldrge	r3, [sp, #28]
 8007b46:	2300      	movlt	r3, #0
 8007b48:	4646      	movge	r6, r8
 8007b4a:	e730      	b.n	80079ae <_dtoa_r+0x71e>
 8007b4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b50:	4646      	mov	r6, r8
 8007b52:	e735      	b.n	80079c0 <_dtoa_r+0x730>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b56:	e75c      	b.n	8007a12 <_dtoa_r+0x782>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e788      	b.n	8007a6e <_dtoa_r+0x7de>
 8007b5c:	3fe00000 	.word	0x3fe00000
 8007b60:	40240000 	.word	0x40240000
 8007b64:	40140000 	.word	0x40140000
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	e780      	b.n	8007a6e <_dtoa_r+0x7de>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b70:	e782      	b.n	8007a78 <_dtoa_r+0x7e8>
 8007b72:	d099      	beq.n	8007aa8 <_dtoa_r+0x818>
 8007b74:	9a08      	ldr	r2, [sp, #32]
 8007b76:	331c      	adds	r3, #28
 8007b78:	441a      	add	r2, r3
 8007b7a:	4498      	add	r8, r3
 8007b7c:	441e      	add	r6, r3
 8007b7e:	9208      	str	r2, [sp, #32]
 8007b80:	e792      	b.n	8007aa8 <_dtoa_r+0x818>
 8007b82:	4603      	mov	r3, r0
 8007b84:	e7f6      	b.n	8007b74 <_dtoa_r+0x8e4>
 8007b86:	9b07      	ldr	r3, [sp, #28]
 8007b88:	9704      	str	r7, [sp, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dc20      	bgt.n	8007bd0 <_dtoa_r+0x940>
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	dd1e      	ble.n	8007bd4 <_dtoa_r+0x944>
 8007b96:	9b00      	ldr	r3, [sp, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f aec0 	bne.w	800791e <_dtoa_r+0x68e>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	4658      	mov	r0, fp
 8007ba4:	f000 fa9a 	bl	80080dc <__multadd>
 8007ba8:	4601      	mov	r1, r0
 8007baa:	4604      	mov	r4, r0
 8007bac:	4648      	mov	r0, r9
 8007bae:	f000 fcad 	bl	800850c <__mcmp>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f77f aeb3 	ble.w	800791e <_dtoa_r+0x68e>
 8007bb8:	4656      	mov	r6, sl
 8007bba:	2331      	movs	r3, #49	@ 0x31
 8007bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	e6ae      	b.n	8007926 <_dtoa_r+0x696>
 8007bc8:	9c07      	ldr	r4, [sp, #28]
 8007bca:	9704      	str	r7, [sp, #16]
 8007bcc:	4625      	mov	r5, r4
 8007bce:	e7f3      	b.n	8007bb8 <_dtoa_r+0x928>
 8007bd0:	9b07      	ldr	r3, [sp, #28]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8104 	beq.w	8007de4 <_dtoa_r+0xb54>
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	dd05      	ble.n	8007bec <_dtoa_r+0x95c>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4632      	mov	r2, r6
 8007be4:	4658      	mov	r0, fp
 8007be6:	f000 fc25 	bl	8008434 <__lshift>
 8007bea:	4605      	mov	r5, r0
 8007bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d05a      	beq.n	8007ca8 <_dtoa_r+0xa18>
 8007bf2:	6869      	ldr	r1, [r5, #4]
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	f000 fa0f 	bl	8008018 <_Balloc>
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	b928      	cbnz	r0, 8007c0a <_dtoa_r+0x97a>
 8007bfe:	4b84      	ldr	r3, [pc, #528]	@ (8007e10 <_dtoa_r+0xb80>)
 8007c00:	4602      	mov	r2, r0
 8007c02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c06:	f7ff bb5a 	b.w	80072be <_dtoa_r+0x2e>
 8007c0a:	692a      	ldr	r2, [r5, #16]
 8007c0c:	3202      	adds	r2, #2
 8007c0e:	0092      	lsls	r2, r2, #2
 8007c10:	f105 010c 	add.w	r1, r5, #12
 8007c14:	300c      	adds	r0, #12
 8007c16:	f000 ffaf 	bl	8008b78 <memcpy>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4658      	mov	r0, fp
 8007c20:	f000 fc08 	bl	8008434 <__lshift>
 8007c24:	f10a 0301 	add.w	r3, sl, #1
 8007c28:	9307      	str	r3, [sp, #28]
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	4453      	add	r3, sl
 8007c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	462f      	mov	r7, r5
 8007c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	3b01      	subs	r3, #1
 8007c42:	4648      	mov	r0, r9
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	f7ff fa9a 	bl	800717e <quorem>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	9002      	str	r0, [sp, #8]
 8007c4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c52:	4648      	mov	r0, r9
 8007c54:	f000 fc5a 	bl	800850c <__mcmp>
 8007c58:	462a      	mov	r2, r5
 8007c5a:	9008      	str	r0, [sp, #32]
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f000 fc70 	bl	8008544 <__mdiff>
 8007c64:	68c2      	ldr	r2, [r0, #12]
 8007c66:	4606      	mov	r6, r0
 8007c68:	bb02      	cbnz	r2, 8007cac <_dtoa_r+0xa1c>
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fc4d 	bl	800850c <__mcmp>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4631      	mov	r1, r6
 8007c76:	4658      	mov	r0, fp
 8007c78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c7a:	f000 fa0d 	bl	8008098 <_Bfree>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c82:	9e07      	ldr	r6, [sp, #28]
 8007c84:	ea43 0102 	orr.w	r1, r3, r2
 8007c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c8a:	4319      	orrs	r1, r3
 8007c8c:	d110      	bne.n	8007cb0 <_dtoa_r+0xa20>
 8007c8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c92:	d029      	beq.n	8007ce8 <_dtoa_r+0xa58>
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dd02      	ble.n	8007ca0 <_dtoa_r+0xa10>
 8007c9a:	9b02      	ldr	r3, [sp, #8]
 8007c9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ca0:	9b00      	ldr	r3, [sp, #0]
 8007ca2:	f883 8000 	strb.w	r8, [r3]
 8007ca6:	e63f      	b.n	8007928 <_dtoa_r+0x698>
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e7bb      	b.n	8007c24 <_dtoa_r+0x994>
 8007cac:	2201      	movs	r2, #1
 8007cae:	e7e1      	b.n	8007c74 <_dtoa_r+0x9e4>
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	db04      	blt.n	8007cc0 <_dtoa_r+0xa30>
 8007cb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	d120      	bne.n	8007d02 <_dtoa_r+0xa72>
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	dded      	ble.n	8007ca0 <_dtoa_r+0xa10>
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4658      	mov	r0, fp
 8007cca:	f000 fbb3 	bl	8008434 <__lshift>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4681      	mov	r9, r0
 8007cd2:	f000 fc1b 	bl	800850c <__mcmp>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	dc03      	bgt.n	8007ce2 <_dtoa_r+0xa52>
 8007cda:	d1e1      	bne.n	8007ca0 <_dtoa_r+0xa10>
 8007cdc:	f018 0f01 	tst.w	r8, #1
 8007ce0:	d0de      	beq.n	8007ca0 <_dtoa_r+0xa10>
 8007ce2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ce6:	d1d8      	bne.n	8007c9a <_dtoa_r+0xa0a>
 8007ce8:	9a00      	ldr	r2, [sp, #0]
 8007cea:	2339      	movs	r3, #57	@ 0x39
 8007cec:	7013      	strb	r3, [r2, #0]
 8007cee:	4633      	mov	r3, r6
 8007cf0:	461e      	mov	r6, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cf8:	2a39      	cmp	r2, #57	@ 0x39
 8007cfa:	d052      	beq.n	8007da2 <_dtoa_r+0xb12>
 8007cfc:	3201      	adds	r2, #1
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e612      	b.n	8007928 <_dtoa_r+0x698>
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	dd07      	ble.n	8007d16 <_dtoa_r+0xa86>
 8007d06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d0a:	d0ed      	beq.n	8007ce8 <_dtoa_r+0xa58>
 8007d0c:	9a00      	ldr	r2, [sp, #0]
 8007d0e:	f108 0301 	add.w	r3, r8, #1
 8007d12:	7013      	strb	r3, [r2, #0]
 8007d14:	e608      	b.n	8007928 <_dtoa_r+0x698>
 8007d16:	9b07      	ldr	r3, [sp, #28]
 8007d18:	9a07      	ldr	r2, [sp, #28]
 8007d1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d028      	beq.n	8007d76 <_dtoa_r+0xae6>
 8007d24:	4649      	mov	r1, r9
 8007d26:	2300      	movs	r3, #0
 8007d28:	220a      	movs	r2, #10
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f000 f9d6 	bl	80080dc <__multadd>
 8007d30:	42af      	cmp	r7, r5
 8007d32:	4681      	mov	r9, r0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	f04f 020a 	mov.w	r2, #10
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	4658      	mov	r0, fp
 8007d40:	d107      	bne.n	8007d52 <_dtoa_r+0xac2>
 8007d42:	f000 f9cb 	bl	80080dc <__multadd>
 8007d46:	4607      	mov	r7, r0
 8007d48:	4605      	mov	r5, r0
 8007d4a:	9b07      	ldr	r3, [sp, #28]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	9307      	str	r3, [sp, #28]
 8007d50:	e774      	b.n	8007c3c <_dtoa_r+0x9ac>
 8007d52:	f000 f9c3 	bl	80080dc <__multadd>
 8007d56:	4629      	mov	r1, r5
 8007d58:	4607      	mov	r7, r0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4658      	mov	r0, fp
 8007d60:	f000 f9bc 	bl	80080dc <__multadd>
 8007d64:	4605      	mov	r5, r0
 8007d66:	e7f0      	b.n	8007d4a <_dtoa_r+0xaba>
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfcc      	ite	gt
 8007d6e:	461e      	movgt	r6, r3
 8007d70:	2601      	movle	r6, #1
 8007d72:	4456      	add	r6, sl
 8007d74:	2700      	movs	r7, #0
 8007d76:	4649      	mov	r1, r9
 8007d78:	2201      	movs	r2, #1
 8007d7a:	4658      	mov	r0, fp
 8007d7c:	f000 fb5a 	bl	8008434 <__lshift>
 8007d80:	4621      	mov	r1, r4
 8007d82:	4681      	mov	r9, r0
 8007d84:	f000 fbc2 	bl	800850c <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dcb0      	bgt.n	8007cee <_dtoa_r+0xa5e>
 8007d8c:	d102      	bne.n	8007d94 <_dtoa_r+0xb04>
 8007d8e:	f018 0f01 	tst.w	r8, #1
 8007d92:	d1ac      	bne.n	8007cee <_dtoa_r+0xa5e>
 8007d94:	4633      	mov	r3, r6
 8007d96:	461e      	mov	r6, r3
 8007d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d9c:	2a30      	cmp	r2, #48	@ 0x30
 8007d9e:	d0fa      	beq.n	8007d96 <_dtoa_r+0xb06>
 8007da0:	e5c2      	b.n	8007928 <_dtoa_r+0x698>
 8007da2:	459a      	cmp	sl, r3
 8007da4:	d1a4      	bne.n	8007cf0 <_dtoa_r+0xa60>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	3301      	adds	r3, #1
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	2331      	movs	r3, #49	@ 0x31
 8007dae:	f88a 3000 	strb.w	r3, [sl]
 8007db2:	e5b9      	b.n	8007928 <_dtoa_r+0x698>
 8007db4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007db6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e14 <_dtoa_r+0xb84>
 8007dba:	b11b      	cbz	r3, 8007dc4 <_dtoa_r+0xb34>
 8007dbc:	f10a 0308 	add.w	r3, sl, #8
 8007dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	b019      	add	sp, #100	@ 0x64
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	f77f ae37 	ble.w	8007a42 <_dtoa_r+0x7b2>
 8007dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd8:	2001      	movs	r0, #1
 8007dda:	e655      	b.n	8007a88 <_dtoa_r+0x7f8>
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f77f aed6 	ble.w	8007b90 <_dtoa_r+0x900>
 8007de4:	4656      	mov	r6, sl
 8007de6:	4621      	mov	r1, r4
 8007de8:	4648      	mov	r0, r9
 8007dea:	f7ff f9c8 	bl	800717e <quorem>
 8007dee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007df2:	f806 8b01 	strb.w	r8, [r6], #1
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	eba6 020a 	sub.w	r2, r6, sl
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	ddb3      	ble.n	8007d68 <_dtoa_r+0xad8>
 8007e00:	4649      	mov	r1, r9
 8007e02:	2300      	movs	r3, #0
 8007e04:	220a      	movs	r2, #10
 8007e06:	4658      	mov	r0, fp
 8007e08:	f000 f968 	bl	80080dc <__multadd>
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	e7ea      	b.n	8007de6 <_dtoa_r+0xb56>
 8007e10:	08009388 	.word	0x08009388
 8007e14:	0800930c 	.word	0x0800930c

08007e18 <_free_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d041      	beq.n	8007ea4 <_free_r+0x8c>
 8007e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e24:	1f0c      	subs	r4, r1, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	18e4      	addlt	r4, r4, r3
 8007e2c:	f000 f8e8 	bl	8008000 <__malloc_lock>
 8007e30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <_free_r+0x90>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	b933      	cbnz	r3, 8007e44 <_free_r+0x2c>
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	6014      	str	r4, [r2, #0]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e40:	f000 b8e4 	b.w	800800c <__malloc_unlock>
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d908      	bls.n	8007e5a <_free_r+0x42>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	bf01      	itttt	eq
 8007e50:	6819      	ldreq	r1, [r3, #0]
 8007e52:	685b      	ldreq	r3, [r3, #4]
 8007e54:	1809      	addeq	r1, r1, r0
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	e7ed      	b.n	8007e36 <_free_r+0x1e>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	b10b      	cbz	r3, 8007e64 <_free_r+0x4c>
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d9fa      	bls.n	8007e5a <_free_r+0x42>
 8007e64:	6811      	ldr	r1, [r2, #0]
 8007e66:	1850      	adds	r0, r2, r1
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d10b      	bne.n	8007e84 <_free_r+0x6c>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	4401      	add	r1, r0
 8007e70:	1850      	adds	r0, r2, r1
 8007e72:	4283      	cmp	r3, r0
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	d1e0      	bne.n	8007e3a <_free_r+0x22>
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	6053      	str	r3, [r2, #4]
 8007e7e:	4408      	add	r0, r1
 8007e80:	6010      	str	r0, [r2, #0]
 8007e82:	e7da      	b.n	8007e3a <_free_r+0x22>
 8007e84:	d902      	bls.n	8007e8c <_free_r+0x74>
 8007e86:	230c      	movs	r3, #12
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	e7d6      	b.n	8007e3a <_free_r+0x22>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	1821      	adds	r1, r4, r0
 8007e90:	428b      	cmp	r3, r1
 8007e92:	bf04      	itt	eq
 8007e94:	6819      	ldreq	r1, [r3, #0]
 8007e96:	685b      	ldreq	r3, [r3, #4]
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	bf04      	itt	eq
 8007e9c:	1809      	addeq	r1, r1, r0
 8007e9e:	6021      	streq	r1, [r4, #0]
 8007ea0:	6054      	str	r4, [r2, #4]
 8007ea2:	e7ca      	b.n	8007e3a <_free_r+0x22>
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200004f8 	.word	0x200004f8

08007eac <malloc>:
 8007eac:	4b02      	ldr	r3, [pc, #8]	@ (8007eb8 <malloc+0xc>)
 8007eae:	4601      	mov	r1, r0
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f000 b825 	b.w	8007f00 <_malloc_r>
 8007eb6:	bf00      	nop
 8007eb8:	20000020 	.word	0x20000020

08007ebc <sbrk_aligned>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	4e0f      	ldr	r6, [pc, #60]	@ (8007efc <sbrk_aligned+0x40>)
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	6831      	ldr	r1, [r6, #0]
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	b911      	cbnz	r1, 8007ece <sbrk_aligned+0x12>
 8007ec8:	f000 fe46 	bl	8008b58 <_sbrk_r>
 8007ecc:	6030      	str	r0, [r6, #0]
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 fe41 	bl	8008b58 <_sbrk_r>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	d103      	bne.n	8007ee2 <sbrk_aligned+0x26>
 8007eda:	f04f 34ff 	mov.w	r4, #4294967295
 8007ede:	4620      	mov	r0, r4
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	1cc4      	adds	r4, r0, #3
 8007ee4:	f024 0403 	bic.w	r4, r4, #3
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d0f8      	beq.n	8007ede <sbrk_aligned+0x22>
 8007eec:	1a21      	subs	r1, r4, r0
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 fe32 	bl	8008b58 <_sbrk_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d1f2      	bne.n	8007ede <sbrk_aligned+0x22>
 8007ef8:	e7ef      	b.n	8007eda <sbrk_aligned+0x1e>
 8007efa:	bf00      	nop
 8007efc:	200004f4 	.word	0x200004f4

08007f00 <_malloc_r>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	1ccd      	adds	r5, r1, #3
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	2d00      	cmp	r5, #0
 8007f14:	4606      	mov	r6, r0
 8007f16:	db01      	blt.n	8007f1c <_malloc_r+0x1c>
 8007f18:	42a9      	cmp	r1, r5
 8007f1a:	d904      	bls.n	8007f26 <_malloc_r+0x26>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	6033      	str	r3, [r6, #0]
 8007f20:	2000      	movs	r0, #0
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ffc <_malloc_r+0xfc>
 8007f2a:	f000 f869 	bl	8008000 <__malloc_lock>
 8007f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f32:	461c      	mov	r4, r3
 8007f34:	bb44      	cbnz	r4, 8007f88 <_malloc_r+0x88>
 8007f36:	4629      	mov	r1, r5
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff ffbf 	bl	8007ebc <sbrk_aligned>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	4604      	mov	r4, r0
 8007f42:	d158      	bne.n	8007ff6 <_malloc_r+0xf6>
 8007f44:	f8d8 4000 	ldr.w	r4, [r8]
 8007f48:	4627      	mov	r7, r4
 8007f4a:	2f00      	cmp	r7, #0
 8007f4c:	d143      	bne.n	8007fd6 <_malloc_r+0xd6>
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d04b      	beq.n	8007fea <_malloc_r+0xea>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	4639      	mov	r1, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	eb04 0903 	add.w	r9, r4, r3
 8007f5c:	f000 fdfc 	bl	8008b58 <_sbrk_r>
 8007f60:	4581      	cmp	r9, r0
 8007f62:	d142      	bne.n	8007fea <_malloc_r+0xea>
 8007f64:	6821      	ldr	r1, [r4, #0]
 8007f66:	1a6d      	subs	r5, r5, r1
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7ff ffa6 	bl	8007ebc <sbrk_aligned>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d03a      	beq.n	8007fea <_malloc_r+0xea>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	442b      	add	r3, r5
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	bb62      	cbnz	r2, 8007fdc <_malloc_r+0xdc>
 8007f82:	f8c8 7000 	str.w	r7, [r8]
 8007f86:	e00f      	b.n	8007fa8 <_malloc_r+0xa8>
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	1b52      	subs	r2, r2, r5
 8007f8c:	d420      	bmi.n	8007fd0 <_malloc_r+0xd0>
 8007f8e:	2a0b      	cmp	r2, #11
 8007f90:	d917      	bls.n	8007fc2 <_malloc_r+0xc2>
 8007f92:	1961      	adds	r1, r4, r5
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	6025      	str	r5, [r4, #0]
 8007f98:	bf18      	it	ne
 8007f9a:	6059      	strne	r1, [r3, #4]
 8007f9c:	6863      	ldr	r3, [r4, #4]
 8007f9e:	bf08      	it	eq
 8007fa0:	f8c8 1000 	streq.w	r1, [r8]
 8007fa4:	5162      	str	r2, [r4, r5]
 8007fa6:	604b      	str	r3, [r1, #4]
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f000 f82f 	bl	800800c <__malloc_unlock>
 8007fae:	f104 000b 	add.w	r0, r4, #11
 8007fb2:	1d23      	adds	r3, r4, #4
 8007fb4:	f020 0007 	bic.w	r0, r0, #7
 8007fb8:	1ac2      	subs	r2, r0, r3
 8007fba:	bf1c      	itt	ne
 8007fbc:	1a1b      	subne	r3, r3, r0
 8007fbe:	50a3      	strne	r3, [r4, r2]
 8007fc0:	e7af      	b.n	8007f22 <_malloc_r+0x22>
 8007fc2:	6862      	ldr	r2, [r4, #4]
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	bf0c      	ite	eq
 8007fc8:	f8c8 2000 	streq.w	r2, [r8]
 8007fcc:	605a      	strne	r2, [r3, #4]
 8007fce:	e7eb      	b.n	8007fa8 <_malloc_r+0xa8>
 8007fd0:	4623      	mov	r3, r4
 8007fd2:	6864      	ldr	r4, [r4, #4]
 8007fd4:	e7ae      	b.n	8007f34 <_malloc_r+0x34>
 8007fd6:	463c      	mov	r4, r7
 8007fd8:	687f      	ldr	r7, [r7, #4]
 8007fda:	e7b6      	b.n	8007f4a <_malloc_r+0x4a>
 8007fdc:	461a      	mov	r2, r3
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	d1fb      	bne.n	8007fdc <_malloc_r+0xdc>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6053      	str	r3, [r2, #4]
 8007fe8:	e7de      	b.n	8007fa8 <_malloc_r+0xa8>
 8007fea:	230c      	movs	r3, #12
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f80c 	bl	800800c <__malloc_unlock>
 8007ff4:	e794      	b.n	8007f20 <_malloc_r+0x20>
 8007ff6:	6005      	str	r5, [r0, #0]
 8007ff8:	e7d6      	b.n	8007fa8 <_malloc_r+0xa8>
 8007ffa:	bf00      	nop
 8007ffc:	200004f8 	.word	0x200004f8

08008000 <__malloc_lock>:
 8008000:	4801      	ldr	r0, [pc, #4]	@ (8008008 <__malloc_lock+0x8>)
 8008002:	f7ff b8ba 	b.w	800717a <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	200004f0 	.word	0x200004f0

0800800c <__malloc_unlock>:
 800800c:	4801      	ldr	r0, [pc, #4]	@ (8008014 <__malloc_unlock+0x8>)
 800800e:	f7ff b8b5 	b.w	800717c <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	200004f0 	.word	0x200004f0

08008018 <_Balloc>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	69c6      	ldr	r6, [r0, #28]
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	b976      	cbnz	r6, 8008040 <_Balloc+0x28>
 8008022:	2010      	movs	r0, #16
 8008024:	f7ff ff42 	bl	8007eac <malloc>
 8008028:	4602      	mov	r2, r0
 800802a:	61e0      	str	r0, [r4, #28]
 800802c:	b920      	cbnz	r0, 8008038 <_Balloc+0x20>
 800802e:	4b18      	ldr	r3, [pc, #96]	@ (8008090 <_Balloc+0x78>)
 8008030:	4818      	ldr	r0, [pc, #96]	@ (8008094 <_Balloc+0x7c>)
 8008032:	216b      	movs	r1, #107	@ 0x6b
 8008034:	f000 fdae 	bl	8008b94 <__assert_func>
 8008038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800803c:	6006      	str	r6, [r0, #0]
 800803e:	60c6      	str	r6, [r0, #12]
 8008040:	69e6      	ldr	r6, [r4, #28]
 8008042:	68f3      	ldr	r3, [r6, #12]
 8008044:	b183      	cbz	r3, 8008068 <_Balloc+0x50>
 8008046:	69e3      	ldr	r3, [r4, #28]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800804e:	b9b8      	cbnz	r0, 8008080 <_Balloc+0x68>
 8008050:	2101      	movs	r1, #1
 8008052:	fa01 f605 	lsl.w	r6, r1, r5
 8008056:	1d72      	adds	r2, r6, #5
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fdb8 	bl	8008bd0 <_calloc_r>
 8008060:	b160      	cbz	r0, 800807c <_Balloc+0x64>
 8008062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008066:	e00e      	b.n	8008086 <_Balloc+0x6e>
 8008068:	2221      	movs	r2, #33	@ 0x21
 800806a:	2104      	movs	r1, #4
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fdaf 	bl	8008bd0 <_calloc_r>
 8008072:	69e3      	ldr	r3, [r4, #28]
 8008074:	60f0      	str	r0, [r6, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e4      	bne.n	8008046 <_Balloc+0x2e>
 800807c:	2000      	movs	r0, #0
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	6802      	ldr	r2, [r0, #0]
 8008082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008086:	2300      	movs	r3, #0
 8008088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800808c:	e7f7      	b.n	800807e <_Balloc+0x66>
 800808e:	bf00      	nop
 8008090:	08009319 	.word	0x08009319
 8008094:	08009399 	.word	0x08009399

08008098 <_Bfree>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	69c6      	ldr	r6, [r0, #28]
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Bfree+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ff02 	bl	8007eac <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	61e8      	str	r0, [r5, #28]
 80080ac:	b920      	cbnz	r0, 80080b8 <_Bfree+0x20>
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <_Bfree+0x3c>)
 80080b0:	4809      	ldr	r0, [pc, #36]	@ (80080d8 <_Bfree+0x40>)
 80080b2:	218f      	movs	r1, #143	@ 0x8f
 80080b4:	f000 fd6e 	bl	8008b94 <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	b13c      	cbz	r4, 80080d2 <_Bfree+0x3a>
 80080c2:	69eb      	ldr	r3, [r5, #28]
 80080c4:	6862      	ldr	r2, [r4, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080cc:	6021      	str	r1, [r4, #0]
 80080ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	08009319 	.word	0x08009319
 80080d8:	08009399 	.word	0x08009399

080080dc <__multadd>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	690d      	ldr	r5, [r1, #16]
 80080e2:	4607      	mov	r7, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	461e      	mov	r6, r3
 80080e8:	f101 0c14 	add.w	ip, r1, #20
 80080ec:	2000      	movs	r0, #0
 80080ee:	f8dc 3000 	ldr.w	r3, [ip]
 80080f2:	b299      	uxth	r1, r3
 80080f4:	fb02 6101 	mla	r1, r2, r1, r6
 80080f8:	0c1e      	lsrs	r6, r3, #16
 80080fa:	0c0b      	lsrs	r3, r1, #16
 80080fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008100:	b289      	uxth	r1, r1
 8008102:	3001      	adds	r0, #1
 8008104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008108:	4285      	cmp	r5, r0
 800810a:	f84c 1b04 	str.w	r1, [ip], #4
 800810e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008112:	dcec      	bgt.n	80080ee <__multadd+0x12>
 8008114:	b30e      	cbz	r6, 800815a <__multadd+0x7e>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	42ab      	cmp	r3, r5
 800811a:	dc19      	bgt.n	8008150 <__multadd+0x74>
 800811c:	6861      	ldr	r1, [r4, #4]
 800811e:	4638      	mov	r0, r7
 8008120:	3101      	adds	r1, #1
 8008122:	f7ff ff79 	bl	8008018 <_Balloc>
 8008126:	4680      	mov	r8, r0
 8008128:	b928      	cbnz	r0, 8008136 <__multadd+0x5a>
 800812a:	4602      	mov	r2, r0
 800812c:	4b0c      	ldr	r3, [pc, #48]	@ (8008160 <__multadd+0x84>)
 800812e:	480d      	ldr	r0, [pc, #52]	@ (8008164 <__multadd+0x88>)
 8008130:	21ba      	movs	r1, #186	@ 0xba
 8008132:	f000 fd2f 	bl	8008b94 <__assert_func>
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	f104 010c 	add.w	r1, r4, #12
 800813e:	0092      	lsls	r2, r2, #2
 8008140:	300c      	adds	r0, #12
 8008142:	f000 fd19 	bl	8008b78 <memcpy>
 8008146:	4621      	mov	r1, r4
 8008148:	4638      	mov	r0, r7
 800814a:	f7ff ffa5 	bl	8008098 <_Bfree>
 800814e:	4644      	mov	r4, r8
 8008150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008154:	3501      	adds	r5, #1
 8008156:	615e      	str	r6, [r3, #20]
 8008158:	6125      	str	r5, [r4, #16]
 800815a:	4620      	mov	r0, r4
 800815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008160:	08009388 	.word	0x08009388
 8008164:	08009399 	.word	0x08009399

08008168 <__hi0bits>:
 8008168:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800816c:	4603      	mov	r3, r0
 800816e:	bf36      	itet	cc
 8008170:	0403      	lslcc	r3, r0, #16
 8008172:	2000      	movcs	r0, #0
 8008174:	2010      	movcc	r0, #16
 8008176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800817a:	bf3c      	itt	cc
 800817c:	021b      	lslcc	r3, r3, #8
 800817e:	3008      	addcc	r0, #8
 8008180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008184:	bf3c      	itt	cc
 8008186:	011b      	lslcc	r3, r3, #4
 8008188:	3004      	addcc	r0, #4
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818e:	bf3c      	itt	cc
 8008190:	009b      	lslcc	r3, r3, #2
 8008192:	3002      	addcc	r0, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	db05      	blt.n	80081a4 <__hi0bits+0x3c>
 8008198:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800819c:	f100 0001 	add.w	r0, r0, #1
 80081a0:	bf08      	it	eq
 80081a2:	2020      	moveq	r0, #32
 80081a4:	4770      	bx	lr

080081a6 <__lo0bits>:
 80081a6:	6803      	ldr	r3, [r0, #0]
 80081a8:	4602      	mov	r2, r0
 80081aa:	f013 0007 	ands.w	r0, r3, #7
 80081ae:	d00b      	beq.n	80081c8 <__lo0bits+0x22>
 80081b0:	07d9      	lsls	r1, r3, #31
 80081b2:	d421      	bmi.n	80081f8 <__lo0bits+0x52>
 80081b4:	0798      	lsls	r0, r3, #30
 80081b6:	bf49      	itett	mi
 80081b8:	085b      	lsrmi	r3, r3, #1
 80081ba:	089b      	lsrpl	r3, r3, #2
 80081bc:	2001      	movmi	r0, #1
 80081be:	6013      	strmi	r3, [r2, #0]
 80081c0:	bf5c      	itt	pl
 80081c2:	6013      	strpl	r3, [r2, #0]
 80081c4:	2002      	movpl	r0, #2
 80081c6:	4770      	bx	lr
 80081c8:	b299      	uxth	r1, r3
 80081ca:	b909      	cbnz	r1, 80081d0 <__lo0bits+0x2a>
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	2010      	movs	r0, #16
 80081d0:	b2d9      	uxtb	r1, r3
 80081d2:	b909      	cbnz	r1, 80081d8 <__lo0bits+0x32>
 80081d4:	3008      	adds	r0, #8
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	0719      	lsls	r1, r3, #28
 80081da:	bf04      	itt	eq
 80081dc:	091b      	lsreq	r3, r3, #4
 80081de:	3004      	addeq	r0, #4
 80081e0:	0799      	lsls	r1, r3, #30
 80081e2:	bf04      	itt	eq
 80081e4:	089b      	lsreq	r3, r3, #2
 80081e6:	3002      	addeq	r0, #2
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d403      	bmi.n	80081f4 <__lo0bits+0x4e>
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	f100 0001 	add.w	r0, r0, #1
 80081f2:	d003      	beq.n	80081fc <__lo0bits+0x56>
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	4770      	bx	lr
 80081f8:	2000      	movs	r0, #0
 80081fa:	4770      	bx	lr
 80081fc:	2020      	movs	r0, #32
 80081fe:	4770      	bx	lr

08008200 <__i2b>:
 8008200:	b510      	push	{r4, lr}
 8008202:	460c      	mov	r4, r1
 8008204:	2101      	movs	r1, #1
 8008206:	f7ff ff07 	bl	8008018 <_Balloc>
 800820a:	4602      	mov	r2, r0
 800820c:	b928      	cbnz	r0, 800821a <__i2b+0x1a>
 800820e:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <__i2b+0x24>)
 8008210:	4805      	ldr	r0, [pc, #20]	@ (8008228 <__i2b+0x28>)
 8008212:	f240 1145 	movw	r1, #325	@ 0x145
 8008216:	f000 fcbd 	bl	8008b94 <__assert_func>
 800821a:	2301      	movs	r3, #1
 800821c:	6144      	str	r4, [r0, #20]
 800821e:	6103      	str	r3, [r0, #16]
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	08009388 	.word	0x08009388
 8008228:	08009399 	.word	0x08009399

0800822c <__multiply>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4614      	mov	r4, r2
 8008232:	690a      	ldr	r2, [r1, #16]
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	429a      	cmp	r2, r3
 8008238:	bfa8      	it	ge
 800823a:	4623      	movge	r3, r4
 800823c:	460f      	mov	r7, r1
 800823e:	bfa4      	itt	ge
 8008240:	460c      	movge	r4, r1
 8008242:	461f      	movge	r7, r3
 8008244:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008248:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	6861      	ldr	r1, [r4, #4]
 8008250:	eb0a 0609 	add.w	r6, sl, r9
 8008254:	42b3      	cmp	r3, r6
 8008256:	b085      	sub	sp, #20
 8008258:	bfb8      	it	lt
 800825a:	3101      	addlt	r1, #1
 800825c:	f7ff fedc 	bl	8008018 <_Balloc>
 8008260:	b930      	cbnz	r0, 8008270 <__multiply+0x44>
 8008262:	4602      	mov	r2, r0
 8008264:	4b44      	ldr	r3, [pc, #272]	@ (8008378 <__multiply+0x14c>)
 8008266:	4845      	ldr	r0, [pc, #276]	@ (800837c <__multiply+0x150>)
 8008268:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800826c:	f000 fc92 	bl	8008b94 <__assert_func>
 8008270:	f100 0514 	add.w	r5, r0, #20
 8008274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008278:	462b      	mov	r3, r5
 800827a:	2200      	movs	r2, #0
 800827c:	4543      	cmp	r3, r8
 800827e:	d321      	bcc.n	80082c4 <__multiply+0x98>
 8008280:	f107 0114 	add.w	r1, r7, #20
 8008284:	f104 0214 	add.w	r2, r4, #20
 8008288:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800828c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	1b13      	subs	r3, r2, r4
 8008294:	3b15      	subs	r3, #21
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	3304      	adds	r3, #4
 800829c:	f104 0715 	add.w	r7, r4, #21
 80082a0:	42ba      	cmp	r2, r7
 80082a2:	bf38      	it	cc
 80082a4:	2304      	movcc	r3, #4
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	9103      	str	r1, [sp, #12]
 80082ac:	428b      	cmp	r3, r1
 80082ae:	d80c      	bhi.n	80082ca <__multiply+0x9e>
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	dd03      	ble.n	80082bc <__multiply+0x90>
 80082b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05b      	beq.n	8008374 <__multiply+0x148>
 80082bc:	6106      	str	r6, [r0, #16]
 80082be:	b005      	add	sp, #20
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	f843 2b04 	str.w	r2, [r3], #4
 80082c8:	e7d8      	b.n	800827c <__multiply+0x50>
 80082ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80082ce:	f1ba 0f00 	cmp.w	sl, #0
 80082d2:	d024      	beq.n	800831e <__multiply+0xf2>
 80082d4:	f104 0e14 	add.w	lr, r4, #20
 80082d8:	46a9      	mov	r9, r5
 80082da:	f04f 0c00 	mov.w	ip, #0
 80082de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082e2:	f8d9 3000 	ldr.w	r3, [r9]
 80082e6:	fa1f fb87 	uxth.w	fp, r7
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80082f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80082f4:	f8d9 7000 	ldr.w	r7, [r9]
 80082f8:	4463      	add	r3, ip
 80082fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008302:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008306:	b29b      	uxth	r3, r3
 8008308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800830c:	4572      	cmp	r2, lr
 800830e:	f849 3b04 	str.w	r3, [r9], #4
 8008312:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008316:	d8e2      	bhi.n	80082de <__multiply+0xb2>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	f845 c003 	str.w	ip, [r5, r3]
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008324:	3104      	adds	r1, #4
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	d021      	beq.n	8008370 <__multiply+0x144>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	f104 0c14 	add.w	ip, r4, #20
 8008332:	46ae      	mov	lr, r5
 8008334:	f04f 0a00 	mov.w	sl, #0
 8008338:	f8bc b000 	ldrh.w	fp, [ip]
 800833c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008340:	fb09 770b 	mla	r7, r9, fp, r7
 8008344:	4457      	add	r7, sl
 8008346:	b29b      	uxth	r3, r3
 8008348:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800834c:	f84e 3b04 	str.w	r3, [lr], #4
 8008350:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008354:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008358:	f8be 3000 	ldrh.w	r3, [lr]
 800835c:	fb09 330a 	mla	r3, r9, sl, r3
 8008360:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008364:	4562      	cmp	r2, ip
 8008366:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800836a:	d8e5      	bhi.n	8008338 <__multiply+0x10c>
 800836c:	9f01      	ldr	r7, [sp, #4]
 800836e:	51eb      	str	r3, [r5, r7]
 8008370:	3504      	adds	r5, #4
 8008372:	e799      	b.n	80082a8 <__multiply+0x7c>
 8008374:	3e01      	subs	r6, #1
 8008376:	e79b      	b.n	80082b0 <__multiply+0x84>
 8008378:	08009388 	.word	0x08009388
 800837c:	08009399 	.word	0x08009399

08008380 <__pow5mult>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4615      	mov	r5, r2
 8008386:	f012 0203 	ands.w	r2, r2, #3
 800838a:	4607      	mov	r7, r0
 800838c:	460e      	mov	r6, r1
 800838e:	d007      	beq.n	80083a0 <__pow5mult+0x20>
 8008390:	4c25      	ldr	r4, [pc, #148]	@ (8008428 <__pow5mult+0xa8>)
 8008392:	3a01      	subs	r2, #1
 8008394:	2300      	movs	r3, #0
 8008396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800839a:	f7ff fe9f 	bl	80080dc <__multadd>
 800839e:	4606      	mov	r6, r0
 80083a0:	10ad      	asrs	r5, r5, #2
 80083a2:	d03d      	beq.n	8008420 <__pow5mult+0xa0>
 80083a4:	69fc      	ldr	r4, [r7, #28]
 80083a6:	b97c      	cbnz	r4, 80083c8 <__pow5mult+0x48>
 80083a8:	2010      	movs	r0, #16
 80083aa:	f7ff fd7f 	bl	8007eac <malloc>
 80083ae:	4602      	mov	r2, r0
 80083b0:	61f8      	str	r0, [r7, #28]
 80083b2:	b928      	cbnz	r0, 80083c0 <__pow5mult+0x40>
 80083b4:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <__pow5mult+0xac>)
 80083b6:	481e      	ldr	r0, [pc, #120]	@ (8008430 <__pow5mult+0xb0>)
 80083b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083bc:	f000 fbea 	bl	8008b94 <__assert_func>
 80083c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c4:	6004      	str	r4, [r0, #0]
 80083c6:	60c4      	str	r4, [r0, #12]
 80083c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d0:	b94c      	cbnz	r4, 80083e6 <__pow5mult+0x66>
 80083d2:	f240 2171 	movw	r1, #625	@ 0x271
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff ff12 	bl	8008200 <__i2b>
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c8 0008 	str.w	r0, [r8, #8]
 80083e2:	4604      	mov	r4, r0
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	07eb      	lsls	r3, r5, #31
 80083ec:	d50a      	bpl.n	8008404 <__pow5mult+0x84>
 80083ee:	4631      	mov	r1, r6
 80083f0:	4622      	mov	r2, r4
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7ff ff1a 	bl	800822c <__multiply>
 80083f8:	4631      	mov	r1, r6
 80083fa:	4680      	mov	r8, r0
 80083fc:	4638      	mov	r0, r7
 80083fe:	f7ff fe4b 	bl	8008098 <_Bfree>
 8008402:	4646      	mov	r6, r8
 8008404:	106d      	asrs	r5, r5, #1
 8008406:	d00b      	beq.n	8008420 <__pow5mult+0xa0>
 8008408:	6820      	ldr	r0, [r4, #0]
 800840a:	b938      	cbnz	r0, 800841c <__pow5mult+0x9c>
 800840c:	4622      	mov	r2, r4
 800840e:	4621      	mov	r1, r4
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff ff0b 	bl	800822c <__multiply>
 8008416:	6020      	str	r0, [r4, #0]
 8008418:	f8c0 9000 	str.w	r9, [r0]
 800841c:	4604      	mov	r4, r0
 800841e:	e7e4      	b.n	80083ea <__pow5mult+0x6a>
 8008420:	4630      	mov	r0, r6
 8008422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008426:	bf00      	nop
 8008428:	080093f4 	.word	0x080093f4
 800842c:	08009319 	.word	0x08009319
 8008430:	08009399 	.word	0x08009399

08008434 <__lshift>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	6849      	ldr	r1, [r1, #4]
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	4607      	mov	r7, r0
 8008446:	4691      	mov	r9, r2
 8008448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800844c:	f108 0601 	add.w	r6, r8, #1
 8008450:	42b3      	cmp	r3, r6
 8008452:	db0b      	blt.n	800846c <__lshift+0x38>
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff fddf 	bl	8008018 <_Balloc>
 800845a:	4605      	mov	r5, r0
 800845c:	b948      	cbnz	r0, 8008472 <__lshift+0x3e>
 800845e:	4602      	mov	r2, r0
 8008460:	4b28      	ldr	r3, [pc, #160]	@ (8008504 <__lshift+0xd0>)
 8008462:	4829      	ldr	r0, [pc, #164]	@ (8008508 <__lshift+0xd4>)
 8008464:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008468:	f000 fb94 	bl	8008b94 <__assert_func>
 800846c:	3101      	adds	r1, #1
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	e7ee      	b.n	8008450 <__lshift+0x1c>
 8008472:	2300      	movs	r3, #0
 8008474:	f100 0114 	add.w	r1, r0, #20
 8008478:	f100 0210 	add.w	r2, r0, #16
 800847c:	4618      	mov	r0, r3
 800847e:	4553      	cmp	r3, sl
 8008480:	db33      	blt.n	80084ea <__lshift+0xb6>
 8008482:	6920      	ldr	r0, [r4, #16]
 8008484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008488:	f104 0314 	add.w	r3, r4, #20
 800848c:	f019 091f 	ands.w	r9, r9, #31
 8008490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008498:	d02b      	beq.n	80084f2 <__lshift+0xbe>
 800849a:	f1c9 0e20 	rsb	lr, r9, #32
 800849e:	468a      	mov	sl, r1
 80084a0:	2200      	movs	r2, #0
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	fa00 f009 	lsl.w	r0, r0, r9
 80084a8:	4310      	orrs	r0, r2
 80084aa:	f84a 0b04 	str.w	r0, [sl], #4
 80084ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b2:	459c      	cmp	ip, r3
 80084b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b8:	d8f3      	bhi.n	80084a2 <__lshift+0x6e>
 80084ba:	ebac 0304 	sub.w	r3, ip, r4
 80084be:	3b15      	subs	r3, #21
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	3304      	adds	r3, #4
 80084c6:	f104 0015 	add.w	r0, r4, #21
 80084ca:	4584      	cmp	ip, r0
 80084cc:	bf38      	it	cc
 80084ce:	2304      	movcc	r3, #4
 80084d0:	50ca      	str	r2, [r1, r3]
 80084d2:	b10a      	cbz	r2, 80084d8 <__lshift+0xa4>
 80084d4:	f108 0602 	add.w	r6, r8, #2
 80084d8:	3e01      	subs	r6, #1
 80084da:	4638      	mov	r0, r7
 80084dc:	612e      	str	r6, [r5, #16]
 80084de:	4621      	mov	r1, r4
 80084e0:	f7ff fdda 	bl	8008098 <_Bfree>
 80084e4:	4628      	mov	r0, r5
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ee:	3301      	adds	r3, #1
 80084f0:	e7c5      	b.n	800847e <__lshift+0x4a>
 80084f2:	3904      	subs	r1, #4
 80084f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80084fc:	459c      	cmp	ip, r3
 80084fe:	d8f9      	bhi.n	80084f4 <__lshift+0xc0>
 8008500:	e7ea      	b.n	80084d8 <__lshift+0xa4>
 8008502:	bf00      	nop
 8008504:	08009388 	.word	0x08009388
 8008508:	08009399 	.word	0x08009399

0800850c <__mcmp>:
 800850c:	690a      	ldr	r2, [r1, #16]
 800850e:	4603      	mov	r3, r0
 8008510:	6900      	ldr	r0, [r0, #16]
 8008512:	1a80      	subs	r0, r0, r2
 8008514:	b530      	push	{r4, r5, lr}
 8008516:	d10e      	bne.n	8008536 <__mcmp+0x2a>
 8008518:	3314      	adds	r3, #20
 800851a:	3114      	adds	r1, #20
 800851c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008520:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800852c:	4295      	cmp	r5, r2
 800852e:	d003      	beq.n	8008538 <__mcmp+0x2c>
 8008530:	d205      	bcs.n	800853e <__mcmp+0x32>
 8008532:	f04f 30ff 	mov.w	r0, #4294967295
 8008536:	bd30      	pop	{r4, r5, pc}
 8008538:	42a3      	cmp	r3, r4
 800853a:	d3f3      	bcc.n	8008524 <__mcmp+0x18>
 800853c:	e7fb      	b.n	8008536 <__mcmp+0x2a>
 800853e:	2001      	movs	r0, #1
 8008540:	e7f9      	b.n	8008536 <__mcmp+0x2a>
	...

08008544 <__mdiff>:
 8008544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	4689      	mov	r9, r1
 800854a:	4606      	mov	r6, r0
 800854c:	4611      	mov	r1, r2
 800854e:	4648      	mov	r0, r9
 8008550:	4614      	mov	r4, r2
 8008552:	f7ff ffdb 	bl	800850c <__mcmp>
 8008556:	1e05      	subs	r5, r0, #0
 8008558:	d112      	bne.n	8008580 <__mdiff+0x3c>
 800855a:	4629      	mov	r1, r5
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff fd5b 	bl	8008018 <_Balloc>
 8008562:	4602      	mov	r2, r0
 8008564:	b928      	cbnz	r0, 8008572 <__mdiff+0x2e>
 8008566:	4b3f      	ldr	r3, [pc, #252]	@ (8008664 <__mdiff+0x120>)
 8008568:	f240 2137 	movw	r1, #567	@ 0x237
 800856c:	483e      	ldr	r0, [pc, #248]	@ (8008668 <__mdiff+0x124>)
 800856e:	f000 fb11 	bl	8008b94 <__assert_func>
 8008572:	2301      	movs	r3, #1
 8008574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008578:	4610      	mov	r0, r2
 800857a:	b003      	add	sp, #12
 800857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008580:	bfbc      	itt	lt
 8008582:	464b      	movlt	r3, r9
 8008584:	46a1      	movlt	r9, r4
 8008586:	4630      	mov	r0, r6
 8008588:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800858c:	bfba      	itte	lt
 800858e:	461c      	movlt	r4, r3
 8008590:	2501      	movlt	r5, #1
 8008592:	2500      	movge	r5, #0
 8008594:	f7ff fd40 	bl	8008018 <_Balloc>
 8008598:	4602      	mov	r2, r0
 800859a:	b918      	cbnz	r0, 80085a4 <__mdiff+0x60>
 800859c:	4b31      	ldr	r3, [pc, #196]	@ (8008664 <__mdiff+0x120>)
 800859e:	f240 2145 	movw	r1, #581	@ 0x245
 80085a2:	e7e3      	b.n	800856c <__mdiff+0x28>
 80085a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085a8:	6926      	ldr	r6, [r4, #16]
 80085aa:	60c5      	str	r5, [r0, #12]
 80085ac:	f109 0310 	add.w	r3, r9, #16
 80085b0:	f109 0514 	add.w	r5, r9, #20
 80085b4:	f104 0e14 	add.w	lr, r4, #20
 80085b8:	f100 0b14 	add.w	fp, r0, #20
 80085bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	46d9      	mov	r9, fp
 80085c8:	f04f 0c00 	mov.w	ip, #0
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	fa1f f38a 	uxth.w	r3, sl
 80085dc:	4619      	mov	r1, r3
 80085de:	b283      	uxth	r3, r0
 80085e0:	1acb      	subs	r3, r1, r3
 80085e2:	0c00      	lsrs	r0, r0, #16
 80085e4:	4463      	add	r3, ip
 80085e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085f4:	4576      	cmp	r6, lr
 80085f6:	f849 3b04 	str.w	r3, [r9], #4
 80085fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085fe:	d8e5      	bhi.n	80085cc <__mdiff+0x88>
 8008600:	1b33      	subs	r3, r6, r4
 8008602:	3b15      	subs	r3, #21
 8008604:	f023 0303 	bic.w	r3, r3, #3
 8008608:	3415      	adds	r4, #21
 800860a:	3304      	adds	r3, #4
 800860c:	42a6      	cmp	r6, r4
 800860e:	bf38      	it	cc
 8008610:	2304      	movcc	r3, #4
 8008612:	441d      	add	r5, r3
 8008614:	445b      	add	r3, fp
 8008616:	461e      	mov	r6, r3
 8008618:	462c      	mov	r4, r5
 800861a:	4544      	cmp	r4, r8
 800861c:	d30e      	bcc.n	800863c <__mdiff+0xf8>
 800861e:	f108 0103 	add.w	r1, r8, #3
 8008622:	1b49      	subs	r1, r1, r5
 8008624:	f021 0103 	bic.w	r1, r1, #3
 8008628:	3d03      	subs	r5, #3
 800862a:	45a8      	cmp	r8, r5
 800862c:	bf38      	it	cc
 800862e:	2100      	movcc	r1, #0
 8008630:	440b      	add	r3, r1
 8008632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008636:	b191      	cbz	r1, 800865e <__mdiff+0x11a>
 8008638:	6117      	str	r7, [r2, #16]
 800863a:	e79d      	b.n	8008578 <__mdiff+0x34>
 800863c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008640:	46e6      	mov	lr, ip
 8008642:	0c08      	lsrs	r0, r1, #16
 8008644:	fa1c fc81 	uxtah	ip, ip, r1
 8008648:	4471      	add	r1, lr
 800864a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800864e:	b289      	uxth	r1, r1
 8008650:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008654:	f846 1b04 	str.w	r1, [r6], #4
 8008658:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800865c:	e7dd      	b.n	800861a <__mdiff+0xd6>
 800865e:	3f01      	subs	r7, #1
 8008660:	e7e7      	b.n	8008632 <__mdiff+0xee>
 8008662:	bf00      	nop
 8008664:	08009388 	.word	0x08009388
 8008668:	08009399 	.word	0x08009399

0800866c <__d2b>:
 800866c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008670:	460f      	mov	r7, r1
 8008672:	2101      	movs	r1, #1
 8008674:	ec59 8b10 	vmov	r8, r9, d0
 8008678:	4616      	mov	r6, r2
 800867a:	f7ff fccd 	bl	8008018 <_Balloc>
 800867e:	4604      	mov	r4, r0
 8008680:	b930      	cbnz	r0, 8008690 <__d2b+0x24>
 8008682:	4602      	mov	r2, r0
 8008684:	4b23      	ldr	r3, [pc, #140]	@ (8008714 <__d2b+0xa8>)
 8008686:	4824      	ldr	r0, [pc, #144]	@ (8008718 <__d2b+0xac>)
 8008688:	f240 310f 	movw	r1, #783	@ 0x30f
 800868c:	f000 fa82 	bl	8008b94 <__assert_func>
 8008690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008698:	b10d      	cbz	r5, 800869e <__d2b+0x32>
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	f1b8 0300 	subs.w	r3, r8, #0
 80086a4:	d023      	beq.n	80086ee <__d2b+0x82>
 80086a6:	4668      	mov	r0, sp
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	f7ff fd7c 	bl	80081a6 <__lo0bits>
 80086ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086b2:	b1d0      	cbz	r0, 80086ea <__d2b+0x7e>
 80086b4:	f1c0 0320 	rsb	r3, r0, #32
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	430b      	orrs	r3, r1
 80086be:	40c2      	lsrs	r2, r0
 80086c0:	6163      	str	r3, [r4, #20]
 80086c2:	9201      	str	r2, [sp, #4]
 80086c4:	9b01      	ldr	r3, [sp, #4]
 80086c6:	61a3      	str	r3, [r4, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bf0c      	ite	eq
 80086cc:	2201      	moveq	r2, #1
 80086ce:	2202      	movne	r2, #2
 80086d0:	6122      	str	r2, [r4, #16]
 80086d2:	b1a5      	cbz	r5, 80086fe <__d2b+0x92>
 80086d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086d8:	4405      	add	r5, r0
 80086da:	603d      	str	r5, [r7, #0]
 80086dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086e0:	6030      	str	r0, [r6, #0]
 80086e2:	4620      	mov	r0, r4
 80086e4:	b003      	add	sp, #12
 80086e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ea:	6161      	str	r1, [r4, #20]
 80086ec:	e7ea      	b.n	80086c4 <__d2b+0x58>
 80086ee:	a801      	add	r0, sp, #4
 80086f0:	f7ff fd59 	bl	80081a6 <__lo0bits>
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	6163      	str	r3, [r4, #20]
 80086f8:	3020      	adds	r0, #32
 80086fa:	2201      	movs	r2, #1
 80086fc:	e7e8      	b.n	80086d0 <__d2b+0x64>
 80086fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008706:	6038      	str	r0, [r7, #0]
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f7ff fd2d 	bl	8008168 <__hi0bits>
 800870e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008712:	e7e5      	b.n	80086e0 <__d2b+0x74>
 8008714:	08009388 	.word	0x08009388
 8008718:	08009399 	.word	0x08009399

0800871c <__ssputs_r>:
 800871c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	688e      	ldr	r6, [r1, #8]
 8008722:	461f      	mov	r7, r3
 8008724:	42be      	cmp	r6, r7
 8008726:	680b      	ldr	r3, [r1, #0]
 8008728:	4682      	mov	sl, r0
 800872a:	460c      	mov	r4, r1
 800872c:	4690      	mov	r8, r2
 800872e:	d82d      	bhi.n	800878c <__ssputs_r+0x70>
 8008730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008738:	d026      	beq.n	8008788 <__ssputs_r+0x6c>
 800873a:	6965      	ldr	r5, [r4, #20]
 800873c:	6909      	ldr	r1, [r1, #16]
 800873e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008742:	eba3 0901 	sub.w	r9, r3, r1
 8008746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800874a:	1c7b      	adds	r3, r7, #1
 800874c:	444b      	add	r3, r9
 800874e:	106d      	asrs	r5, r5, #1
 8008750:	429d      	cmp	r5, r3
 8008752:	bf38      	it	cc
 8008754:	461d      	movcc	r5, r3
 8008756:	0553      	lsls	r3, r2, #21
 8008758:	d527      	bpl.n	80087aa <__ssputs_r+0x8e>
 800875a:	4629      	mov	r1, r5
 800875c:	f7ff fbd0 	bl	8007f00 <_malloc_r>
 8008760:	4606      	mov	r6, r0
 8008762:	b360      	cbz	r0, 80087be <__ssputs_r+0xa2>
 8008764:	6921      	ldr	r1, [r4, #16]
 8008766:	464a      	mov	r2, r9
 8008768:	f000 fa06 	bl	8008b78 <memcpy>
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	6126      	str	r6, [r4, #16]
 800877a:	6165      	str	r5, [r4, #20]
 800877c:	444e      	add	r6, r9
 800877e:	eba5 0509 	sub.w	r5, r5, r9
 8008782:	6026      	str	r6, [r4, #0]
 8008784:	60a5      	str	r5, [r4, #8]
 8008786:	463e      	mov	r6, r7
 8008788:	42be      	cmp	r6, r7
 800878a:	d900      	bls.n	800878e <__ssputs_r+0x72>
 800878c:	463e      	mov	r6, r7
 800878e:	6820      	ldr	r0, [r4, #0]
 8008790:	4632      	mov	r2, r6
 8008792:	4641      	mov	r1, r8
 8008794:	f000 f9c6 	bl	8008b24 <memmove>
 8008798:	68a3      	ldr	r3, [r4, #8]
 800879a:	1b9b      	subs	r3, r3, r6
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	4433      	add	r3, r6
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	2000      	movs	r0, #0
 80087a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087aa:	462a      	mov	r2, r5
 80087ac:	f000 fa36 	bl	8008c1c <_realloc_r>
 80087b0:	4606      	mov	r6, r0
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d1e0      	bne.n	8008778 <__ssputs_r+0x5c>
 80087b6:	6921      	ldr	r1, [r4, #16]
 80087b8:	4650      	mov	r0, sl
 80087ba:	f7ff fb2d 	bl	8007e18 <_free_r>
 80087be:	230c      	movs	r3, #12
 80087c0:	f8ca 3000 	str.w	r3, [sl]
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	e7e9      	b.n	80087a6 <__ssputs_r+0x8a>
	...

080087d4 <_svfiprintf_r>:
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	4698      	mov	r8, r3
 80087da:	898b      	ldrh	r3, [r1, #12]
 80087dc:	061b      	lsls	r3, r3, #24
 80087de:	b09d      	sub	sp, #116	@ 0x74
 80087e0:	4607      	mov	r7, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	4614      	mov	r4, r2
 80087e6:	d510      	bpl.n	800880a <_svfiprintf_r+0x36>
 80087e8:	690b      	ldr	r3, [r1, #16]
 80087ea:	b973      	cbnz	r3, 800880a <_svfiprintf_r+0x36>
 80087ec:	2140      	movs	r1, #64	@ 0x40
 80087ee:	f7ff fb87 	bl	8007f00 <_malloc_r>
 80087f2:	6028      	str	r0, [r5, #0]
 80087f4:	6128      	str	r0, [r5, #16]
 80087f6:	b930      	cbnz	r0, 8008806 <_svfiprintf_r+0x32>
 80087f8:	230c      	movs	r3, #12
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b01d      	add	sp, #116	@ 0x74
 8008802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008806:	2340      	movs	r3, #64	@ 0x40
 8008808:	616b      	str	r3, [r5, #20]
 800880a:	2300      	movs	r3, #0
 800880c:	9309      	str	r3, [sp, #36]	@ 0x24
 800880e:	2320      	movs	r3, #32
 8008810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008814:	f8cd 800c 	str.w	r8, [sp, #12]
 8008818:	2330      	movs	r3, #48	@ 0x30
 800881a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089b8 <_svfiprintf_r+0x1e4>
 800881e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008822:	f04f 0901 	mov.w	r9, #1
 8008826:	4623      	mov	r3, r4
 8008828:	469a      	mov	sl, r3
 800882a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882e:	b10a      	cbz	r2, 8008834 <_svfiprintf_r+0x60>
 8008830:	2a25      	cmp	r2, #37	@ 0x25
 8008832:	d1f9      	bne.n	8008828 <_svfiprintf_r+0x54>
 8008834:	ebba 0b04 	subs.w	fp, sl, r4
 8008838:	d00b      	beq.n	8008852 <_svfiprintf_r+0x7e>
 800883a:	465b      	mov	r3, fp
 800883c:	4622      	mov	r2, r4
 800883e:	4629      	mov	r1, r5
 8008840:	4638      	mov	r0, r7
 8008842:	f7ff ff6b 	bl	800871c <__ssputs_r>
 8008846:	3001      	adds	r0, #1
 8008848:	f000 80a7 	beq.w	800899a <_svfiprintf_r+0x1c6>
 800884c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800884e:	445a      	add	r2, fp
 8008850:	9209      	str	r2, [sp, #36]	@ 0x24
 8008852:	f89a 3000 	ldrb.w	r3, [sl]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 809f 	beq.w	800899a <_svfiprintf_r+0x1c6>
 800885c:	2300      	movs	r3, #0
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008866:	f10a 0a01 	add.w	sl, sl, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	9307      	str	r3, [sp, #28]
 800886e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008872:	931a      	str	r3, [sp, #104]	@ 0x68
 8008874:	4654      	mov	r4, sl
 8008876:	2205      	movs	r2, #5
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	484e      	ldr	r0, [pc, #312]	@ (80089b8 <_svfiprintf_r+0x1e4>)
 800887e:	f7f7 fcb7 	bl	80001f0 <memchr>
 8008882:	9a04      	ldr	r2, [sp, #16]
 8008884:	b9d8      	cbnz	r0, 80088be <_svfiprintf_r+0xea>
 8008886:	06d0      	lsls	r0, r2, #27
 8008888:	bf44      	itt	mi
 800888a:	2320      	movmi	r3, #32
 800888c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008890:	0711      	lsls	r1, r2, #28
 8008892:	bf44      	itt	mi
 8008894:	232b      	movmi	r3, #43	@ 0x2b
 8008896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800889a:	f89a 3000 	ldrb.w	r3, [sl]
 800889e:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a0:	d015      	beq.n	80088ce <_svfiprintf_r+0xfa>
 80088a2:	9a07      	ldr	r2, [sp, #28]
 80088a4:	4654      	mov	r4, sl
 80088a6:	2000      	movs	r0, #0
 80088a8:	f04f 0c0a 	mov.w	ip, #10
 80088ac:	4621      	mov	r1, r4
 80088ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b2:	3b30      	subs	r3, #48	@ 0x30
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d94b      	bls.n	8008950 <_svfiprintf_r+0x17c>
 80088b8:	b1b0      	cbz	r0, 80088e8 <_svfiprintf_r+0x114>
 80088ba:	9207      	str	r2, [sp, #28]
 80088bc:	e014      	b.n	80088e8 <_svfiprintf_r+0x114>
 80088be:	eba0 0308 	sub.w	r3, r0, r8
 80088c2:	fa09 f303 	lsl.w	r3, r9, r3
 80088c6:	4313      	orrs	r3, r2
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	46a2      	mov	sl, r4
 80088cc:	e7d2      	b.n	8008874 <_svfiprintf_r+0xa0>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	1d19      	adds	r1, r3, #4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	9103      	str	r1, [sp, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bfbb      	ittet	lt
 80088da:	425b      	neglt	r3, r3
 80088dc:	f042 0202 	orrlt.w	r2, r2, #2
 80088e0:	9307      	strge	r3, [sp, #28]
 80088e2:	9307      	strlt	r3, [sp, #28]
 80088e4:	bfb8      	it	lt
 80088e6:	9204      	strlt	r2, [sp, #16]
 80088e8:	7823      	ldrb	r3, [r4, #0]
 80088ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80088ec:	d10a      	bne.n	8008904 <_svfiprintf_r+0x130>
 80088ee:	7863      	ldrb	r3, [r4, #1]
 80088f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088f2:	d132      	bne.n	800895a <_svfiprintf_r+0x186>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	1d1a      	adds	r2, r3, #4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	9203      	str	r2, [sp, #12]
 80088fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008900:	3402      	adds	r4, #2
 8008902:	9305      	str	r3, [sp, #20]
 8008904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089c8 <_svfiprintf_r+0x1f4>
 8008908:	7821      	ldrb	r1, [r4, #0]
 800890a:	2203      	movs	r2, #3
 800890c:	4650      	mov	r0, sl
 800890e:	f7f7 fc6f 	bl	80001f0 <memchr>
 8008912:	b138      	cbz	r0, 8008924 <_svfiprintf_r+0x150>
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	eba0 000a 	sub.w	r0, r0, sl
 800891a:	2240      	movs	r2, #64	@ 0x40
 800891c:	4082      	lsls	r2, r0
 800891e:	4313      	orrs	r3, r2
 8008920:	3401      	adds	r4, #1
 8008922:	9304      	str	r3, [sp, #16]
 8008924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008928:	4824      	ldr	r0, [pc, #144]	@ (80089bc <_svfiprintf_r+0x1e8>)
 800892a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800892e:	2206      	movs	r2, #6
 8008930:	f7f7 fc5e 	bl	80001f0 <memchr>
 8008934:	2800      	cmp	r0, #0
 8008936:	d036      	beq.n	80089a6 <_svfiprintf_r+0x1d2>
 8008938:	4b21      	ldr	r3, [pc, #132]	@ (80089c0 <_svfiprintf_r+0x1ec>)
 800893a:	bb1b      	cbnz	r3, 8008984 <_svfiprintf_r+0x1b0>
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	3307      	adds	r3, #7
 8008940:	f023 0307 	bic.w	r3, r3, #7
 8008944:	3308      	adds	r3, #8
 8008946:	9303      	str	r3, [sp, #12]
 8008948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894a:	4433      	add	r3, r6
 800894c:	9309      	str	r3, [sp, #36]	@ 0x24
 800894e:	e76a      	b.n	8008826 <_svfiprintf_r+0x52>
 8008950:	fb0c 3202 	mla	r2, ip, r2, r3
 8008954:	460c      	mov	r4, r1
 8008956:	2001      	movs	r0, #1
 8008958:	e7a8      	b.n	80088ac <_svfiprintf_r+0xd8>
 800895a:	2300      	movs	r3, #0
 800895c:	3401      	adds	r4, #1
 800895e:	9305      	str	r3, [sp, #20]
 8008960:	4619      	mov	r1, r3
 8008962:	f04f 0c0a 	mov.w	ip, #10
 8008966:	4620      	mov	r0, r4
 8008968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800896c:	3a30      	subs	r2, #48	@ 0x30
 800896e:	2a09      	cmp	r2, #9
 8008970:	d903      	bls.n	800897a <_svfiprintf_r+0x1a6>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0c6      	beq.n	8008904 <_svfiprintf_r+0x130>
 8008976:	9105      	str	r1, [sp, #20]
 8008978:	e7c4      	b.n	8008904 <_svfiprintf_r+0x130>
 800897a:	fb0c 2101 	mla	r1, ip, r1, r2
 800897e:	4604      	mov	r4, r0
 8008980:	2301      	movs	r3, #1
 8008982:	e7f0      	b.n	8008966 <_svfiprintf_r+0x192>
 8008984:	ab03      	add	r3, sp, #12
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	462a      	mov	r2, r5
 800898a:	4b0e      	ldr	r3, [pc, #56]	@ (80089c4 <_svfiprintf_r+0x1f0>)
 800898c:	a904      	add	r1, sp, #16
 800898e:	4638      	mov	r0, r7
 8008990:	f7fd fe98 	bl	80066c4 <_printf_float>
 8008994:	1c42      	adds	r2, r0, #1
 8008996:	4606      	mov	r6, r0
 8008998:	d1d6      	bne.n	8008948 <_svfiprintf_r+0x174>
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	065b      	lsls	r3, r3, #25
 800899e:	f53f af2d 	bmi.w	80087fc <_svfiprintf_r+0x28>
 80089a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089a4:	e72c      	b.n	8008800 <_svfiprintf_r+0x2c>
 80089a6:	ab03      	add	r3, sp, #12
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	462a      	mov	r2, r5
 80089ac:	4b05      	ldr	r3, [pc, #20]	@ (80089c4 <_svfiprintf_r+0x1f0>)
 80089ae:	a904      	add	r1, sp, #16
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7fe f91f 	bl	8006bf4 <_printf_i>
 80089b6:	e7ed      	b.n	8008994 <_svfiprintf_r+0x1c0>
 80089b8:	080094f0 	.word	0x080094f0
 80089bc:	080094fa 	.word	0x080094fa
 80089c0:	080066c5 	.word	0x080066c5
 80089c4:	0800871d 	.word	0x0800871d
 80089c8:	080094f6 	.word	0x080094f6

080089cc <__sflush_r>:
 80089cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	0716      	lsls	r6, r2, #28
 80089d6:	4605      	mov	r5, r0
 80089d8:	460c      	mov	r4, r1
 80089da:	d454      	bmi.n	8008a86 <__sflush_r+0xba>
 80089dc:	684b      	ldr	r3, [r1, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	dc02      	bgt.n	80089e8 <__sflush_r+0x1c>
 80089e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dd48      	ble.n	8008a7a <__sflush_r+0xae>
 80089e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089ea:	2e00      	cmp	r6, #0
 80089ec:	d045      	beq.n	8008a7a <__sflush_r+0xae>
 80089ee:	2300      	movs	r3, #0
 80089f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089f4:	682f      	ldr	r7, [r5, #0]
 80089f6:	6a21      	ldr	r1, [r4, #32]
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	d030      	beq.n	8008a5e <__sflush_r+0x92>
 80089fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	0759      	lsls	r1, r3, #29
 8008a02:	d505      	bpl.n	8008a10 <__sflush_r+0x44>
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a0a:	b10b      	cbz	r3, 8008a10 <__sflush_r+0x44>
 8008a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	2300      	movs	r3, #0
 8008a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a14:	6a21      	ldr	r1, [r4, #32]
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b0      	blx	r6
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	d106      	bne.n	8008a2e <__sflush_r+0x62>
 8008a20:	6829      	ldr	r1, [r5, #0]
 8008a22:	291d      	cmp	r1, #29
 8008a24:	d82b      	bhi.n	8008a7e <__sflush_r+0xb2>
 8008a26:	4a2a      	ldr	r2, [pc, #168]	@ (8008ad0 <__sflush_r+0x104>)
 8008a28:	410a      	asrs	r2, r1
 8008a2a:	07d6      	lsls	r6, r2, #31
 8008a2c:	d427      	bmi.n	8008a7e <__sflush_r+0xb2>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	6062      	str	r2, [r4, #4]
 8008a32:	04d9      	lsls	r1, r3, #19
 8008a34:	6922      	ldr	r2, [r4, #16]
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	d504      	bpl.n	8008a44 <__sflush_r+0x78>
 8008a3a:	1c42      	adds	r2, r0, #1
 8008a3c:	d101      	bne.n	8008a42 <__sflush_r+0x76>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b903      	cbnz	r3, 8008a44 <__sflush_r+0x78>
 8008a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a46:	602f      	str	r7, [r5, #0]
 8008a48:	b1b9      	cbz	r1, 8008a7a <__sflush_r+0xae>
 8008a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a4e:	4299      	cmp	r1, r3
 8008a50:	d002      	beq.n	8008a58 <__sflush_r+0x8c>
 8008a52:	4628      	mov	r0, r5
 8008a54:	f7ff f9e0 	bl	8007e18 <_free_r>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a5c:	e00d      	b.n	8008a7a <__sflush_r+0xae>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b0      	blx	r6
 8008a64:	4602      	mov	r2, r0
 8008a66:	1c50      	adds	r0, r2, #1
 8008a68:	d1c9      	bne.n	80089fe <__sflush_r+0x32>
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0c6      	beq.n	80089fe <__sflush_r+0x32>
 8008a70:	2b1d      	cmp	r3, #29
 8008a72:	d001      	beq.n	8008a78 <__sflush_r+0xac>
 8008a74:	2b16      	cmp	r3, #22
 8008a76:	d11e      	bne.n	8008ab6 <__sflush_r+0xea>
 8008a78:	602f      	str	r7, [r5, #0]
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	e022      	b.n	8008ac4 <__sflush_r+0xf8>
 8008a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a82:	b21b      	sxth	r3, r3
 8008a84:	e01b      	b.n	8008abe <__sflush_r+0xf2>
 8008a86:	690f      	ldr	r7, [r1, #16]
 8008a88:	2f00      	cmp	r7, #0
 8008a8a:	d0f6      	beq.n	8008a7a <__sflush_r+0xae>
 8008a8c:	0793      	lsls	r3, r2, #30
 8008a8e:	680e      	ldr	r6, [r1, #0]
 8008a90:	bf08      	it	eq
 8008a92:	694b      	ldreq	r3, [r1, #20]
 8008a94:	600f      	str	r7, [r1, #0]
 8008a96:	bf18      	it	ne
 8008a98:	2300      	movne	r3, #0
 8008a9a:	eba6 0807 	sub.w	r8, r6, r7
 8008a9e:	608b      	str	r3, [r1, #8]
 8008aa0:	f1b8 0f00 	cmp.w	r8, #0
 8008aa4:	dde9      	ble.n	8008a7a <__sflush_r+0xae>
 8008aa6:	6a21      	ldr	r1, [r4, #32]
 8008aa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aaa:	4643      	mov	r3, r8
 8008aac:	463a      	mov	r2, r7
 8008aae:	4628      	mov	r0, r5
 8008ab0:	47b0      	blx	r6
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	dc08      	bgt.n	8008ac8 <__sflush_r+0xfc>
 8008ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac8:	4407      	add	r7, r0
 8008aca:	eba8 0800 	sub.w	r8, r8, r0
 8008ace:	e7e7      	b.n	8008aa0 <__sflush_r+0xd4>
 8008ad0:	dfbffffe 	.word	0xdfbffffe

08008ad4 <_fflush_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	690b      	ldr	r3, [r1, #16]
 8008ad8:	4605      	mov	r5, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	b913      	cbnz	r3, 8008ae4 <_fflush_r+0x10>
 8008ade:	2500      	movs	r5, #0
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	b118      	cbz	r0, 8008aee <_fflush_r+0x1a>
 8008ae6:	6a03      	ldr	r3, [r0, #32]
 8008ae8:	b90b      	cbnz	r3, 8008aee <_fflush_r+0x1a>
 8008aea:	f7fe fa2f 	bl	8006f4c <__sinit>
 8008aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0f3      	beq.n	8008ade <_fflush_r+0xa>
 8008af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008af8:	07d0      	lsls	r0, r2, #31
 8008afa:	d404      	bmi.n	8008b06 <_fflush_r+0x32>
 8008afc:	0599      	lsls	r1, r3, #22
 8008afe:	d402      	bmi.n	8008b06 <_fflush_r+0x32>
 8008b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b02:	f7fe fb3a 	bl	800717a <__retarget_lock_acquire_recursive>
 8008b06:	4628      	mov	r0, r5
 8008b08:	4621      	mov	r1, r4
 8008b0a:	f7ff ff5f 	bl	80089cc <__sflush_r>
 8008b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b10:	07da      	lsls	r2, r3, #31
 8008b12:	4605      	mov	r5, r0
 8008b14:	d4e4      	bmi.n	8008ae0 <_fflush_r+0xc>
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	059b      	lsls	r3, r3, #22
 8008b1a:	d4e1      	bmi.n	8008ae0 <_fflush_r+0xc>
 8008b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b1e:	f7fe fb2d 	bl	800717c <__retarget_lock_release_recursive>
 8008b22:	e7dd      	b.n	8008ae0 <_fflush_r+0xc>

08008b24 <memmove>:
 8008b24:	4288      	cmp	r0, r1
 8008b26:	b510      	push	{r4, lr}
 8008b28:	eb01 0402 	add.w	r4, r1, r2
 8008b2c:	d902      	bls.n	8008b34 <memmove+0x10>
 8008b2e:	4284      	cmp	r4, r0
 8008b30:	4623      	mov	r3, r4
 8008b32:	d807      	bhi.n	8008b44 <memmove+0x20>
 8008b34:	1e43      	subs	r3, r0, #1
 8008b36:	42a1      	cmp	r1, r4
 8008b38:	d008      	beq.n	8008b4c <memmove+0x28>
 8008b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b42:	e7f8      	b.n	8008b36 <memmove+0x12>
 8008b44:	4402      	add	r2, r0
 8008b46:	4601      	mov	r1, r0
 8008b48:	428a      	cmp	r2, r1
 8008b4a:	d100      	bne.n	8008b4e <memmove+0x2a>
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b56:	e7f7      	b.n	8008b48 <memmove+0x24>

08008b58 <_sbrk_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d06      	ldr	r5, [pc, #24]	@ (8008b74 <_sbrk_r+0x1c>)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	f7f8 feb0 	bl	80018c8 <_sbrk>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	d102      	bne.n	8008b72 <_sbrk_r+0x1a>
 8008b6c:	682b      	ldr	r3, [r5, #0]
 8008b6e:	b103      	cbz	r3, 8008b72 <_sbrk_r+0x1a>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	200004ec 	.word	0x200004ec

08008b78 <memcpy>:
 8008b78:	440a      	add	r2, r1
 8008b7a:	4291      	cmp	r1, r2
 8008b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b80:	d100      	bne.n	8008b84 <memcpy+0xc>
 8008b82:	4770      	bx	lr
 8008b84:	b510      	push	{r4, lr}
 8008b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	d1f9      	bne.n	8008b86 <memcpy+0xe>
 8008b92:	bd10      	pop	{r4, pc}

08008b94 <__assert_func>:
 8008b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b96:	4614      	mov	r4, r2
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b09      	ldr	r3, [pc, #36]	@ (8008bc0 <__assert_func+0x2c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	68d8      	ldr	r0, [r3, #12]
 8008ba2:	b954      	cbnz	r4, 8008bba <__assert_func+0x26>
 8008ba4:	4b07      	ldr	r3, [pc, #28]	@ (8008bc4 <__assert_func+0x30>)
 8008ba6:	461c      	mov	r4, r3
 8008ba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bac:	9100      	str	r1, [sp, #0]
 8008bae:	462b      	mov	r3, r5
 8008bb0:	4905      	ldr	r1, [pc, #20]	@ (8008bc8 <__assert_func+0x34>)
 8008bb2:	f000 f86f 	bl	8008c94 <fiprintf>
 8008bb6:	f000 f87f 	bl	8008cb8 <abort>
 8008bba:	4b04      	ldr	r3, [pc, #16]	@ (8008bcc <__assert_func+0x38>)
 8008bbc:	e7f4      	b.n	8008ba8 <__assert_func+0x14>
 8008bbe:	bf00      	nop
 8008bc0:	20000020 	.word	0x20000020
 8008bc4:	08009546 	.word	0x08009546
 8008bc8:	08009518 	.word	0x08009518
 8008bcc:	0800950b 	.word	0x0800950b

08008bd0 <_calloc_r>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	fba1 5402 	umull	r5, r4, r1, r2
 8008bd6:	b93c      	cbnz	r4, 8008be8 <_calloc_r+0x18>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7ff f991 	bl	8007f00 <_malloc_r>
 8008bde:	4606      	mov	r6, r0
 8008be0:	b928      	cbnz	r0, 8008bee <_calloc_r+0x1e>
 8008be2:	2600      	movs	r6, #0
 8008be4:	4630      	mov	r0, r6
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	220c      	movs	r2, #12
 8008bea:	6002      	str	r2, [r0, #0]
 8008bec:	e7f9      	b.n	8008be2 <_calloc_r+0x12>
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	f7fe fa44 	bl	800707e <memset>
 8008bf6:	e7f5      	b.n	8008be4 <_calloc_r+0x14>

08008bf8 <__ascii_mbtowc>:
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	b901      	cbnz	r1, 8008bfe <__ascii_mbtowc+0x6>
 8008bfc:	a901      	add	r1, sp, #4
 8008bfe:	b142      	cbz	r2, 8008c12 <__ascii_mbtowc+0x1a>
 8008c00:	b14b      	cbz	r3, 8008c16 <__ascii_mbtowc+0x1e>
 8008c02:	7813      	ldrb	r3, [r2, #0]
 8008c04:	600b      	str	r3, [r1, #0]
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	1e10      	subs	r0, r2, #0
 8008c0a:	bf18      	it	ne
 8008c0c:	2001      	movne	r0, #1
 8008c0e:	b002      	add	sp, #8
 8008c10:	4770      	bx	lr
 8008c12:	4610      	mov	r0, r2
 8008c14:	e7fb      	b.n	8008c0e <__ascii_mbtowc+0x16>
 8008c16:	f06f 0001 	mvn.w	r0, #1
 8008c1a:	e7f8      	b.n	8008c0e <__ascii_mbtowc+0x16>

08008c1c <_realloc_r>:
 8008c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c20:	4680      	mov	r8, r0
 8008c22:	4615      	mov	r5, r2
 8008c24:	460c      	mov	r4, r1
 8008c26:	b921      	cbnz	r1, 8008c32 <_realloc_r+0x16>
 8008c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	f7ff b967 	b.w	8007f00 <_malloc_r>
 8008c32:	b92a      	cbnz	r2, 8008c40 <_realloc_r+0x24>
 8008c34:	f7ff f8f0 	bl	8007e18 <_free_r>
 8008c38:	2400      	movs	r4, #0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c40:	f000 f841 	bl	8008cc6 <_malloc_usable_size_r>
 8008c44:	4285      	cmp	r5, r0
 8008c46:	4606      	mov	r6, r0
 8008c48:	d802      	bhi.n	8008c50 <_realloc_r+0x34>
 8008c4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c4e:	d8f4      	bhi.n	8008c3a <_realloc_r+0x1e>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4640      	mov	r0, r8
 8008c54:	f7ff f954 	bl	8007f00 <_malloc_r>
 8008c58:	4607      	mov	r7, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d0ec      	beq.n	8008c38 <_realloc_r+0x1c>
 8008c5e:	42b5      	cmp	r5, r6
 8008c60:	462a      	mov	r2, r5
 8008c62:	4621      	mov	r1, r4
 8008c64:	bf28      	it	cs
 8008c66:	4632      	movcs	r2, r6
 8008c68:	f7ff ff86 	bl	8008b78 <memcpy>
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f7ff f8d2 	bl	8007e18 <_free_r>
 8008c74:	463c      	mov	r4, r7
 8008c76:	e7e0      	b.n	8008c3a <_realloc_r+0x1e>

08008c78 <__ascii_wctomb>:
 8008c78:	4603      	mov	r3, r0
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	b141      	cbz	r1, 8008c90 <__ascii_wctomb+0x18>
 8008c7e:	2aff      	cmp	r2, #255	@ 0xff
 8008c80:	d904      	bls.n	8008c8c <__ascii_wctomb+0x14>
 8008c82:	228a      	movs	r2, #138	@ 0x8a
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8a:	4770      	bx	lr
 8008c8c:	700a      	strb	r2, [r1, #0]
 8008c8e:	2001      	movs	r0, #1
 8008c90:	4770      	bx	lr
	...

08008c94 <fiprintf>:
 8008c94:	b40e      	push	{r1, r2, r3}
 8008c96:	b503      	push	{r0, r1, lr}
 8008c98:	4601      	mov	r1, r0
 8008c9a:	ab03      	add	r3, sp, #12
 8008c9c:	4805      	ldr	r0, [pc, #20]	@ (8008cb4 <fiprintf+0x20>)
 8008c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca2:	6800      	ldr	r0, [r0, #0]
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	f000 f83f 	bl	8008d28 <_vfiprintf_r>
 8008caa:	b002      	add	sp, #8
 8008cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cb0:	b003      	add	sp, #12
 8008cb2:	4770      	bx	lr
 8008cb4:	20000020 	.word	0x20000020

08008cb8 <abort>:
 8008cb8:	b508      	push	{r3, lr}
 8008cba:	2006      	movs	r0, #6
 8008cbc:	f000 fa08 	bl	80090d0 <raise>
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f7f8 fd88 	bl	80017d6 <_exit>

08008cc6 <_malloc_usable_size_r>:
 8008cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cca:	1f18      	subs	r0, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	bfbc      	itt	lt
 8008cd0:	580b      	ldrlt	r3, [r1, r0]
 8008cd2:	18c0      	addlt	r0, r0, r3
 8008cd4:	4770      	bx	lr

08008cd6 <__sfputc_r>:
 8008cd6:	6893      	ldr	r3, [r2, #8]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	b410      	push	{r4}
 8008cde:	6093      	str	r3, [r2, #8]
 8008ce0:	da08      	bge.n	8008cf4 <__sfputc_r+0x1e>
 8008ce2:	6994      	ldr	r4, [r2, #24]
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	db01      	blt.n	8008cec <__sfputc_r+0x16>
 8008ce8:	290a      	cmp	r1, #10
 8008cea:	d103      	bne.n	8008cf4 <__sfputc_r+0x1e>
 8008cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf0:	f000 b932 	b.w	8008f58 <__swbuf_r>
 8008cf4:	6813      	ldr	r3, [r2, #0]
 8008cf6:	1c58      	adds	r0, r3, #1
 8008cf8:	6010      	str	r0, [r2, #0]
 8008cfa:	7019      	strb	r1, [r3, #0]
 8008cfc:	4608      	mov	r0, r1
 8008cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <__sfputs_r>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	4606      	mov	r6, r0
 8008d08:	460f      	mov	r7, r1
 8008d0a:	4614      	mov	r4, r2
 8008d0c:	18d5      	adds	r5, r2, r3
 8008d0e:	42ac      	cmp	r4, r5
 8008d10:	d101      	bne.n	8008d16 <__sfputs_r+0x12>
 8008d12:	2000      	movs	r0, #0
 8008d14:	e007      	b.n	8008d26 <__sfputs_r+0x22>
 8008d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff ffda 	bl	8008cd6 <__sfputc_r>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	d1f3      	bne.n	8008d0e <__sfputs_r+0xa>
 8008d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d28 <_vfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	b09d      	sub	sp, #116	@ 0x74
 8008d30:	4614      	mov	r4, r2
 8008d32:	4698      	mov	r8, r3
 8008d34:	4606      	mov	r6, r0
 8008d36:	b118      	cbz	r0, 8008d40 <_vfiprintf_r+0x18>
 8008d38:	6a03      	ldr	r3, [r0, #32]
 8008d3a:	b90b      	cbnz	r3, 8008d40 <_vfiprintf_r+0x18>
 8008d3c:	f7fe f906 	bl	8006f4c <__sinit>
 8008d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d42:	07d9      	lsls	r1, r3, #31
 8008d44:	d405      	bmi.n	8008d52 <_vfiprintf_r+0x2a>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	059a      	lsls	r2, r3, #22
 8008d4a:	d402      	bmi.n	8008d52 <_vfiprintf_r+0x2a>
 8008d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d4e:	f7fe fa14 	bl	800717a <__retarget_lock_acquire_recursive>
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	071b      	lsls	r3, r3, #28
 8008d56:	d501      	bpl.n	8008d5c <_vfiprintf_r+0x34>
 8008d58:	692b      	ldr	r3, [r5, #16]
 8008d5a:	b99b      	cbnz	r3, 8008d84 <_vfiprintf_r+0x5c>
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f000 f938 	bl	8008fd4 <__swsetup_r>
 8008d64:	b170      	cbz	r0, 8008d84 <_vfiprintf_r+0x5c>
 8008d66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d68:	07dc      	lsls	r4, r3, #31
 8008d6a:	d504      	bpl.n	8008d76 <_vfiprintf_r+0x4e>
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	b01d      	add	sp, #116	@ 0x74
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	0598      	lsls	r0, r3, #22
 8008d7a:	d4f7      	bmi.n	8008d6c <_vfiprintf_r+0x44>
 8008d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d7e:	f7fe f9fd 	bl	800717c <__retarget_lock_release_recursive>
 8008d82:	e7f3      	b.n	8008d6c <_vfiprintf_r+0x44>
 8008d84:	2300      	movs	r3, #0
 8008d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d88:	2320      	movs	r3, #32
 8008d8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d92:	2330      	movs	r3, #48	@ 0x30
 8008d94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f44 <_vfiprintf_r+0x21c>
 8008d98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d9c:	f04f 0901 	mov.w	r9, #1
 8008da0:	4623      	mov	r3, r4
 8008da2:	469a      	mov	sl, r3
 8008da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008da8:	b10a      	cbz	r2, 8008dae <_vfiprintf_r+0x86>
 8008daa:	2a25      	cmp	r2, #37	@ 0x25
 8008dac:	d1f9      	bne.n	8008da2 <_vfiprintf_r+0x7a>
 8008dae:	ebba 0b04 	subs.w	fp, sl, r4
 8008db2:	d00b      	beq.n	8008dcc <_vfiprintf_r+0xa4>
 8008db4:	465b      	mov	r3, fp
 8008db6:	4622      	mov	r2, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff ffa2 	bl	8008d04 <__sfputs_r>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	f000 80a7 	beq.w	8008f14 <_vfiprintf_r+0x1ec>
 8008dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dc8:	445a      	add	r2, fp
 8008dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 809f 	beq.w	8008f14 <_vfiprintf_r+0x1ec>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de0:	f10a 0a01 	add.w	sl, sl, #1
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	9307      	str	r3, [sp, #28]
 8008de8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dec:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dee:	4654      	mov	r4, sl
 8008df0:	2205      	movs	r2, #5
 8008df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df6:	4853      	ldr	r0, [pc, #332]	@ (8008f44 <_vfiprintf_r+0x21c>)
 8008df8:	f7f7 f9fa 	bl	80001f0 <memchr>
 8008dfc:	9a04      	ldr	r2, [sp, #16]
 8008dfe:	b9d8      	cbnz	r0, 8008e38 <_vfiprintf_r+0x110>
 8008e00:	06d1      	lsls	r1, r2, #27
 8008e02:	bf44      	itt	mi
 8008e04:	2320      	movmi	r3, #32
 8008e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e0a:	0713      	lsls	r3, r2, #28
 8008e0c:	bf44      	itt	mi
 8008e0e:	232b      	movmi	r3, #43	@ 0x2b
 8008e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e14:	f89a 3000 	ldrb.w	r3, [sl]
 8008e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e1a:	d015      	beq.n	8008e48 <_vfiprintf_r+0x120>
 8008e1c:	9a07      	ldr	r2, [sp, #28]
 8008e1e:	4654      	mov	r4, sl
 8008e20:	2000      	movs	r0, #0
 8008e22:	f04f 0c0a 	mov.w	ip, #10
 8008e26:	4621      	mov	r1, r4
 8008e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e2c:	3b30      	subs	r3, #48	@ 0x30
 8008e2e:	2b09      	cmp	r3, #9
 8008e30:	d94b      	bls.n	8008eca <_vfiprintf_r+0x1a2>
 8008e32:	b1b0      	cbz	r0, 8008e62 <_vfiprintf_r+0x13a>
 8008e34:	9207      	str	r2, [sp, #28]
 8008e36:	e014      	b.n	8008e62 <_vfiprintf_r+0x13a>
 8008e38:	eba0 0308 	sub.w	r3, r0, r8
 8008e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8008e40:	4313      	orrs	r3, r2
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	46a2      	mov	sl, r4
 8008e46:	e7d2      	b.n	8008dee <_vfiprintf_r+0xc6>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	1d19      	adds	r1, r3, #4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	9103      	str	r1, [sp, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bfbb      	ittet	lt
 8008e54:	425b      	neglt	r3, r3
 8008e56:	f042 0202 	orrlt.w	r2, r2, #2
 8008e5a:	9307      	strge	r3, [sp, #28]
 8008e5c:	9307      	strlt	r3, [sp, #28]
 8008e5e:	bfb8      	it	lt
 8008e60:	9204      	strlt	r2, [sp, #16]
 8008e62:	7823      	ldrb	r3, [r4, #0]
 8008e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e66:	d10a      	bne.n	8008e7e <_vfiprintf_r+0x156>
 8008e68:	7863      	ldrb	r3, [r4, #1]
 8008e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e6c:	d132      	bne.n	8008ed4 <_vfiprintf_r+0x1ac>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	1d1a      	adds	r2, r3, #4
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	9203      	str	r2, [sp, #12]
 8008e76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e7a:	3402      	adds	r4, #2
 8008e7c:	9305      	str	r3, [sp, #20]
 8008e7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f54 <_vfiprintf_r+0x22c>
 8008e82:	7821      	ldrb	r1, [r4, #0]
 8008e84:	2203      	movs	r2, #3
 8008e86:	4650      	mov	r0, sl
 8008e88:	f7f7 f9b2 	bl	80001f0 <memchr>
 8008e8c:	b138      	cbz	r0, 8008e9e <_vfiprintf_r+0x176>
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	eba0 000a 	sub.w	r0, r0, sl
 8008e94:	2240      	movs	r2, #64	@ 0x40
 8008e96:	4082      	lsls	r2, r0
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	3401      	adds	r4, #1
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea2:	4829      	ldr	r0, [pc, #164]	@ (8008f48 <_vfiprintf_r+0x220>)
 8008ea4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ea8:	2206      	movs	r2, #6
 8008eaa:	f7f7 f9a1 	bl	80001f0 <memchr>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d03f      	beq.n	8008f32 <_vfiprintf_r+0x20a>
 8008eb2:	4b26      	ldr	r3, [pc, #152]	@ (8008f4c <_vfiprintf_r+0x224>)
 8008eb4:	bb1b      	cbnz	r3, 8008efe <_vfiprintf_r+0x1d6>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	3307      	adds	r3, #7
 8008eba:	f023 0307 	bic.w	r3, r3, #7
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	9303      	str	r3, [sp, #12]
 8008ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec4:	443b      	add	r3, r7
 8008ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ec8:	e76a      	b.n	8008da0 <_vfiprintf_r+0x78>
 8008eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ece:	460c      	mov	r4, r1
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e7a8      	b.n	8008e26 <_vfiprintf_r+0xfe>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	3401      	adds	r4, #1
 8008ed8:	9305      	str	r3, [sp, #20]
 8008eda:	4619      	mov	r1, r3
 8008edc:	f04f 0c0a 	mov.w	ip, #10
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee6:	3a30      	subs	r2, #48	@ 0x30
 8008ee8:	2a09      	cmp	r2, #9
 8008eea:	d903      	bls.n	8008ef4 <_vfiprintf_r+0x1cc>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0c6      	beq.n	8008e7e <_vfiprintf_r+0x156>
 8008ef0:	9105      	str	r1, [sp, #20]
 8008ef2:	e7c4      	b.n	8008e7e <_vfiprintf_r+0x156>
 8008ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef8:	4604      	mov	r4, r0
 8008efa:	2301      	movs	r3, #1
 8008efc:	e7f0      	b.n	8008ee0 <_vfiprintf_r+0x1b8>
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	462a      	mov	r2, r5
 8008f04:	4b12      	ldr	r3, [pc, #72]	@ (8008f50 <_vfiprintf_r+0x228>)
 8008f06:	a904      	add	r1, sp, #16
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f7fd fbdb 	bl	80066c4 <_printf_float>
 8008f0e:	4607      	mov	r7, r0
 8008f10:	1c78      	adds	r0, r7, #1
 8008f12:	d1d6      	bne.n	8008ec2 <_vfiprintf_r+0x19a>
 8008f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f16:	07d9      	lsls	r1, r3, #31
 8008f18:	d405      	bmi.n	8008f26 <_vfiprintf_r+0x1fe>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	059a      	lsls	r2, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <_vfiprintf_r+0x1fe>
 8008f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f22:	f7fe f92b 	bl	800717c <__retarget_lock_release_recursive>
 8008f26:	89ab      	ldrh	r3, [r5, #12]
 8008f28:	065b      	lsls	r3, r3, #25
 8008f2a:	f53f af1f 	bmi.w	8008d6c <_vfiprintf_r+0x44>
 8008f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f30:	e71e      	b.n	8008d70 <_vfiprintf_r+0x48>
 8008f32:	ab03      	add	r3, sp, #12
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	462a      	mov	r2, r5
 8008f38:	4b05      	ldr	r3, [pc, #20]	@ (8008f50 <_vfiprintf_r+0x228>)
 8008f3a:	a904      	add	r1, sp, #16
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7fd fe59 	bl	8006bf4 <_printf_i>
 8008f42:	e7e4      	b.n	8008f0e <_vfiprintf_r+0x1e6>
 8008f44:	080094f0 	.word	0x080094f0
 8008f48:	080094fa 	.word	0x080094fa
 8008f4c:	080066c5 	.word	0x080066c5
 8008f50:	08008d05 	.word	0x08008d05
 8008f54:	080094f6 	.word	0x080094f6

08008f58 <__swbuf_r>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	460e      	mov	r6, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b118      	cbz	r0, 8008f6a <__swbuf_r+0x12>
 8008f62:	6a03      	ldr	r3, [r0, #32]
 8008f64:	b90b      	cbnz	r3, 8008f6a <__swbuf_r+0x12>
 8008f66:	f7fd fff1 	bl	8006f4c <__sinit>
 8008f6a:	69a3      	ldr	r3, [r4, #24]
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	071a      	lsls	r2, r3, #28
 8008f72:	d501      	bpl.n	8008f78 <__swbuf_r+0x20>
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	b943      	cbnz	r3, 8008f8a <__swbuf_r+0x32>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f000 f82a 	bl	8008fd4 <__swsetup_r>
 8008f80:	b118      	cbz	r0, 8008f8a <__swbuf_r+0x32>
 8008f82:	f04f 37ff 	mov.w	r7, #4294967295
 8008f86:	4638      	mov	r0, r7
 8008f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	1a98      	subs	r0, r3, r2
 8008f90:	6963      	ldr	r3, [r4, #20]
 8008f92:	b2f6      	uxtb	r6, r6
 8008f94:	4283      	cmp	r3, r0
 8008f96:	4637      	mov	r7, r6
 8008f98:	dc05      	bgt.n	8008fa6 <__swbuf_r+0x4e>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f7ff fd99 	bl	8008ad4 <_fflush_r>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d1ed      	bne.n	8008f82 <__swbuf_r+0x2a>
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	60a3      	str	r3, [r4, #8]
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	6022      	str	r2, [r4, #0]
 8008fb2:	701e      	strb	r6, [r3, #0]
 8008fb4:	6962      	ldr	r2, [r4, #20]
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d004      	beq.n	8008fc6 <__swbuf_r+0x6e>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	07db      	lsls	r3, r3, #31
 8008fc0:	d5e1      	bpl.n	8008f86 <__swbuf_r+0x2e>
 8008fc2:	2e0a      	cmp	r6, #10
 8008fc4:	d1df      	bne.n	8008f86 <__swbuf_r+0x2e>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f7ff fd83 	bl	8008ad4 <_fflush_r>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d0d9      	beq.n	8008f86 <__swbuf_r+0x2e>
 8008fd2:	e7d6      	b.n	8008f82 <__swbuf_r+0x2a>

08008fd4 <__swsetup_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4b29      	ldr	r3, [pc, #164]	@ (800907c <__swsetup_r+0xa8>)
 8008fd8:	4605      	mov	r5, r0
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	460c      	mov	r4, r1
 8008fde:	b118      	cbz	r0, 8008fe8 <__swsetup_r+0x14>
 8008fe0:	6a03      	ldr	r3, [r0, #32]
 8008fe2:	b90b      	cbnz	r3, 8008fe8 <__swsetup_r+0x14>
 8008fe4:	f7fd ffb2 	bl	8006f4c <__sinit>
 8008fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fec:	0719      	lsls	r1, r3, #28
 8008fee:	d422      	bmi.n	8009036 <__swsetup_r+0x62>
 8008ff0:	06da      	lsls	r2, r3, #27
 8008ff2:	d407      	bmi.n	8009004 <__swsetup_r+0x30>
 8008ff4:	2209      	movs	r2, #9
 8008ff6:	602a      	str	r2, [r5, #0]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8009002:	e033      	b.n	800906c <__swsetup_r+0x98>
 8009004:	0758      	lsls	r0, r3, #29
 8009006:	d512      	bpl.n	800902e <__swsetup_r+0x5a>
 8009008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800900a:	b141      	cbz	r1, 800901e <__swsetup_r+0x4a>
 800900c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009010:	4299      	cmp	r1, r3
 8009012:	d002      	beq.n	800901a <__swsetup_r+0x46>
 8009014:	4628      	mov	r0, r5
 8009016:	f7fe feff 	bl	8007e18 <_free_r>
 800901a:	2300      	movs	r3, #0
 800901c:	6363      	str	r3, [r4, #52]	@ 0x34
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	2300      	movs	r3, #0
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f043 0308 	orr.w	r3, r3, #8
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	b94b      	cbnz	r3, 800904e <__swsetup_r+0x7a>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009044:	d003      	beq.n	800904e <__swsetup_r+0x7a>
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f000 f883 	bl	8009154 <__smakebuf_r>
 800904e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009052:	f013 0201 	ands.w	r2, r3, #1
 8009056:	d00a      	beq.n	800906e <__swsetup_r+0x9a>
 8009058:	2200      	movs	r2, #0
 800905a:	60a2      	str	r2, [r4, #8]
 800905c:	6962      	ldr	r2, [r4, #20]
 800905e:	4252      	negs	r2, r2
 8009060:	61a2      	str	r2, [r4, #24]
 8009062:	6922      	ldr	r2, [r4, #16]
 8009064:	b942      	cbnz	r2, 8009078 <__swsetup_r+0xa4>
 8009066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800906a:	d1c5      	bne.n	8008ff8 <__swsetup_r+0x24>
 800906c:	bd38      	pop	{r3, r4, r5, pc}
 800906e:	0799      	lsls	r1, r3, #30
 8009070:	bf58      	it	pl
 8009072:	6962      	ldrpl	r2, [r4, #20]
 8009074:	60a2      	str	r2, [r4, #8]
 8009076:	e7f4      	b.n	8009062 <__swsetup_r+0x8e>
 8009078:	2000      	movs	r0, #0
 800907a:	e7f7      	b.n	800906c <__swsetup_r+0x98>
 800907c:	20000020 	.word	0x20000020

08009080 <_raise_r>:
 8009080:	291f      	cmp	r1, #31
 8009082:	b538      	push	{r3, r4, r5, lr}
 8009084:	4605      	mov	r5, r0
 8009086:	460c      	mov	r4, r1
 8009088:	d904      	bls.n	8009094 <_raise_r+0x14>
 800908a:	2316      	movs	r3, #22
 800908c:	6003      	str	r3, [r0, #0]
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009096:	b112      	cbz	r2, 800909e <_raise_r+0x1e>
 8009098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800909c:	b94b      	cbnz	r3, 80090b2 <_raise_r+0x32>
 800909e:	4628      	mov	r0, r5
 80090a0:	f000 f830 	bl	8009104 <_getpid_r>
 80090a4:	4622      	mov	r2, r4
 80090a6:	4601      	mov	r1, r0
 80090a8:	4628      	mov	r0, r5
 80090aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ae:	f000 b817 	b.w	80090e0 <_kill_r>
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d00a      	beq.n	80090cc <_raise_r+0x4c>
 80090b6:	1c59      	adds	r1, r3, #1
 80090b8:	d103      	bne.n	80090c2 <_raise_r+0x42>
 80090ba:	2316      	movs	r3, #22
 80090bc:	6003      	str	r3, [r0, #0]
 80090be:	2001      	movs	r0, #1
 80090c0:	e7e7      	b.n	8009092 <_raise_r+0x12>
 80090c2:	2100      	movs	r1, #0
 80090c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090c8:	4620      	mov	r0, r4
 80090ca:	4798      	blx	r3
 80090cc:	2000      	movs	r0, #0
 80090ce:	e7e0      	b.n	8009092 <_raise_r+0x12>

080090d0 <raise>:
 80090d0:	4b02      	ldr	r3, [pc, #8]	@ (80090dc <raise+0xc>)
 80090d2:	4601      	mov	r1, r0
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	f7ff bfd3 	b.w	8009080 <_raise_r>
 80090da:	bf00      	nop
 80090dc:	20000020 	.word	0x20000020

080090e0 <_kill_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	@ (8009100 <_kill_r+0x20>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	f7f8 fb62 	bl	80017b6 <_kill>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d102      	bne.n	80090fc <_kill_r+0x1c>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b103      	cbz	r3, 80090fc <_kill_r+0x1c>
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	bf00      	nop
 8009100:	200004ec 	.word	0x200004ec

08009104 <_getpid_r>:
 8009104:	f7f8 bb4f 	b.w	80017a6 <_getpid>

08009108 <__swhatbuf_r>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	460c      	mov	r4, r1
 800910c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009110:	2900      	cmp	r1, #0
 8009112:	b096      	sub	sp, #88	@ 0x58
 8009114:	4615      	mov	r5, r2
 8009116:	461e      	mov	r6, r3
 8009118:	da0d      	bge.n	8009136 <__swhatbuf_r+0x2e>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009120:	f04f 0100 	mov.w	r1, #0
 8009124:	bf14      	ite	ne
 8009126:	2340      	movne	r3, #64	@ 0x40
 8009128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800912c:	2000      	movs	r0, #0
 800912e:	6031      	str	r1, [r6, #0]
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	b016      	add	sp, #88	@ 0x58
 8009134:	bd70      	pop	{r4, r5, r6, pc}
 8009136:	466a      	mov	r2, sp
 8009138:	f000 f848 	bl	80091cc <_fstat_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	dbec      	blt.n	800911a <__swhatbuf_r+0x12>
 8009140:	9901      	ldr	r1, [sp, #4]
 8009142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800914a:	4259      	negs	r1, r3
 800914c:	4159      	adcs	r1, r3
 800914e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009152:	e7eb      	b.n	800912c <__swhatbuf_r+0x24>

08009154 <__smakebuf_r>:
 8009154:	898b      	ldrh	r3, [r1, #12]
 8009156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009158:	079d      	lsls	r5, r3, #30
 800915a:	4606      	mov	r6, r0
 800915c:	460c      	mov	r4, r1
 800915e:	d507      	bpl.n	8009170 <__smakebuf_r+0x1c>
 8009160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	2301      	movs	r3, #1
 800916a:	6163      	str	r3, [r4, #20]
 800916c:	b003      	add	sp, #12
 800916e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009170:	ab01      	add	r3, sp, #4
 8009172:	466a      	mov	r2, sp
 8009174:	f7ff ffc8 	bl	8009108 <__swhatbuf_r>
 8009178:	9f00      	ldr	r7, [sp, #0]
 800917a:	4605      	mov	r5, r0
 800917c:	4639      	mov	r1, r7
 800917e:	4630      	mov	r0, r6
 8009180:	f7fe febe 	bl	8007f00 <_malloc_r>
 8009184:	b948      	cbnz	r0, 800919a <__smakebuf_r+0x46>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	059a      	lsls	r2, r3, #22
 800918c:	d4ee      	bmi.n	800916c <__smakebuf_r+0x18>
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	f043 0302 	orr.w	r3, r3, #2
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	e7e2      	b.n	8009160 <__smakebuf_r+0xc>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	6020      	str	r0, [r4, #0]
 800919e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091aa:	b15b      	cbz	r3, 80091c4 <__smakebuf_r+0x70>
 80091ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 f81d 	bl	80091f0 <_isatty_r>
 80091b6:	b128      	cbz	r0, 80091c4 <__smakebuf_r+0x70>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	431d      	orrs	r5, r3
 80091c8:	81a5      	strh	r5, [r4, #12]
 80091ca:	e7cf      	b.n	800916c <__smakebuf_r+0x18>

080091cc <_fstat_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	@ (80091ec <_fstat_r+0x20>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	602b      	str	r3, [r5, #0]
 80091da:	f7f8 fb4c 	bl	8001876 <_fstat>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d102      	bne.n	80091e8 <_fstat_r+0x1c>
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	b103      	cbz	r3, 80091e8 <_fstat_r+0x1c>
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	bf00      	nop
 80091ec:	200004ec 	.word	0x200004ec

080091f0 <_isatty_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	@ (800920c <_isatty_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7f8 fb4b 	bl	8001896 <_isatty>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_isatty_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_isatty_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	200004ec 	.word	0x200004ec

08009210 <_init>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr

0800921c <_fini>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr
